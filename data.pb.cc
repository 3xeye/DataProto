// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {

namespace {

const ::google::protobuf::Descriptor* Item_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_General_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_General_Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  Item_Data_descriptor_ = file->message_type(0);
  static const int Item_Data_offsets_[87] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, modelscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, dropitemsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, useitemsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, dragitemsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, isdisplayindb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, subcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, valuable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, precious_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, runeequipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, heightoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, questitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, cdgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, bprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, bpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, sprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, spricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, fprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, auctionprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nobuyback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, shopjingjierequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, lvreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, maxlvreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, sexreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, allowbodytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, combatreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, combatequreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, zaijureq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, contype1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conop1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, contype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conop2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, contype3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conop3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, conparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, mwrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, holdmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, tgttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, tgtdist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ttltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ttlexpiretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ttlchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ttlchangeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, commonexpiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ownership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, renewaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, commonrenewaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, mallrenewal30days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, mallrenewalownership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, mallrenewalforever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nosell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, notrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nodrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nomail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, noconsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, coinconsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nobooth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, noboothbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nostorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, norepair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, nolatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, noreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, rideitemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, spelltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, accordingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, ctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, navigatorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, navigatortarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, desctitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, funcdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, historydesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, timestamp_),
  };
  Item_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_Data_descriptor_,
      Item_Data::default_instance_,
      Item_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_Data));
  Skill_General_Data_descriptor_ = file->message_type(1);
  static const int Skill_General_Data_offsets_[96] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, spellactstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, casttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, spelltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, seaftercalc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtselectstrategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, mainenheff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, checkmoveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, clientcalcnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, showindicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, creations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, learnlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, graph4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, castbreakable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, selfnostates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, school_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, flyspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, collideheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, spellactaura_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, guidevpneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, notturntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, noatktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, isaoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, ammoneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, movedelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, preammotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, hidecastbar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, uishape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, indicatortime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, notmovetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, spellcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, selfstates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, prespell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, rangemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, autouseskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtalltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, rangemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, circleshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, spellmoveable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, wsadd2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, wsadd1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, restoredelaycd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, useableinstub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, selfhpmorepct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, notgt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, wsneed1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, wsneed2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtselffriendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtfriendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, movedelaynotaffectcalc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, flynodelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, detaileff2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, castdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtselfenemytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, switchstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, detaileff3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, casttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, detaileff1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtselectstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, wstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, addwseff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, learngold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, consumequipneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, auras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, mpneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, spellbreakable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, maineff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, noarrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, moveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, gcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtnowpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, graph2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, graph3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, goonzaijuno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, graph1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, castinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, selfhplesspct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, tgtenemytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, guidempneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, facepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, vpneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, castmovetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, wpskilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, chargestgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, se_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, effects_),
  };
  Skill_General_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_General_Data_descriptor_,
      Skill_General_Data::default_instance_,
      Skill_General_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill_General_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill_General_Data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_Data_descriptor_, &Item_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_General_Data_descriptor_, &Skill_General_Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete Item_Data::default_instance_;
  delete Item_Data_reflection_;
  delete Skill_General_Data::default_instance_;
  delete Skill_General_Data_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\004data\"\206\r\n\tItem_Data\022\014\n\004name"
    "\030\001 \001(\014\022\014\n\004icon\030\002 \001(\005\022\017\n\007modelId\030\003 \001(\005\022\022\n"
    "\nmodelScale\030\004 \001(\002\022\025\n\rdropItemSound\030\005 \001(\005"
    "\022\024\n\014useItemSound\030\006 \001(\005\022\025\n\rdragItemSound\030"
    "\007 \001(\005\022\020\n\010parentId\030\010 \001(\005\022\025\n\risDisplayInDb"
    "\030\t \001(\005\022\017\n\007quality\030\n \001(\005\022\014\n\004type\030\013 \001(\005\022\020\n"
    "\010category\030\014 \001(\005\022\023\n\013subcategory\030\r \001(\005\022\020\n\010"
    "valuable\030\016 \001(\005\022\020\n\010precious\030\017 \001(\005\022\024\n\014rune"
    "EquipExp\030\020 \001(\005\022\024\n\014heightOffset\030\021 \001(\002\022\021\n\t"
    "questItem\030\022 \001(\005\022\017\n\007cdgroup\030\023 \001(\005\022\n\n\002cd\030\024"
    " \001(\005\022\016\n\006bPrice\030\025 \001(\005\022\022\n\nbPriceType\030\026 \001(\005"
    "\022\016\n\006sPrice\030\027 \001(\005\022\022\n\nsPriceType\030\030 \001(\005\022\016\n\006"
    "fPrice\030\031 \001(\005\022\024\n\014auctionPrice\030\032 \001(\005\022\021\n\tno"
    "BuyBack\030\034 \001(\005\022\032\n\022shopJingJieRequire\030\036 \001("
    "\005\022\020\n\010bindType\030\037 \001(\005\022\r\n\005lvReq\030  \001(\005\022\020\n\010ma"
    "xLvReq\030! \001(\005\022\016\n\006sexReq\030\" \001(\005\022\025\n\rallowBod"
    "yType\030# \001(\005\022\021\n\tcombatReq\030% \001(\005\022\024\n\014combat"
    "EquReq\030& \001(\005\022\020\n\010zaijuReq\030\' \001(\005\022\020\n\010conTyp"
    "e1\030* \001(\005\022\016\n\006conId1\030+ \001(\005\022\016\n\006conOp1\030, \001(\005"
    "\022\021\n\tconParam1\030- \001(\005\022\020\n\010conType2\030. \001(\005\022\016\n"
    "\006conId2\030/ \001(\005\022\016\n\006conOp2\0300 \001(\005\022\021\n\tconPara"
    "m2\0301 \001(\005\022\020\n\010conType3\0302 \001(\005\022\016\n\006conId3\0303 \001"
    "(\005\022\016\n\006conOp3\0304 \001(\005\022\021\n\tconParam3\0305 \001(\005\022\r\n"
    "\005mwrap\0306 \001(\005\022\017\n\007holdMax\0307 \001(\005\022\017\n\007tgtType"
    "\0308 \001(\005\022\017\n\007tgtDist\0309 \001(\002\022\017\n\007ttlType\030; \001(\005"
    "\022\013\n\003ttl\030< \001(\005\022\025\n\rttlExpireType\030= \001(\005\022\023\n\013"
    "ttlChangeId\030> \001(\005\022\027\n\017ttlChangeAmount\030\? \001"
    "(\005\022\030\n\020commonExpireTime\030@ \001(\014\022\021\n\townershi"
    "p\030A \001(\005\022\023\n\013renewalType\030B \001(\005\022\031\n\021commonRe"
    "newalType\030C \001(\005\022\031\n\021mallRenewal30Days\030D \001"
    "(\005\022\034\n\024mallRenewalOwnership\030E \001(\005\022\032\n\022mall"
    "RenewalForever\030F \001(\005\022\016\n\006noSell\030G \001(\005\022\017\n\007"
    "noTrade\030H \001(\005\022\016\n\006noDrop\030I \001(\005\022\016\n\006noMail\030"
    "J \001(\005\022\021\n\tnoConsign\030K \001(\005\022\023\n\013coinConsign\030"
    "L \001(\005\022\017\n\007noBooth\030M \001(\005\022\022\n\nnoBoothBuy\030N \001"
    "(\005\022\021\n\tnoStorage\030O \001(\005\022\020\n\010noRepair\030P \001(\005\022"
    "\017\n\007noLatch\030Q \001(\005\022\020\n\010noReturn\030R \001(\005\022\024\n\014ri"
    "deItemType\030S \001(\005\022\021\n\tspellTime\030T \001(\002\022\025\n\ra"
    "ccordingType\030U \001(\005\022\014\n\004ctrl\030V \001(\005\022\025\n\rnavi"
    "gatorName\030W \001(\014\022\027\n\017navigatorTarget\030X \001(\014"
    "\022\021\n\tdescTitle\030Y \001(\014\022\020\n\010funcDesc\030Z \001(\014\022\014\n"
    "\004desc\030[ \001(\014\022\023\n\013historyDesc\030\\ \001(\014\022\021\n\ttime"
    "stamp\030] \001(\005\"\323\016\n\022Skill_General_Data\022\025\n\rsp"
    "ellActState\030\001 \001(\005\022\020\n\010castType\030\002 \001(\005\022\021\n\ts"
    "pellTime\030\003 \001(\002\022\023\n\013seAfterCalc\030\004 \001(\014\022\031\n\021t"
    "gtSelectStrategy\030\005 \001(\014\022\022\n\nmainEnhEff\030\006 \001"
    "(\014\022\023\n\013checkMoveId\030\007 \001(\005\022\025\n\rclientCalcNum"
    "\030\010 \001(\005\022\025\n\rshowIndicator\030\t \001(\005\022\n\n\002lv\030\n \001("
    "\005\022\021\n\tcreations\030\013 \001(\014\022\017\n\007learnLv\030\014 \001(\005\022\016\n"
    "\006graph4\030\r \001(\014\022\025\n\rcastBreakable\030\016 \001(\005\022\024\n\014"
    "selfNoStates\030\017 \001(\014\022\016\n\006school\030\020 \001(\005\022\020\n\010fl"
    "ySpeed\030\021 \001(\002\022\014\n\004name\030\022 \001(\014\022\025\n\rcollideHei"
    "ght\030\023 \001(\014\022\024\n\014spellActAura\030\024 \001(\005\022\021\n\tskill"
    "Type\030\025 \001(\005\022\023\n\013guidevpNeed\030\026 \001(\005\022\023\n\013notTu"
    "rnTime\030\027 \001(\002\022\021\n\tnoAtkTime\030\030 \001(\002\022\r\n\005isAoe"
    "\030\031 \001(\005\022\020\n\010ammoNeed\030\032 \001(\005\022\021\n\tmovedelay\030\033 "
    "\001(\002\022\023\n\013preAmmoType\030\034 \001(\014\022\023\n\013hideCastBar\030"
    "\035 \001(\005\022\017\n\007tgtSelf\030\036 \001(\005\022\017\n\007uiShape\030\037 \001(\014\022"
    "\025\n\rindicatorTime\030  \001(\002\022\023\n\013notMoveTime\030! "
    "\001(\002\022\023\n\013spellCharge\030\" \001(\005\022\022\n\nselfStates\030#"
    " \001(\014\022\020\n\010preSpell\030$ \001(\005\022\020\n\010rangeMax\030% \001(\014"
    "\022\024\n\014autoUseSkill\030& \001(\005\022\021\n\tmoveSpeed\030\' \001("
    "\002\022\022\n\ntgtAllType\030( \001(\005\022\020\n\010rangeMin\030) \001(\005\022"
    "\023\n\013circleShape\030* \001(\014\022\025\n\rspellMoveable\030+ "
    "\001(\005\022\016\n\006wsAdd2\030, \001(\002\022\016\n\006wsAdd1\030- \001(\005\022\026\n\016r"
    "estoreDelayCd\030. \001(\005\022\025\n\ruseableInStub\030/ \001"
    "(\005\022\025\n\rselfHpMorePct\0300 \001(\005\022\r\n\005noTgt\0301 \001(\005"
    "\022\017\n\007wsNeed1\0302 \001(\005\022\017\n\007wsNeed2\0303 \001(\005\022\031\n\021tg"
    "tSelfFriendType\0304 \001(\005\022\025\n\rtgtFriendType\0305"
    " \001(\005\022\036\n\026moveDelayNotAffectCalc\0306 \001(\005\022\n\n\002"
    "cd\0307 \001(\002\022\022\n\nflyNoDelay\0308 \001(\005\022\022\n\ndetailEf"
    "f2\0309 \001(\014\022\021\n\tcastDelay\030: \001(\014\022\030\n\020tgtSelfEn"
    "emyType\030; \001(\005\022\023\n\013switchState\030< \001(\005\022\022\n\nde"
    "tailEff3\030= \001(\014\022\020\n\010castTime\030> \001(\002\022\022\n\ndeta"
    "ilEff1\030\? \001(\014\022\026\n\016tgtSelectState\030@ \001(\005\022\016\n\006"
    "wsType\030A \001(\005\022\020\n\010describe\030B \001(\014\022\020\n\010addWsE"
    "ff\030C \001(\014\022\021\n\tlearnGold\030D \001(\005\022\027\n\017consumEqu"
    "ipNeed\030E \001(\014\022\r\n\005auras\030F \001(\014\022\016\n\006mpNeed\030G "
    "\001(\005\022\026\n\016spellBreakable\030H \001(\005\022\017\n\007mainEff\030I"
    " \001(\014\022\017\n\007noArrow\030J \001(\005\022\016\n\006moveid\030K \001(\005\022\n\n"
    "\002id\030L \001(\005\022\016\n\006tgtPos\030M \001(\005\022\013\n\003gcd\030N \001(\002\022\021"
    "\n\ttgtNowPos\030O \001(\005\022\016\n\006graph2\030P \001(\014\022\016\n\006gra"
    "ph3\030Q \001(\014\022\023\n\013goOnZaijuNo\030R \001(\005\022\016\n\006graph1"
    "\030S \001(\014\022\017\n\007details\030T \001(\014\022\024\n\014castInterval\030"
    "U \001(\002\022\013\n\003sid\030V \001(\005\022\025\n\rselfHpLessPct\030W \001("
    "\005\022\024\n\014tgtEnemyType\030X \001(\005\022\023\n\013guidempNeed\030Y"
    " \001(\005\022\017\n\007facePos\030Z \001(\005\022\016\n\006vpNeed\030[ \001(\005\022\024\n"
    "\014castMoveType\030\\ \001(\005\022\023\n\013wpSkillType\030] \001(\014"
    "\022\022\n\nchargeStgs\030^ \001(\014\022\n\n\002se\030_ \001(\014\022\017\n\007effe"
    "cts\030` \001(\014", 3569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  Item_Data::default_instance_ = new Item_Data();
  Skill_General_Data::default_instance_ = new Skill_General_Data();
  Item_Data::default_instance_->InitAsDefaultInstance();
  Skill_General_Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item_Data::kNameFieldNumber;
const int Item_Data::kIconFieldNumber;
const int Item_Data::kModelIdFieldNumber;
const int Item_Data::kModelScaleFieldNumber;
const int Item_Data::kDropItemSoundFieldNumber;
const int Item_Data::kUseItemSoundFieldNumber;
const int Item_Data::kDragItemSoundFieldNumber;
const int Item_Data::kParentIdFieldNumber;
const int Item_Data::kIsDisplayInDbFieldNumber;
const int Item_Data::kQualityFieldNumber;
const int Item_Data::kTypeFieldNumber;
const int Item_Data::kCategoryFieldNumber;
const int Item_Data::kSubcategoryFieldNumber;
const int Item_Data::kValuableFieldNumber;
const int Item_Data::kPreciousFieldNumber;
const int Item_Data::kRuneEquipExpFieldNumber;
const int Item_Data::kHeightOffsetFieldNumber;
const int Item_Data::kQuestItemFieldNumber;
const int Item_Data::kCdgroupFieldNumber;
const int Item_Data::kCdFieldNumber;
const int Item_Data::kBPriceFieldNumber;
const int Item_Data::kBPriceTypeFieldNumber;
const int Item_Data::kSPriceFieldNumber;
const int Item_Data::kSPriceTypeFieldNumber;
const int Item_Data::kFPriceFieldNumber;
const int Item_Data::kAuctionPriceFieldNumber;
const int Item_Data::kNoBuyBackFieldNumber;
const int Item_Data::kShopJingJieRequireFieldNumber;
const int Item_Data::kBindTypeFieldNumber;
const int Item_Data::kLvReqFieldNumber;
const int Item_Data::kMaxLvReqFieldNumber;
const int Item_Data::kSexReqFieldNumber;
const int Item_Data::kAllowBodyTypeFieldNumber;
const int Item_Data::kCombatReqFieldNumber;
const int Item_Data::kCombatEquReqFieldNumber;
const int Item_Data::kZaijuReqFieldNumber;
const int Item_Data::kConType1FieldNumber;
const int Item_Data::kConId1FieldNumber;
const int Item_Data::kConOp1FieldNumber;
const int Item_Data::kConParam1FieldNumber;
const int Item_Data::kConType2FieldNumber;
const int Item_Data::kConId2FieldNumber;
const int Item_Data::kConOp2FieldNumber;
const int Item_Data::kConParam2FieldNumber;
const int Item_Data::kConType3FieldNumber;
const int Item_Data::kConId3FieldNumber;
const int Item_Data::kConOp3FieldNumber;
const int Item_Data::kConParam3FieldNumber;
const int Item_Data::kMwrapFieldNumber;
const int Item_Data::kHoldMaxFieldNumber;
const int Item_Data::kTgtTypeFieldNumber;
const int Item_Data::kTgtDistFieldNumber;
const int Item_Data::kTtlTypeFieldNumber;
const int Item_Data::kTtlFieldNumber;
const int Item_Data::kTtlExpireTypeFieldNumber;
const int Item_Data::kTtlChangeIdFieldNumber;
const int Item_Data::kTtlChangeAmountFieldNumber;
const int Item_Data::kCommonExpireTimeFieldNumber;
const int Item_Data::kOwnershipFieldNumber;
const int Item_Data::kRenewalTypeFieldNumber;
const int Item_Data::kCommonRenewalTypeFieldNumber;
const int Item_Data::kMallRenewal30DaysFieldNumber;
const int Item_Data::kMallRenewalOwnershipFieldNumber;
const int Item_Data::kMallRenewalForeverFieldNumber;
const int Item_Data::kNoSellFieldNumber;
const int Item_Data::kNoTradeFieldNumber;
const int Item_Data::kNoDropFieldNumber;
const int Item_Data::kNoMailFieldNumber;
const int Item_Data::kNoConsignFieldNumber;
const int Item_Data::kCoinConsignFieldNumber;
const int Item_Data::kNoBoothFieldNumber;
const int Item_Data::kNoBoothBuyFieldNumber;
const int Item_Data::kNoStorageFieldNumber;
const int Item_Data::kNoRepairFieldNumber;
const int Item_Data::kNoLatchFieldNumber;
const int Item_Data::kNoReturnFieldNumber;
const int Item_Data::kRideItemTypeFieldNumber;
const int Item_Data::kSpellTimeFieldNumber;
const int Item_Data::kAccordingTypeFieldNumber;
const int Item_Data::kCtrlFieldNumber;
const int Item_Data::kNavigatorNameFieldNumber;
const int Item_Data::kNavigatorTargetFieldNumber;
const int Item_Data::kDescTitleFieldNumber;
const int Item_Data::kFuncDescFieldNumber;
const int Item_Data::kDescFieldNumber;
const int Item_Data::kHistoryDescFieldNumber;
const int Item_Data::kTimestampFieldNumber;
#endif  // !_MSC_VER

Item_Data::Item_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Item_Data)
}

void Item_Data::InitAsDefaultInstance() {
}

Item_Data::Item_Data(const Item_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Item_Data)
}

void Item_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = 0;
  modelid_ = 0;
  modelscale_ = 0;
  dropitemsound_ = 0;
  useitemsound_ = 0;
  dragitemsound_ = 0;
  parentid_ = 0;
  isdisplayindb_ = 0;
  quality_ = 0;
  type_ = 0;
  category_ = 0;
  subcategory_ = 0;
  valuable_ = 0;
  precious_ = 0;
  runeequipexp_ = 0;
  heightoffset_ = 0;
  questitem_ = 0;
  cdgroup_ = 0;
  cd_ = 0;
  bprice_ = 0;
  bpricetype_ = 0;
  sprice_ = 0;
  spricetype_ = 0;
  fprice_ = 0;
  auctionprice_ = 0;
  nobuyback_ = 0;
  shopjingjierequire_ = 0;
  bindtype_ = 0;
  lvreq_ = 0;
  maxlvreq_ = 0;
  sexreq_ = 0;
  allowbodytype_ = 0;
  combatreq_ = 0;
  combatequreq_ = 0;
  zaijureq_ = 0;
  contype1_ = 0;
  conid1_ = 0;
  conop1_ = 0;
  conparam1_ = 0;
  contype2_ = 0;
  conid2_ = 0;
  conop2_ = 0;
  conparam2_ = 0;
  contype3_ = 0;
  conid3_ = 0;
  conop3_ = 0;
  conparam3_ = 0;
  mwrap_ = 0;
  holdmax_ = 0;
  tgttype_ = 0;
  tgtdist_ = 0;
  ttltype_ = 0;
  ttl_ = 0;
  ttlexpiretype_ = 0;
  ttlchangeid_ = 0;
  ttlchangeamount_ = 0;
  commonexpiretime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownership_ = 0;
  renewaltype_ = 0;
  commonrenewaltype_ = 0;
  mallrenewal30days_ = 0;
  mallrenewalownership_ = 0;
  mallrenewalforever_ = 0;
  nosell_ = 0;
  notrade_ = 0;
  nodrop_ = 0;
  nomail_ = 0;
  noconsign_ = 0;
  coinconsign_ = 0;
  nobooth_ = 0;
  noboothbuy_ = 0;
  nostorage_ = 0;
  norepair_ = 0;
  nolatch_ = 0;
  noreturn_ = 0;
  rideitemtype_ = 0;
  spelltime_ = 0;
  accordingtype_ = 0;
  ctrl_ = 0;
  navigatorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navigatortarget_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desctitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  historydesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_Data::~Item_Data() {
  // @@protoc_insertion_point(destructor:data.Item_Data)
  SharedDtor();
}

void Item_Data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (commonexpiretime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete commonexpiretime_;
  }
  if (navigatorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete navigatorname_;
  }
  if (navigatortarget_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete navigatortarget_;
  }
  if (desctitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desctitle_;
  }
  if (funcdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funcdesc_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (historydesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete historydesc_;
  }
  if (this != default_instance_) {
  }
}

void Item_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_Data_descriptor_;
}

const Item_Data& Item_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

Item_Data* Item_Data::default_instance_ = NULL;

Item_Data* Item_Data::New() const {
  return new Item_Data;
}

void Item_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(icon_, parentid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(isdisplayindb_, runeequipexp_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(heightoffset_, spricetype_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(fprice_, sexreq_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(allowbodytype_, conparam1_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(contype2_, conparam3_);
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(mwrap_, ttlchangeid_);
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    ZR_(ownership_, mallrenewalforever_);
    ttlchangeamount_ = 0;
    if (has_commonexpiretime()) {
      if (commonexpiretime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        commonexpiretime_->clear();
      }
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(nosell_, noboothbuy_);
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(nostorage_, ctrl_);
  }
  if (_has_bits_[80 / 32] & 8323072) {
    if (has_navigatorname()) {
      if (navigatorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        navigatorname_->clear();
      }
    }
    if (has_navigatortarget()) {
      if (navigatortarget_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        navigatortarget_->clear();
      }
    }
    if (has_desctitle()) {
      if (desctitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desctitle_->clear();
      }
    }
    if (has_funcdesc()) {
      if (funcdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        funcdesc_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_historydesc()) {
      if (historydesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        historydesc_->clear();
      }
    }
    timestamp_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Item_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_icon;
        break;
      }

      // optional int32 icon = 2;
      case 2: {
        if (tag == 16) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_modelId;
        break;
      }

      // optional int32 modelId = 3;
      case 3: {
        if (tag == 24) {
         parse_modelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_modelScale;
        break;
      }

      // optional float modelScale = 4;
      case 4: {
        if (tag == 37) {
         parse_modelScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modelscale_)));
          set_has_modelscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dropItemSound;
        break;
      }

      // optional int32 dropItemSound = 5;
      case 5: {
        if (tag == 40) {
         parse_dropItemSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropitemsound_)));
          set_has_dropitemsound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_useItemSound;
        break;
      }

      // optional int32 useItemSound = 6;
      case 6: {
        if (tag == 48) {
         parse_useItemSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useitemsound_)));
          set_has_useitemsound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dragItemSound;
        break;
      }

      // optional int32 dragItemSound = 7;
      case 7: {
        if (tag == 56) {
         parse_dragItemSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dragitemsound_)));
          set_has_dragitemsound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_parentId;
        break;
      }

      // optional int32 parentId = 8;
      case 8: {
        if (tag == 64) {
         parse_parentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isDisplayInDb;
        break;
      }

      // optional int32 isDisplayInDb = 9;
      case 9: {
        if (tag == 72) {
         parse_isDisplayInDb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdisplayindb_)));
          set_has_isdisplayindb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }

      // optional int32 quality = 10;
      case 10: {
        if (tag == 80) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }

      // optional int32 type = 11;
      case 11: {
        if (tag == 88) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_category;
        break;
      }

      // optional int32 category = 12;
      case 12: {
        if (tag == 96) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_subcategory;
        break;
      }

      // optional int32 subcategory = 13;
      case 13: {
        if (tag == 104) {
         parse_subcategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcategory_)));
          set_has_subcategory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_valuable;
        break;
      }

      // optional int32 valuable = 14;
      case 14: {
        if (tag == 112) {
         parse_valuable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuable_)));
          set_has_valuable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_precious;
        break;
      }

      // optional int32 precious = 15;
      case 15: {
        if (tag == 120) {
         parse_precious:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precious_)));
          set_has_precious();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_runeEquipExp;
        break;
      }

      // optional int32 runeEquipExp = 16;
      case 16: {
        if (tag == 128) {
         parse_runeEquipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runeequipexp_)));
          set_has_runeequipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_heightOffset;
        break;
      }

      // optional float heightOffset = 17;
      case 17: {
        if (tag == 141) {
         parse_heightOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heightoffset_)));
          set_has_heightoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_questItem;
        break;
      }

      // optional int32 questItem = 18;
      case 18: {
        if (tag == 144) {
         parse_questItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questitem_)));
          set_has_questitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_cdgroup;
        break;
      }

      // optional int32 cdgroup = 19;
      case 19: {
        if (tag == 152) {
         parse_cdgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdgroup_)));
          set_has_cdgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_cd;
        break;
      }

      // optional int32 cd = 20;
      case 20: {
        if (tag == 160) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_bPrice;
        break;
      }

      // optional int32 bPrice = 21;
      case 21: {
        if (tag == 168) {
         parse_bPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bprice_)));
          set_has_bprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_bPriceType;
        break;
      }

      // optional int32 bPriceType = 22;
      case 22: {
        if (tag == 176) {
         parse_bPriceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpricetype_)));
          set_has_bpricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_sPrice;
        break;
      }

      // optional int32 sPrice = 23;
      case 23: {
        if (tag == 184) {
         parse_sPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sprice_)));
          set_has_sprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_sPriceType;
        break;
      }

      // optional int32 sPriceType = 24;
      case 24: {
        if (tag == 192) {
         parse_sPriceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spricetype_)));
          set_has_spricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_fPrice;
        break;
      }

      // optional int32 fPrice = 25;
      case 25: {
        if (tag == 200) {
         parse_fPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fprice_)));
          set_has_fprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_auctionPrice;
        break;
      }

      // optional int32 auctionPrice = 26;
      case 26: {
        if (tag == 208) {
         parse_auctionPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auctionprice_)));
          set_has_auctionprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_noBuyBack;
        break;
      }

      // optional int32 noBuyBack = 28;
      case 28: {
        if (tag == 224) {
         parse_noBuyBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nobuyback_)));
          set_has_nobuyback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_shopJingJieRequire;
        break;
      }

      // optional int32 shopJingJieRequire = 30;
      case 30: {
        if (tag == 240) {
         parse_shopJingJieRequire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopjingjierequire_)));
          set_has_shopjingjierequire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_bindType;
        break;
      }

      // optional int32 bindType = 31;
      case 31: {
        if (tag == 248) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_lvReq;
        break;
      }

      // optional int32 lvReq = 32;
      case 32: {
        if (tag == 256) {
         parse_lvReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvreq_)));
          set_has_lvreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_maxLvReq;
        break;
      }

      // optional int32 maxLvReq = 33;
      case 33: {
        if (tag == 264) {
         parse_maxLvReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlvreq_)));
          set_has_maxlvreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_sexReq;
        break;
      }

      // optional int32 sexReq = 34;
      case 34: {
        if (tag == 272) {
         parse_sexReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sexreq_)));
          set_has_sexreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_allowBodyType;
        break;
      }

      // optional int32 allowBodyType = 35;
      case 35: {
        if (tag == 280) {
         parse_allowBodyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowbodytype_)));
          set_has_allowbodytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_combatReq;
        break;
      }

      // optional int32 combatReq = 37;
      case 37: {
        if (tag == 296) {
         parse_combatReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatreq_)));
          set_has_combatreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_combatEquReq;
        break;
      }

      // optional int32 combatEquReq = 38;
      case 38: {
        if (tag == 304) {
         parse_combatEquReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatequreq_)));
          set_has_combatequreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_zaijuReq;
        break;
      }

      // optional int32 zaijuReq = 39;
      case 39: {
        if (tag == 312) {
         parse_zaijuReq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zaijureq_)));
          set_has_zaijureq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_conType1;
        break;
      }

      // optional int32 conType1 = 42;
      case 42: {
        if (tag == 336) {
         parse_conType1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contype1_)));
          set_has_contype1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_conId1;
        break;
      }

      // optional int32 conId1 = 43;
      case 43: {
        if (tag == 344) {
         parse_conId1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conid1_)));
          set_has_conid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_conOp1;
        break;
      }

      // optional int32 conOp1 = 44;
      case 44: {
        if (tag == 352) {
         parse_conOp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conop1_)));
          set_has_conop1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_conParam1;
        break;
      }

      // optional int32 conParam1 = 45;
      case 45: {
        if (tag == 360) {
         parse_conParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conparam1_)));
          set_has_conparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_conType2;
        break;
      }

      // optional int32 conType2 = 46;
      case 46: {
        if (tag == 368) {
         parse_conType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contype2_)));
          set_has_contype2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_conId2;
        break;
      }

      // optional int32 conId2 = 47;
      case 47: {
        if (tag == 376) {
         parse_conId2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conid2_)));
          set_has_conid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_conOp2;
        break;
      }

      // optional int32 conOp2 = 48;
      case 48: {
        if (tag == 384) {
         parse_conOp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conop2_)));
          set_has_conop2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_conParam2;
        break;
      }

      // optional int32 conParam2 = 49;
      case 49: {
        if (tag == 392) {
         parse_conParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conparam2_)));
          set_has_conparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_conType3;
        break;
      }

      // optional int32 conType3 = 50;
      case 50: {
        if (tag == 400) {
         parse_conType3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contype3_)));
          set_has_contype3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_conId3;
        break;
      }

      // optional int32 conId3 = 51;
      case 51: {
        if (tag == 408) {
         parse_conId3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conid3_)));
          set_has_conid3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_conOp3;
        break;
      }

      // optional int32 conOp3 = 52;
      case 52: {
        if (tag == 416) {
         parse_conOp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conop3_)));
          set_has_conop3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_conParam3;
        break;
      }

      // optional int32 conParam3 = 53;
      case 53: {
        if (tag == 424) {
         parse_conParam3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conparam3_)));
          set_has_conparam3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_mwrap;
        break;
      }

      // optional int32 mwrap = 54;
      case 54: {
        if (tag == 432) {
         parse_mwrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mwrap_)));
          set_has_mwrap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_holdMax;
        break;
      }

      // optional int32 holdMax = 55;
      case 55: {
        if (tag == 440) {
         parse_holdMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holdmax_)));
          set_has_holdmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_tgtType;
        break;
      }

      // optional int32 tgtType = 56;
      case 56: {
        if (tag == 448) {
         parse_tgtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgttype_)));
          set_has_tgttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(461)) goto parse_tgtDist;
        break;
      }

      // optional float tgtDist = 57;
      case 57: {
        if (tag == 461) {
         parse_tgtDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tgtdist_)));
          set_has_tgtdist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_ttlType;
        break;
      }

      // optional int32 ttlType = 59;
      case 59: {
        if (tag == 472) {
         parse_ttlType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttltype_)));
          set_has_ttltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_ttl;
        break;
      }

      // optional int32 ttl = 60;
      case 60: {
        if (tag == 480) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_ttlExpireType;
        break;
      }

      // optional int32 ttlExpireType = 61;
      case 61: {
        if (tag == 488) {
         parse_ttlExpireType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttlexpiretype_)));
          set_has_ttlexpiretype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_ttlChangeId;
        break;
      }

      // optional int32 ttlChangeId = 62;
      case 62: {
        if (tag == 496) {
         parse_ttlChangeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttlchangeid_)));
          set_has_ttlchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_ttlChangeAmount;
        break;
      }

      // optional int32 ttlChangeAmount = 63;
      case 63: {
        if (tag == 504) {
         parse_ttlChangeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttlchangeamount_)));
          set_has_ttlchangeamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_commonExpireTime;
        break;
      }

      // optional bytes commonExpireTime = 64;
      case 64: {
        if (tag == 514) {
         parse_commonExpireTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_commonexpiretime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_ownership;
        break;
      }

      // optional int32 ownership = 65;
      case 65: {
        if (tag == 520) {
         parse_ownership:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownership_)));
          set_has_ownership();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_renewalType;
        break;
      }

      // optional int32 renewalType = 66;
      case 66: {
        if (tag == 528) {
         parse_renewalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renewaltype_)));
          set_has_renewaltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_commonRenewalType;
        break;
      }

      // optional int32 commonRenewalType = 67;
      case 67: {
        if (tag == 536) {
         parse_commonRenewalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commonrenewaltype_)));
          set_has_commonrenewaltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_mallRenewal30Days;
        break;
      }

      // optional int32 mallRenewal30Days = 68;
      case 68: {
        if (tag == 544) {
         parse_mallRenewal30Days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mallrenewal30days_)));
          set_has_mallrenewal30days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_mallRenewalOwnership;
        break;
      }

      // optional int32 mallRenewalOwnership = 69;
      case 69: {
        if (tag == 552) {
         parse_mallRenewalOwnership:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mallrenewalownership_)));
          set_has_mallrenewalownership();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_mallRenewalForever;
        break;
      }

      // optional int32 mallRenewalForever = 70;
      case 70: {
        if (tag == 560) {
         parse_mallRenewalForever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mallrenewalforever_)));
          set_has_mallrenewalforever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_noSell;
        break;
      }

      // optional int32 noSell = 71;
      case 71: {
        if (tag == 568) {
         parse_noSell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nosell_)));
          set_has_nosell();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_noTrade;
        break;
      }

      // optional int32 noTrade = 72;
      case 72: {
        if (tag == 576) {
         parse_noTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notrade_)));
          set_has_notrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_noDrop;
        break;
      }

      // optional int32 noDrop = 73;
      case 73: {
        if (tag == 584) {
         parse_noDrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodrop_)));
          set_has_nodrop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_noMail;
        break;
      }

      // optional int32 noMail = 74;
      case 74: {
        if (tag == 592) {
         parse_noMail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nomail_)));
          set_has_nomail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_noConsign;
        break;
      }

      // optional int32 noConsign = 75;
      case 75: {
        if (tag == 600) {
         parse_noConsign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noconsign_)));
          set_has_noconsign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_coinConsign;
        break;
      }

      // optional int32 coinConsign = 76;
      case 76: {
        if (tag == 608) {
         parse_coinConsign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coinconsign_)));
          set_has_coinconsign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_noBooth;
        break;
      }

      // optional int32 noBooth = 77;
      case 77: {
        if (tag == 616) {
         parse_noBooth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nobooth_)));
          set_has_nobooth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_noBoothBuy;
        break;
      }

      // optional int32 noBoothBuy = 78;
      case 78: {
        if (tag == 624) {
         parse_noBoothBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noboothbuy_)));
          set_has_noboothbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_noStorage;
        break;
      }

      // optional int32 noStorage = 79;
      case 79: {
        if (tag == 632) {
         parse_noStorage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nostorage_)));
          set_has_nostorage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_noRepair;
        break;
      }

      // optional int32 noRepair = 80;
      case 80: {
        if (tag == 640) {
         parse_noRepair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &norepair_)));
          set_has_norepair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_noLatch;
        break;
      }

      // optional int32 noLatch = 81;
      case 81: {
        if (tag == 648) {
         parse_noLatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nolatch_)));
          set_has_nolatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_noReturn;
        break;
      }

      // optional int32 noReturn = 82;
      case 82: {
        if (tag == 656) {
         parse_noReturn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noreturn_)));
          set_has_noreturn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_rideItemType;
        break;
      }

      // optional int32 rideItemType = 83;
      case 83: {
        if (tag == 664) {
         parse_rideItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rideitemtype_)));
          set_has_rideitemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(677)) goto parse_spellTime;
        break;
      }

      // optional float spellTime = 84;
      case 84: {
        if (tag == 677) {
         parse_spellTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spelltime_)));
          set_has_spelltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_accordingType;
        break;
      }

      // optional int32 accordingType = 85;
      case 85: {
        if (tag == 680) {
         parse_accordingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accordingtype_)));
          set_has_accordingtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_ctrl;
        break;
      }

      // optional int32 ctrl = 86;
      case 86: {
        if (tag == 688) {
         parse_ctrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_)));
          set_has_ctrl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_navigatorName;
        break;
      }

      // optional bytes navigatorName = 87;
      case 87: {
        if (tag == 698) {
         parse_navigatorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_navigatorname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_navigatorTarget;
        break;
      }

      // optional bytes navigatorTarget = 88;
      case 88: {
        if (tag == 706) {
         parse_navigatorTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_navigatortarget()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(714)) goto parse_descTitle;
        break;
      }

      // optional bytes descTitle = 89;
      case 89: {
        if (tag == 714) {
         parse_descTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desctitle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_funcDesc;
        break;
      }

      // optional bytes funcDesc = 90;
      case 90: {
        if (tag == 722) {
         parse_funcDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_funcdesc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_desc;
        break;
      }

      // optional bytes desc = 91;
      case 91: {
        if (tag == 730) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_historyDesc;
        break;
      }

      // optional bytes historyDesc = 92;
      case 92: {
        if (tag == 738) {
         parse_historyDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_historydesc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(744)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 93;
      case 93: {
        if (tag == 744) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Item_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Item_Data)
  return false;
#undef DO_
}

void Item_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Item_Data)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icon(), output);
  }

  // optional int32 modelId = 3;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modelid(), output);
  }

  // optional float modelScale = 4;
  if (has_modelscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->modelscale(), output);
  }

  // optional int32 dropItemSound = 5;
  if (has_dropitemsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dropitemsound(), output);
  }

  // optional int32 useItemSound = 6;
  if (has_useitemsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->useitemsound(), output);
  }

  // optional int32 dragItemSound = 7;
  if (has_dragitemsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dragitemsound(), output);
  }

  // optional int32 parentId = 8;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->parentid(), output);
  }

  // optional int32 isDisplayInDb = 9;
  if (has_isdisplayindb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isdisplayindb(), output);
  }

  // optional int32 quality = 10;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }

  // optional int32 type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->type(), output);
  }

  // optional int32 category = 12;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->category(), output);
  }

  // optional int32 subcategory = 13;
  if (has_subcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->subcategory(), output);
  }

  // optional int32 valuable = 14;
  if (has_valuable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->valuable(), output);
  }

  // optional int32 precious = 15;
  if (has_precious()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->precious(), output);
  }

  // optional int32 runeEquipExp = 16;
  if (has_runeequipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->runeequipexp(), output);
  }

  // optional float heightOffset = 17;
  if (has_heightoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->heightoffset(), output);
  }

  // optional int32 questItem = 18;
  if (has_questitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->questitem(), output);
  }

  // optional int32 cdgroup = 19;
  if (has_cdgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->cdgroup(), output);
  }

  // optional int32 cd = 20;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cd(), output);
  }

  // optional int32 bPrice = 21;
  if (has_bprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->bprice(), output);
  }

  // optional int32 bPriceType = 22;
  if (has_bpricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->bpricetype(), output);
  }

  // optional int32 sPrice = 23;
  if (has_sprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sprice(), output);
  }

  // optional int32 sPriceType = 24;
  if (has_spricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->spricetype(), output);
  }

  // optional int32 fPrice = 25;
  if (has_fprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->fprice(), output);
  }

  // optional int32 auctionPrice = 26;
  if (has_auctionprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->auctionprice(), output);
  }

  // optional int32 noBuyBack = 28;
  if (has_nobuyback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nobuyback(), output);
  }

  // optional int32 shopJingJieRequire = 30;
  if (has_shopjingjierequire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->shopjingjierequire(), output);
  }

  // optional int32 bindType = 31;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->bindtype(), output);
  }

  // optional int32 lvReq = 32;
  if (has_lvreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->lvreq(), output);
  }

  // optional int32 maxLvReq = 33;
  if (has_maxlvreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->maxlvreq(), output);
  }

  // optional int32 sexReq = 34;
  if (has_sexreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->sexreq(), output);
  }

  // optional int32 allowBodyType = 35;
  if (has_allowbodytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->allowbodytype(), output);
  }

  // optional int32 combatReq = 37;
  if (has_combatreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->combatreq(), output);
  }

  // optional int32 combatEquReq = 38;
  if (has_combatequreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->combatequreq(), output);
  }

  // optional int32 zaijuReq = 39;
  if (has_zaijureq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->zaijureq(), output);
  }

  // optional int32 conType1 = 42;
  if (has_contype1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->contype1(), output);
  }

  // optional int32 conId1 = 43;
  if (has_conid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->conid1(), output);
  }

  // optional int32 conOp1 = 44;
  if (has_conop1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->conop1(), output);
  }

  // optional int32 conParam1 = 45;
  if (has_conparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->conparam1(), output);
  }

  // optional int32 conType2 = 46;
  if (has_contype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->contype2(), output);
  }

  // optional int32 conId2 = 47;
  if (has_conid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->conid2(), output);
  }

  // optional int32 conOp2 = 48;
  if (has_conop2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->conop2(), output);
  }

  // optional int32 conParam2 = 49;
  if (has_conparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->conparam2(), output);
  }

  // optional int32 conType3 = 50;
  if (has_contype3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->contype3(), output);
  }

  // optional int32 conId3 = 51;
  if (has_conid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->conid3(), output);
  }

  // optional int32 conOp3 = 52;
  if (has_conop3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->conop3(), output);
  }

  // optional int32 conParam3 = 53;
  if (has_conparam3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->conparam3(), output);
  }

  // optional int32 mwrap = 54;
  if (has_mwrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->mwrap(), output);
  }

  // optional int32 holdMax = 55;
  if (has_holdmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->holdmax(), output);
  }

  // optional int32 tgtType = 56;
  if (has_tgttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->tgttype(), output);
  }

  // optional float tgtDist = 57;
  if (has_tgtdist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->tgtdist(), output);
  }

  // optional int32 ttlType = 59;
  if (has_ttltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->ttltype(), output);
  }

  // optional int32 ttl = 60;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->ttl(), output);
  }

  // optional int32 ttlExpireType = 61;
  if (has_ttlexpiretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->ttlexpiretype(), output);
  }

  // optional int32 ttlChangeId = 62;
  if (has_ttlchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->ttlchangeid(), output);
  }

  // optional int32 ttlChangeAmount = 63;
  if (has_ttlchangeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->ttlchangeamount(), output);
  }

  // optional bytes commonExpireTime = 64;
  if (has_commonexpiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      64, this->commonexpiretime(), output);
  }

  // optional int32 ownership = 65;
  if (has_ownership()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->ownership(), output);
  }

  // optional int32 renewalType = 66;
  if (has_renewaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->renewaltype(), output);
  }

  // optional int32 commonRenewalType = 67;
  if (has_commonrenewaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->commonrenewaltype(), output);
  }

  // optional int32 mallRenewal30Days = 68;
  if (has_mallrenewal30days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->mallrenewal30days(), output);
  }

  // optional int32 mallRenewalOwnership = 69;
  if (has_mallrenewalownership()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->mallrenewalownership(), output);
  }

  // optional int32 mallRenewalForever = 70;
  if (has_mallrenewalforever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->mallrenewalforever(), output);
  }

  // optional int32 noSell = 71;
  if (has_nosell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->nosell(), output);
  }

  // optional int32 noTrade = 72;
  if (has_notrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->notrade(), output);
  }

  // optional int32 noDrop = 73;
  if (has_nodrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->nodrop(), output);
  }

  // optional int32 noMail = 74;
  if (has_nomail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->nomail(), output);
  }

  // optional int32 noConsign = 75;
  if (has_noconsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->noconsign(), output);
  }

  // optional int32 coinConsign = 76;
  if (has_coinconsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->coinconsign(), output);
  }

  // optional int32 noBooth = 77;
  if (has_nobooth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->nobooth(), output);
  }

  // optional int32 noBoothBuy = 78;
  if (has_noboothbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->noboothbuy(), output);
  }

  // optional int32 noStorage = 79;
  if (has_nostorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->nostorage(), output);
  }

  // optional int32 noRepair = 80;
  if (has_norepair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->norepair(), output);
  }

  // optional int32 noLatch = 81;
  if (has_nolatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(81, this->nolatch(), output);
  }

  // optional int32 noReturn = 82;
  if (has_noreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->noreturn(), output);
  }

  // optional int32 rideItemType = 83;
  if (has_rideitemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(83, this->rideitemtype(), output);
  }

  // optional float spellTime = 84;
  if (has_spelltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(84, this->spelltime(), output);
  }

  // optional int32 accordingType = 85;
  if (has_accordingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->accordingtype(), output);
  }

  // optional int32 ctrl = 86;
  if (has_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(86, this->ctrl(), output);
  }

  // optional bytes navigatorName = 87;
  if (has_navigatorname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      87, this->navigatorname(), output);
  }

  // optional bytes navigatorTarget = 88;
  if (has_navigatortarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      88, this->navigatortarget(), output);
  }

  // optional bytes descTitle = 89;
  if (has_desctitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      89, this->desctitle(), output);
  }

  // optional bytes funcDesc = 90;
  if (has_funcdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      90, this->funcdesc(), output);
  }

  // optional bytes desc = 91;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      91, this->desc(), output);
  }

  // optional bytes historyDesc = 92;
  if (has_historydesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      92, this->historydesc(), output);
  }

  // optional int32 timestamp = 93;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(93, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Item_Data)
}

::google::protobuf::uint8* Item_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Item_Data)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 icon = 2;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icon(), target);
  }

  // optional int32 modelId = 3;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modelid(), target);
  }

  // optional float modelScale = 4;
  if (has_modelscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->modelscale(), target);
  }

  // optional int32 dropItemSound = 5;
  if (has_dropitemsound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dropitemsound(), target);
  }

  // optional int32 useItemSound = 6;
  if (has_useitemsound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->useitemsound(), target);
  }

  // optional int32 dragItemSound = 7;
  if (has_dragitemsound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dragitemsound(), target);
  }

  // optional int32 parentId = 8;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->parentid(), target);
  }

  // optional int32 isDisplayInDb = 9;
  if (has_isdisplayindb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isdisplayindb(), target);
  }

  // optional int32 quality = 10;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }

  // optional int32 type = 11;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->type(), target);
  }

  // optional int32 category = 12;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->category(), target);
  }

  // optional int32 subcategory = 13;
  if (has_subcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->subcategory(), target);
  }

  // optional int32 valuable = 14;
  if (has_valuable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->valuable(), target);
  }

  // optional int32 precious = 15;
  if (has_precious()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->precious(), target);
  }

  // optional int32 runeEquipExp = 16;
  if (has_runeequipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->runeequipexp(), target);
  }

  // optional float heightOffset = 17;
  if (has_heightoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->heightoffset(), target);
  }

  // optional int32 questItem = 18;
  if (has_questitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->questitem(), target);
  }

  // optional int32 cdgroup = 19;
  if (has_cdgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->cdgroup(), target);
  }

  // optional int32 cd = 20;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cd(), target);
  }

  // optional int32 bPrice = 21;
  if (has_bprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->bprice(), target);
  }

  // optional int32 bPriceType = 22;
  if (has_bpricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->bpricetype(), target);
  }

  // optional int32 sPrice = 23;
  if (has_sprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sprice(), target);
  }

  // optional int32 sPriceType = 24;
  if (has_spricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->spricetype(), target);
  }

  // optional int32 fPrice = 25;
  if (has_fprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->fprice(), target);
  }

  // optional int32 auctionPrice = 26;
  if (has_auctionprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->auctionprice(), target);
  }

  // optional int32 noBuyBack = 28;
  if (has_nobuyback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nobuyback(), target);
  }

  // optional int32 shopJingJieRequire = 30;
  if (has_shopjingjierequire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->shopjingjierequire(), target);
  }

  // optional int32 bindType = 31;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->bindtype(), target);
  }

  // optional int32 lvReq = 32;
  if (has_lvreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->lvreq(), target);
  }

  // optional int32 maxLvReq = 33;
  if (has_maxlvreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->maxlvreq(), target);
  }

  // optional int32 sexReq = 34;
  if (has_sexreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->sexreq(), target);
  }

  // optional int32 allowBodyType = 35;
  if (has_allowbodytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->allowbodytype(), target);
  }

  // optional int32 combatReq = 37;
  if (has_combatreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->combatreq(), target);
  }

  // optional int32 combatEquReq = 38;
  if (has_combatequreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->combatequreq(), target);
  }

  // optional int32 zaijuReq = 39;
  if (has_zaijureq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->zaijureq(), target);
  }

  // optional int32 conType1 = 42;
  if (has_contype1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->contype1(), target);
  }

  // optional int32 conId1 = 43;
  if (has_conid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->conid1(), target);
  }

  // optional int32 conOp1 = 44;
  if (has_conop1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->conop1(), target);
  }

  // optional int32 conParam1 = 45;
  if (has_conparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->conparam1(), target);
  }

  // optional int32 conType2 = 46;
  if (has_contype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->contype2(), target);
  }

  // optional int32 conId2 = 47;
  if (has_conid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->conid2(), target);
  }

  // optional int32 conOp2 = 48;
  if (has_conop2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->conop2(), target);
  }

  // optional int32 conParam2 = 49;
  if (has_conparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->conparam2(), target);
  }

  // optional int32 conType3 = 50;
  if (has_contype3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->contype3(), target);
  }

  // optional int32 conId3 = 51;
  if (has_conid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->conid3(), target);
  }

  // optional int32 conOp3 = 52;
  if (has_conop3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->conop3(), target);
  }

  // optional int32 conParam3 = 53;
  if (has_conparam3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->conparam3(), target);
  }

  // optional int32 mwrap = 54;
  if (has_mwrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->mwrap(), target);
  }

  // optional int32 holdMax = 55;
  if (has_holdmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->holdmax(), target);
  }

  // optional int32 tgtType = 56;
  if (has_tgttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->tgttype(), target);
  }

  // optional float tgtDist = 57;
  if (has_tgtdist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->tgtdist(), target);
  }

  // optional int32 ttlType = 59;
  if (has_ttltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->ttltype(), target);
  }

  // optional int32 ttl = 60;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->ttl(), target);
  }

  // optional int32 ttlExpireType = 61;
  if (has_ttlexpiretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->ttlexpiretype(), target);
  }

  // optional int32 ttlChangeId = 62;
  if (has_ttlchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->ttlchangeid(), target);
  }

  // optional int32 ttlChangeAmount = 63;
  if (has_ttlchangeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->ttlchangeamount(), target);
  }

  // optional bytes commonExpireTime = 64;
  if (has_commonexpiretime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        64, this->commonexpiretime(), target);
  }

  // optional int32 ownership = 65;
  if (has_ownership()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->ownership(), target);
  }

  // optional int32 renewalType = 66;
  if (has_renewaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->renewaltype(), target);
  }

  // optional int32 commonRenewalType = 67;
  if (has_commonrenewaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->commonrenewaltype(), target);
  }

  // optional int32 mallRenewal30Days = 68;
  if (has_mallrenewal30days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->mallrenewal30days(), target);
  }

  // optional int32 mallRenewalOwnership = 69;
  if (has_mallrenewalownership()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->mallrenewalownership(), target);
  }

  // optional int32 mallRenewalForever = 70;
  if (has_mallrenewalforever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->mallrenewalforever(), target);
  }

  // optional int32 noSell = 71;
  if (has_nosell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->nosell(), target);
  }

  // optional int32 noTrade = 72;
  if (has_notrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->notrade(), target);
  }

  // optional int32 noDrop = 73;
  if (has_nodrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->nodrop(), target);
  }

  // optional int32 noMail = 74;
  if (has_nomail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->nomail(), target);
  }

  // optional int32 noConsign = 75;
  if (has_noconsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->noconsign(), target);
  }

  // optional int32 coinConsign = 76;
  if (has_coinconsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->coinconsign(), target);
  }

  // optional int32 noBooth = 77;
  if (has_nobooth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->nobooth(), target);
  }

  // optional int32 noBoothBuy = 78;
  if (has_noboothbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->noboothbuy(), target);
  }

  // optional int32 noStorage = 79;
  if (has_nostorage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->nostorage(), target);
  }

  // optional int32 noRepair = 80;
  if (has_norepair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->norepair(), target);
  }

  // optional int32 noLatch = 81;
  if (has_nolatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(81, this->nolatch(), target);
  }

  // optional int32 noReturn = 82;
  if (has_noreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->noreturn(), target);
  }

  // optional int32 rideItemType = 83;
  if (has_rideitemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(83, this->rideitemtype(), target);
  }

  // optional float spellTime = 84;
  if (has_spelltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(84, this->spelltime(), target);
  }

  // optional int32 accordingType = 85;
  if (has_accordingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->accordingtype(), target);
  }

  // optional int32 ctrl = 86;
  if (has_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(86, this->ctrl(), target);
  }

  // optional bytes navigatorName = 87;
  if (has_navigatorname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        87, this->navigatorname(), target);
  }

  // optional bytes navigatorTarget = 88;
  if (has_navigatortarget()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        88, this->navigatortarget(), target);
  }

  // optional bytes descTitle = 89;
  if (has_desctitle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        89, this->desctitle(), target);
  }

  // optional bytes funcDesc = 90;
  if (has_funcdesc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        90, this->funcdesc(), target);
  }

  // optional bytes desc = 91;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        91, this->desc(), target);
  }

  // optional bytes historyDesc = 92;
  if (has_historydesc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        92, this->historydesc(), target);
  }

  // optional int32 timestamp = 93;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(93, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Item_Data)
  return target;
}

int Item_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional int32 modelId = 3;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // optional float modelScale = 4;
    if (has_modelscale()) {
      total_size += 1 + 4;
    }

    // optional int32 dropItemSound = 5;
    if (has_dropitemsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropitemsound());
    }

    // optional int32 useItemSound = 6;
    if (has_useitemsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useitemsound());
    }

    // optional int32 dragItemSound = 7;
    if (has_dragitemsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dragitemsound());
    }

    // optional int32 parentId = 8;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isDisplayInDb = 9;
    if (has_isdisplayindb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdisplayindb());
    }

    // optional int32 quality = 10;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 category = 12;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 subcategory = 13;
    if (has_subcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subcategory());
    }

    // optional int32 valuable = 14;
    if (has_valuable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuable());
    }

    // optional int32 precious = 15;
    if (has_precious()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precious());
    }

    // optional int32 runeEquipExp = 16;
    if (has_runeequipexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->runeequipexp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float heightOffset = 17;
    if (has_heightoffset()) {
      total_size += 2 + 4;
    }

    // optional int32 questItem = 18;
    if (has_questitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questitem());
    }

    // optional int32 cdgroup = 19;
    if (has_cdgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdgroup());
    }

    // optional int32 cd = 20;
    if (has_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional int32 bPrice = 21;
    if (has_bprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bprice());
    }

    // optional int32 bPriceType = 22;
    if (has_bpricetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpricetype());
    }

    // optional int32 sPrice = 23;
    if (has_sprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprice());
    }

    // optional int32 sPriceType = 24;
    if (has_spricetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spricetype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 fPrice = 25;
    if (has_fprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fprice());
    }

    // optional int32 auctionPrice = 26;
    if (has_auctionprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auctionprice());
    }

    // optional int32 noBuyBack = 28;
    if (has_nobuyback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nobuyback());
    }

    // optional int32 shopJingJieRequire = 30;
    if (has_shopjingjierequire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopjingjierequire());
    }

    // optional int32 bindType = 31;
    if (has_bindtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

    // optional int32 lvReq = 32;
    if (has_lvreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvreq());
    }

    // optional int32 maxLvReq = 33;
    if (has_maxlvreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlvreq());
    }

    // optional int32 sexReq = 34;
    if (has_sexreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sexreq());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 allowBodyType = 35;
    if (has_allowbodytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowbodytype());
    }

    // optional int32 combatReq = 37;
    if (has_combatreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatreq());
    }

    // optional int32 combatEquReq = 38;
    if (has_combatequreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatequreq());
    }

    // optional int32 zaijuReq = 39;
    if (has_zaijureq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zaijureq());
    }

    // optional int32 conType1 = 42;
    if (has_contype1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contype1());
    }

    // optional int32 conId1 = 43;
    if (has_conid1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conid1());
    }

    // optional int32 conOp1 = 44;
    if (has_conop1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conop1());
    }

    // optional int32 conParam1 = 45;
    if (has_conparam1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conparam1());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 conType2 = 46;
    if (has_contype2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contype2());
    }

    // optional int32 conId2 = 47;
    if (has_conid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conid2());
    }

    // optional int32 conOp2 = 48;
    if (has_conop2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conop2());
    }

    // optional int32 conParam2 = 49;
    if (has_conparam2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conparam2());
    }

    // optional int32 conType3 = 50;
    if (has_contype3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contype3());
    }

    // optional int32 conId3 = 51;
    if (has_conid3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conid3());
    }

    // optional int32 conOp3 = 52;
    if (has_conop3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conop3());
    }

    // optional int32 conParam3 = 53;
    if (has_conparam3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conparam3());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 mwrap = 54;
    if (has_mwrap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mwrap());
    }

    // optional int32 holdMax = 55;
    if (has_holdmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holdmax());
    }

    // optional int32 tgtType = 56;
    if (has_tgttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgttype());
    }

    // optional float tgtDist = 57;
    if (has_tgtdist()) {
      total_size += 2 + 4;
    }

    // optional int32 ttlType = 59;
    if (has_ttltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttltype());
    }

    // optional int32 ttl = 60;
    if (has_ttl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }

    // optional int32 ttlExpireType = 61;
    if (has_ttlexpiretype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttlexpiretype());
    }

    // optional int32 ttlChangeId = 62;
    if (has_ttlchangeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttlchangeid());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 ttlChangeAmount = 63;
    if (has_ttlchangeamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttlchangeamount());
    }

    // optional bytes commonExpireTime = 64;
    if (has_commonexpiretime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->commonexpiretime());
    }

    // optional int32 ownership = 65;
    if (has_ownership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownership());
    }

    // optional int32 renewalType = 66;
    if (has_renewaltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renewaltype());
    }

    // optional int32 commonRenewalType = 67;
    if (has_commonrenewaltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commonrenewaltype());
    }

    // optional int32 mallRenewal30Days = 68;
    if (has_mallrenewal30days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mallrenewal30days());
    }

    // optional int32 mallRenewalOwnership = 69;
    if (has_mallrenewalownership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mallrenewalownership());
    }

    // optional int32 mallRenewalForever = 70;
    if (has_mallrenewalforever()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mallrenewalforever());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 noSell = 71;
    if (has_nosell()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nosell());
    }

    // optional int32 noTrade = 72;
    if (has_notrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notrade());
    }

    // optional int32 noDrop = 73;
    if (has_nodrop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodrop());
    }

    // optional int32 noMail = 74;
    if (has_nomail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nomail());
    }

    // optional int32 noConsign = 75;
    if (has_noconsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noconsign());
    }

    // optional int32 coinConsign = 76;
    if (has_coinconsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coinconsign());
    }

    // optional int32 noBooth = 77;
    if (has_nobooth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nobooth());
    }

    // optional int32 noBoothBuy = 78;
    if (has_noboothbuy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noboothbuy());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 noStorage = 79;
    if (has_nostorage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nostorage());
    }

    // optional int32 noRepair = 80;
    if (has_norepair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->norepair());
    }

    // optional int32 noLatch = 81;
    if (has_nolatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nolatch());
    }

    // optional int32 noReturn = 82;
    if (has_noreturn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noreturn());
    }

    // optional int32 rideItemType = 83;
    if (has_rideitemtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rideitemtype());
    }

    // optional float spellTime = 84;
    if (has_spelltime()) {
      total_size += 2 + 4;
    }

    // optional int32 accordingType = 85;
    if (has_accordingtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accordingtype());
    }

    // optional int32 ctrl = 86;
    if (has_ctrl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional bytes navigatorName = 87;
    if (has_navigatorname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->navigatorname());
    }

    // optional bytes navigatorTarget = 88;
    if (has_navigatortarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->navigatortarget());
    }

    // optional bytes descTitle = 89;
    if (has_desctitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desctitle());
    }

    // optional bytes funcDesc = 90;
    if (has_funcdesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->funcdesc());
    }

    // optional bytes desc = 91;
    if (has_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional bytes historyDesc = 92;
    if (has_historydesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->historydesc());
    }

    // optional int32 timestamp = 93;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_Data::MergeFrom(const Item_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_modelscale()) {
      set_modelscale(from.modelscale());
    }
    if (from.has_dropitemsound()) {
      set_dropitemsound(from.dropitemsound());
    }
    if (from.has_useitemsound()) {
      set_useitemsound(from.useitemsound());
    }
    if (from.has_dragitemsound()) {
      set_dragitemsound(from.dragitemsound());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isdisplayindb()) {
      set_isdisplayindb(from.isdisplayindb());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_subcategory()) {
      set_subcategory(from.subcategory());
    }
    if (from.has_valuable()) {
      set_valuable(from.valuable());
    }
    if (from.has_precious()) {
      set_precious(from.precious());
    }
    if (from.has_runeequipexp()) {
      set_runeequipexp(from.runeequipexp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_heightoffset()) {
      set_heightoffset(from.heightoffset());
    }
    if (from.has_questitem()) {
      set_questitem(from.questitem());
    }
    if (from.has_cdgroup()) {
      set_cdgroup(from.cdgroup());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_bprice()) {
      set_bprice(from.bprice());
    }
    if (from.has_bpricetype()) {
      set_bpricetype(from.bpricetype());
    }
    if (from.has_sprice()) {
      set_sprice(from.sprice());
    }
    if (from.has_spricetype()) {
      set_spricetype(from.spricetype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fprice()) {
      set_fprice(from.fprice());
    }
    if (from.has_auctionprice()) {
      set_auctionprice(from.auctionprice());
    }
    if (from.has_nobuyback()) {
      set_nobuyback(from.nobuyback());
    }
    if (from.has_shopjingjierequire()) {
      set_shopjingjierequire(from.shopjingjierequire());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_lvreq()) {
      set_lvreq(from.lvreq());
    }
    if (from.has_maxlvreq()) {
      set_maxlvreq(from.maxlvreq());
    }
    if (from.has_sexreq()) {
      set_sexreq(from.sexreq());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_allowbodytype()) {
      set_allowbodytype(from.allowbodytype());
    }
    if (from.has_combatreq()) {
      set_combatreq(from.combatreq());
    }
    if (from.has_combatequreq()) {
      set_combatequreq(from.combatequreq());
    }
    if (from.has_zaijureq()) {
      set_zaijureq(from.zaijureq());
    }
    if (from.has_contype1()) {
      set_contype1(from.contype1());
    }
    if (from.has_conid1()) {
      set_conid1(from.conid1());
    }
    if (from.has_conop1()) {
      set_conop1(from.conop1());
    }
    if (from.has_conparam1()) {
      set_conparam1(from.conparam1());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_contype2()) {
      set_contype2(from.contype2());
    }
    if (from.has_conid2()) {
      set_conid2(from.conid2());
    }
    if (from.has_conop2()) {
      set_conop2(from.conop2());
    }
    if (from.has_conparam2()) {
      set_conparam2(from.conparam2());
    }
    if (from.has_contype3()) {
      set_contype3(from.contype3());
    }
    if (from.has_conid3()) {
      set_conid3(from.conid3());
    }
    if (from.has_conop3()) {
      set_conop3(from.conop3());
    }
    if (from.has_conparam3()) {
      set_conparam3(from.conparam3());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_mwrap()) {
      set_mwrap(from.mwrap());
    }
    if (from.has_holdmax()) {
      set_holdmax(from.holdmax());
    }
    if (from.has_tgttype()) {
      set_tgttype(from.tgttype());
    }
    if (from.has_tgtdist()) {
      set_tgtdist(from.tgtdist());
    }
    if (from.has_ttltype()) {
      set_ttltype(from.ttltype());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_ttlexpiretype()) {
      set_ttlexpiretype(from.ttlexpiretype());
    }
    if (from.has_ttlchangeid()) {
      set_ttlchangeid(from.ttlchangeid());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_ttlchangeamount()) {
      set_ttlchangeamount(from.ttlchangeamount());
    }
    if (from.has_commonexpiretime()) {
      set_commonexpiretime(from.commonexpiretime());
    }
    if (from.has_ownership()) {
      set_ownership(from.ownership());
    }
    if (from.has_renewaltype()) {
      set_renewaltype(from.renewaltype());
    }
    if (from.has_commonrenewaltype()) {
      set_commonrenewaltype(from.commonrenewaltype());
    }
    if (from.has_mallrenewal30days()) {
      set_mallrenewal30days(from.mallrenewal30days());
    }
    if (from.has_mallrenewalownership()) {
      set_mallrenewalownership(from.mallrenewalownership());
    }
    if (from.has_mallrenewalforever()) {
      set_mallrenewalforever(from.mallrenewalforever());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_nosell()) {
      set_nosell(from.nosell());
    }
    if (from.has_notrade()) {
      set_notrade(from.notrade());
    }
    if (from.has_nodrop()) {
      set_nodrop(from.nodrop());
    }
    if (from.has_nomail()) {
      set_nomail(from.nomail());
    }
    if (from.has_noconsign()) {
      set_noconsign(from.noconsign());
    }
    if (from.has_coinconsign()) {
      set_coinconsign(from.coinconsign());
    }
    if (from.has_nobooth()) {
      set_nobooth(from.nobooth());
    }
    if (from.has_noboothbuy()) {
      set_noboothbuy(from.noboothbuy());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_nostorage()) {
      set_nostorage(from.nostorage());
    }
    if (from.has_norepair()) {
      set_norepair(from.norepair());
    }
    if (from.has_nolatch()) {
      set_nolatch(from.nolatch());
    }
    if (from.has_noreturn()) {
      set_noreturn(from.noreturn());
    }
    if (from.has_rideitemtype()) {
      set_rideitemtype(from.rideitemtype());
    }
    if (from.has_spelltime()) {
      set_spelltime(from.spelltime());
    }
    if (from.has_accordingtype()) {
      set_accordingtype(from.accordingtype());
    }
    if (from.has_ctrl()) {
      set_ctrl(from.ctrl());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_navigatorname()) {
      set_navigatorname(from.navigatorname());
    }
    if (from.has_navigatortarget()) {
      set_navigatortarget(from.navigatortarget());
    }
    if (from.has_desctitle()) {
      set_desctitle(from.desctitle());
    }
    if (from.has_funcdesc()) {
      set_funcdesc(from.funcdesc());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_historydesc()) {
      set_historydesc(from.historydesc());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_Data::CopyFrom(const Item_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_Data::IsInitialized() const {

  return true;
}

void Item_Data::Swap(Item_Data* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(modelid_, other->modelid_);
    std::swap(modelscale_, other->modelscale_);
    std::swap(dropitemsound_, other->dropitemsound_);
    std::swap(useitemsound_, other->useitemsound_);
    std::swap(dragitemsound_, other->dragitemsound_);
    std::swap(parentid_, other->parentid_);
    std::swap(isdisplayindb_, other->isdisplayindb_);
    std::swap(quality_, other->quality_);
    std::swap(type_, other->type_);
    std::swap(category_, other->category_);
    std::swap(subcategory_, other->subcategory_);
    std::swap(valuable_, other->valuable_);
    std::swap(precious_, other->precious_);
    std::swap(runeequipexp_, other->runeequipexp_);
    std::swap(heightoffset_, other->heightoffset_);
    std::swap(questitem_, other->questitem_);
    std::swap(cdgroup_, other->cdgroup_);
    std::swap(cd_, other->cd_);
    std::swap(bprice_, other->bprice_);
    std::swap(bpricetype_, other->bpricetype_);
    std::swap(sprice_, other->sprice_);
    std::swap(spricetype_, other->spricetype_);
    std::swap(fprice_, other->fprice_);
    std::swap(auctionprice_, other->auctionprice_);
    std::swap(nobuyback_, other->nobuyback_);
    std::swap(shopjingjierequire_, other->shopjingjierequire_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(lvreq_, other->lvreq_);
    std::swap(maxlvreq_, other->maxlvreq_);
    std::swap(sexreq_, other->sexreq_);
    std::swap(allowbodytype_, other->allowbodytype_);
    std::swap(combatreq_, other->combatreq_);
    std::swap(combatequreq_, other->combatequreq_);
    std::swap(zaijureq_, other->zaijureq_);
    std::swap(contype1_, other->contype1_);
    std::swap(conid1_, other->conid1_);
    std::swap(conop1_, other->conop1_);
    std::swap(conparam1_, other->conparam1_);
    std::swap(contype2_, other->contype2_);
    std::swap(conid2_, other->conid2_);
    std::swap(conop2_, other->conop2_);
    std::swap(conparam2_, other->conparam2_);
    std::swap(contype3_, other->contype3_);
    std::swap(conid3_, other->conid3_);
    std::swap(conop3_, other->conop3_);
    std::swap(conparam3_, other->conparam3_);
    std::swap(mwrap_, other->mwrap_);
    std::swap(holdmax_, other->holdmax_);
    std::swap(tgttype_, other->tgttype_);
    std::swap(tgtdist_, other->tgtdist_);
    std::swap(ttltype_, other->ttltype_);
    std::swap(ttl_, other->ttl_);
    std::swap(ttlexpiretype_, other->ttlexpiretype_);
    std::swap(ttlchangeid_, other->ttlchangeid_);
    std::swap(ttlchangeamount_, other->ttlchangeamount_);
    std::swap(commonexpiretime_, other->commonexpiretime_);
    std::swap(ownership_, other->ownership_);
    std::swap(renewaltype_, other->renewaltype_);
    std::swap(commonrenewaltype_, other->commonrenewaltype_);
    std::swap(mallrenewal30days_, other->mallrenewal30days_);
    std::swap(mallrenewalownership_, other->mallrenewalownership_);
    std::swap(mallrenewalforever_, other->mallrenewalforever_);
    std::swap(nosell_, other->nosell_);
    std::swap(notrade_, other->notrade_);
    std::swap(nodrop_, other->nodrop_);
    std::swap(nomail_, other->nomail_);
    std::swap(noconsign_, other->noconsign_);
    std::swap(coinconsign_, other->coinconsign_);
    std::swap(nobooth_, other->nobooth_);
    std::swap(noboothbuy_, other->noboothbuy_);
    std::swap(nostorage_, other->nostorage_);
    std::swap(norepair_, other->norepair_);
    std::swap(nolatch_, other->nolatch_);
    std::swap(noreturn_, other->noreturn_);
    std::swap(rideitemtype_, other->rideitemtype_);
    std::swap(spelltime_, other->spelltime_);
    std::swap(accordingtype_, other->accordingtype_);
    std::swap(ctrl_, other->ctrl_);
    std::swap(navigatorname_, other->navigatorname_);
    std::swap(navigatortarget_, other->navigatortarget_);
    std::swap(desctitle_, other->desctitle_);
    std::swap(funcdesc_, other->funcdesc_);
    std::swap(desc_, other->desc_);
    std::swap(historydesc_, other->historydesc_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_Data_descriptor_;
  metadata.reflection = Item_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill_General_Data::kSpellActStateFieldNumber;
const int Skill_General_Data::kCastTypeFieldNumber;
const int Skill_General_Data::kSpellTimeFieldNumber;
const int Skill_General_Data::kSeAfterCalcFieldNumber;
const int Skill_General_Data::kTgtSelectStrategyFieldNumber;
const int Skill_General_Data::kMainEnhEffFieldNumber;
const int Skill_General_Data::kCheckMoveIdFieldNumber;
const int Skill_General_Data::kClientCalcNumFieldNumber;
const int Skill_General_Data::kShowIndicatorFieldNumber;
const int Skill_General_Data::kLvFieldNumber;
const int Skill_General_Data::kCreationsFieldNumber;
const int Skill_General_Data::kLearnLvFieldNumber;
const int Skill_General_Data::kGraph4FieldNumber;
const int Skill_General_Data::kCastBreakableFieldNumber;
const int Skill_General_Data::kSelfNoStatesFieldNumber;
const int Skill_General_Data::kSchoolFieldNumber;
const int Skill_General_Data::kFlySpeedFieldNumber;
const int Skill_General_Data::kNameFieldNumber;
const int Skill_General_Data::kCollideHeightFieldNumber;
const int Skill_General_Data::kSpellActAuraFieldNumber;
const int Skill_General_Data::kSkillTypeFieldNumber;
const int Skill_General_Data::kGuidevpNeedFieldNumber;
const int Skill_General_Data::kNotTurnTimeFieldNumber;
const int Skill_General_Data::kNoAtkTimeFieldNumber;
const int Skill_General_Data::kIsAoeFieldNumber;
const int Skill_General_Data::kAmmoNeedFieldNumber;
const int Skill_General_Data::kMovedelayFieldNumber;
const int Skill_General_Data::kPreAmmoTypeFieldNumber;
const int Skill_General_Data::kHideCastBarFieldNumber;
const int Skill_General_Data::kTgtSelfFieldNumber;
const int Skill_General_Data::kUiShapeFieldNumber;
const int Skill_General_Data::kIndicatorTimeFieldNumber;
const int Skill_General_Data::kNotMoveTimeFieldNumber;
const int Skill_General_Data::kSpellChargeFieldNumber;
const int Skill_General_Data::kSelfStatesFieldNumber;
const int Skill_General_Data::kPreSpellFieldNumber;
const int Skill_General_Data::kRangeMaxFieldNumber;
const int Skill_General_Data::kAutoUseSkillFieldNumber;
const int Skill_General_Data::kMoveSpeedFieldNumber;
const int Skill_General_Data::kTgtAllTypeFieldNumber;
const int Skill_General_Data::kRangeMinFieldNumber;
const int Skill_General_Data::kCircleShapeFieldNumber;
const int Skill_General_Data::kSpellMoveableFieldNumber;
const int Skill_General_Data::kWsAdd2FieldNumber;
const int Skill_General_Data::kWsAdd1FieldNumber;
const int Skill_General_Data::kRestoreDelayCdFieldNumber;
const int Skill_General_Data::kUseableInStubFieldNumber;
const int Skill_General_Data::kSelfHpMorePctFieldNumber;
const int Skill_General_Data::kNoTgtFieldNumber;
const int Skill_General_Data::kWsNeed1FieldNumber;
const int Skill_General_Data::kWsNeed2FieldNumber;
const int Skill_General_Data::kTgtSelfFriendTypeFieldNumber;
const int Skill_General_Data::kTgtFriendTypeFieldNumber;
const int Skill_General_Data::kMoveDelayNotAffectCalcFieldNumber;
const int Skill_General_Data::kCdFieldNumber;
const int Skill_General_Data::kFlyNoDelayFieldNumber;
const int Skill_General_Data::kDetailEff2FieldNumber;
const int Skill_General_Data::kCastDelayFieldNumber;
const int Skill_General_Data::kTgtSelfEnemyTypeFieldNumber;
const int Skill_General_Data::kSwitchStateFieldNumber;
const int Skill_General_Data::kDetailEff3FieldNumber;
const int Skill_General_Data::kCastTimeFieldNumber;
const int Skill_General_Data::kDetailEff1FieldNumber;
const int Skill_General_Data::kTgtSelectStateFieldNumber;
const int Skill_General_Data::kWsTypeFieldNumber;
const int Skill_General_Data::kDescribeFieldNumber;
const int Skill_General_Data::kAddWsEffFieldNumber;
const int Skill_General_Data::kLearnGoldFieldNumber;
const int Skill_General_Data::kConsumEquipNeedFieldNumber;
const int Skill_General_Data::kAurasFieldNumber;
const int Skill_General_Data::kMpNeedFieldNumber;
const int Skill_General_Data::kSpellBreakableFieldNumber;
const int Skill_General_Data::kMainEffFieldNumber;
const int Skill_General_Data::kNoArrowFieldNumber;
const int Skill_General_Data::kMoveidFieldNumber;
const int Skill_General_Data::kIdFieldNumber;
const int Skill_General_Data::kTgtPosFieldNumber;
const int Skill_General_Data::kGcdFieldNumber;
const int Skill_General_Data::kTgtNowPosFieldNumber;
const int Skill_General_Data::kGraph2FieldNumber;
const int Skill_General_Data::kGraph3FieldNumber;
const int Skill_General_Data::kGoOnZaijuNoFieldNumber;
const int Skill_General_Data::kGraph1FieldNumber;
const int Skill_General_Data::kDetailsFieldNumber;
const int Skill_General_Data::kCastIntervalFieldNumber;
const int Skill_General_Data::kSidFieldNumber;
const int Skill_General_Data::kSelfHpLessPctFieldNumber;
const int Skill_General_Data::kTgtEnemyTypeFieldNumber;
const int Skill_General_Data::kGuidempNeedFieldNumber;
const int Skill_General_Data::kFacePosFieldNumber;
const int Skill_General_Data::kVpNeedFieldNumber;
const int Skill_General_Data::kCastMoveTypeFieldNumber;
const int Skill_General_Data::kWpSkillTypeFieldNumber;
const int Skill_General_Data::kChargeStgsFieldNumber;
const int Skill_General_Data::kSeFieldNumber;
const int Skill_General_Data::kEffectsFieldNumber;
#endif  // !_MSC_VER

Skill_General_Data::Skill_General_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Skill_General_Data)
}

void Skill_General_Data::InitAsDefaultInstance() {
}

Skill_General_Data::Skill_General_Data(const Skill_General_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Skill_General_Data)
}

void Skill_General_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  spellactstate_ = 0;
  casttype_ = 0;
  spelltime_ = 0;
  seaftercalc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tgtselectstrategy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainenheff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checkmoveid_ = 0;
  clientcalcnum_ = 0;
  showindicator_ = 0;
  lv_ = 0;
  creations_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  learnlv_ = 0;
  graph4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  castbreakable_ = 0;
  selfnostates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_ = 0;
  flyspeed_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collideheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spellactaura_ = 0;
  skilltype_ = 0;
  guidevpneed_ = 0;
  notturntime_ = 0;
  noatktime_ = 0;
  isaoe_ = 0;
  ammoneed_ = 0;
  movedelay_ = 0;
  preammotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidecastbar_ = 0;
  tgtself_ = 0;
  uishape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indicatortime_ = 0;
  notmovetime_ = 0;
  spellcharge_ = 0;
  selfstates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prespell_ = 0;
  rangemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autouseskill_ = 0;
  movespeed_ = 0;
  tgtalltype_ = 0;
  rangemin_ = 0;
  circleshape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spellmoveable_ = 0;
  wsadd2_ = 0;
  wsadd1_ = 0;
  restoredelaycd_ = 0;
  useableinstub_ = 0;
  selfhpmorepct_ = 0;
  notgt_ = 0;
  wsneed1_ = 0;
  wsneed2_ = 0;
  tgtselffriendtype_ = 0;
  tgtfriendtype_ = 0;
  movedelaynotaffectcalc_ = 0;
  cd_ = 0;
  flynodelay_ = 0;
  detaileff2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  castdelay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tgtselfenemytype_ = 0;
  switchstate_ = 0;
  detaileff3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  casttime_ = 0;
  detaileff1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tgtselectstate_ = 0;
  wstype_ = 0;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addwseff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  learngold_ = 0;
  consumequipneed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auras_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mpneed_ = 0;
  spellbreakable_ = 0;
  maineff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noarrow_ = 0;
  moveid_ = 0;
  id_ = 0;
  tgtpos_ = 0;
  gcd_ = 0;
  tgtnowpos_ = 0;
  graph2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goonzaijuno_ = 0;
  graph1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  castinterval_ = 0;
  sid_ = 0;
  selfhplesspct_ = 0;
  tgtenemytype_ = 0;
  guidempneed_ = 0;
  facepos_ = 0;
  vpneed_ = 0;
  castmovetype_ = 0;
  wpskilltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chargestgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effects_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill_General_Data::~Skill_General_Data() {
  // @@protoc_insertion_point(destructor:data.Skill_General_Data)
  SharedDtor();
}

void Skill_General_Data::SharedDtor() {
  if (seaftercalc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seaftercalc_;
  }
  if (tgtselectstrategy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tgtselectstrategy_;
  }
  if (mainenheff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mainenheff_;
  }
  if (creations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creations_;
  }
  if (graph4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph4_;
  }
  if (selfnostates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfnostates_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (collideheight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collideheight_;
  }
  if (preammotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preammotype_;
  }
  if (uishape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uishape_;
  }
  if (selfstates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfstates_;
  }
  if (rangemax_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rangemax_;
  }
  if (circleshape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete circleshape_;
  }
  if (detaileff2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detaileff2_;
  }
  if (castdelay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete castdelay_;
  }
  if (detaileff3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detaileff3_;
  }
  if (detaileff1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detaileff1_;
  }
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (addwseff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addwseff_;
  }
  if (consumequipneed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete consumequipneed_;
  }
  if (auras_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auras_;
  }
  if (maineff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maineff_;
  }
  if (graph2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph2_;
  }
  if (graph3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph3_;
  }
  if (graph1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph1_;
  }
  if (details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete details_;
  }
  if (wpskilltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wpskilltype_;
  }
  if (chargestgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chargestgs_;
  }
  if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_;
  }
  if (effects_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effects_;
  }
  if (this != default_instance_) {
  }
}

void Skill_General_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill_General_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_General_Data_descriptor_;
}

const Skill_General_Data& Skill_General_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

Skill_General_Data* Skill_General_Data::default_instance_ = NULL;

Skill_General_Data* Skill_General_Data::New() const {
  return new Skill_General_Data;
}

void Skill_General_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Skill_General_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(spellactstate_, casttype_);
    ZR_(spelltime_, checkmoveid_);
    if (has_seaftercalc()) {
      if (seaftercalc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seaftercalc_->clear();
      }
    }
    if (has_tgtselectstrategy()) {
      if (tgtselectstrategy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tgtselectstrategy_->clear();
      }
    }
    if (has_mainenheff()) {
      if (mainenheff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mainenheff_->clear();
      }
    }
    clientcalcnum_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(lv_, learnlv_);
    ZR_(castbreakable_, school_);
    showindicator_ = 0;
    if (has_creations()) {
      if (creations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creations_->clear();
      }
    }
    if (has_graph4()) {
      if (graph4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graph4_->clear();
      }
    }
    if (has_selfnostates()) {
      if (selfnostates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        selfnostates_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(flyspeed_, spellactaura_);
    ZR_(skilltype_, noatktime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_collideheight()) {
      if (collideheight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        collideheight_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(isaoe_, ammoneed_);
    ZR_(movedelay_, hidecastbar_);
    ZR_(tgtself_, indicatortime_);
    if (has_preammotype()) {
      if (preammotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preammotype_->clear();
      }
    }
    if (has_uishape()) {
      if (uishape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uishape_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(notmovetime_, spellcharge_);
    ZR_(prespell_, tgtalltype_);
    if (has_selfstates()) {
      if (selfstates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        selfstates_->clear();
      }
    }
    if (has_rangemax()) {
      if (rangemax_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rangemax_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(rangemin_, selfhpmorepct_);
    if (has_circleshape()) {
      if (circleshape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        circleshape_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(notgt_, cd_);
    flynodelay_ = 0;
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    ZR_(switchstate_, casttime_);
    if (has_detaileff2()) {
      if (detaileff2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detaileff2_->clear();
      }
    }
    if (has_castdelay()) {
      if (castdelay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        castdelay_->clear();
      }
    }
    tgtselfenemytype_ = 0;
    if (has_detaileff3()) {
      if (detaileff3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detaileff3_->clear();
      }
    }
    if (has_detaileff1()) {
      if (detaileff1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detaileff1_->clear();
      }
    }
    tgtselectstate_ = 0;
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(learngold_, mpneed_);
    wstype_ = 0;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
    if (has_addwseff()) {
      if (addwseff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addwseff_->clear();
      }
    }
    if (has_consumequipneed()) {
      if (consumequipneed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        consumequipneed_->clear();
      }
    }
    if (has_auras()) {
      if (auras_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auras_->clear();
      }
    }
    spellbreakable_ = 0;
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(noarrow_, gcd_);
    if (has_maineff()) {
      if (maineff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        maineff_->clear();
      }
    }
    tgtnowpos_ = 0;
    if (has_graph2()) {
      if (graph2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graph2_->clear();
      }
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    ZR_(castinterval_, tgtenemytype_);
    if (has_graph3()) {
      if (graph3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graph3_->clear();
      }
    }
    goonzaijuno_ = 0;
    if (has_graph1()) {
      if (graph1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graph1_->clear();
      }
    }
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        details_->clear();
      }
    }
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    ZR_(guidempneed_, castmovetype_);
    if (has_wpskilltype()) {
      if (wpskilltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wpskilltype_->clear();
      }
    }
    if (has_chargestgs()) {
      if (chargestgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chargestgs_->clear();
      }
    }
    if (has_se()) {
      if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        se_->clear();
      }
    }
    if (has_effects()) {
      if (effects_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effects_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill_General_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Skill_General_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 spellActState = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellactstate_)));
          set_has_spellactstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_castType;
        break;
      }

      // optional int32 castType = 2;
      case 2: {
        if (tag == 16) {
         parse_castType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &casttype_)));
          set_has_casttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_spellTime;
        break;
      }

      // optional float spellTime = 3;
      case 3: {
        if (tag == 29) {
         parse_spellTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spelltime_)));
          set_has_spelltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_seAfterCalc;
        break;
      }

      // optional bytes seAfterCalc = 4;
      case 4: {
        if (tag == 34) {
         parse_seAfterCalc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seaftercalc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tgtSelectStrategy;
        break;
      }

      // optional bytes tgtSelectStrategy = 5;
      case 5: {
        if (tag == 42) {
         parse_tgtSelectStrategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tgtselectstrategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mainEnhEff;
        break;
      }

      // optional bytes mainEnhEff = 6;
      case 6: {
        if (tag == 50) {
         parse_mainEnhEff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mainenheff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_checkMoveId;
        break;
      }

      // optional int32 checkMoveId = 7;
      case 7: {
        if (tag == 56) {
         parse_checkMoveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkmoveid_)));
          set_has_checkmoveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_clientCalcNum;
        break;
      }

      // optional int32 clientCalcNum = 8;
      case 8: {
        if (tag == 64) {
         parse_clientCalcNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientcalcnum_)));
          set_has_clientcalcnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_showIndicator;
        break;
      }

      // optional int32 showIndicator = 9;
      case 9: {
        if (tag == 72) {
         parse_showIndicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showindicator_)));
          set_has_showindicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lv;
        break;
      }

      // optional int32 lv = 10;
      case 10: {
        if (tag == 80) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_creations;
        break;
      }

      // optional bytes creations = 11;
      case 11: {
        if (tag == 90) {
         parse_creations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_creations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_learnLv;
        break;
      }

      // optional int32 learnLv = 12;
      case 12: {
        if (tag == 96) {
         parse_learnLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learnlv_)));
          set_has_learnlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_graph4;
        break;
      }

      // optional bytes graph4 = 13;
      case 13: {
        if (tag == 106) {
         parse_graph4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graph4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_castBreakable;
        break;
      }

      // optional int32 castBreakable = 14;
      case 14: {
        if (tag == 112) {
         parse_castBreakable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &castbreakable_)));
          set_has_castbreakable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_selfNoStates;
        break;
      }

      // optional bytes selfNoStates = 15;
      case 15: {
        if (tag == 122) {
         parse_selfNoStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfnostates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_school;
        break;
      }

      // optional int32 school = 16;
      case 16: {
        if (tag == 128) {
         parse_school:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &school_)));
          set_has_school();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_flySpeed;
        break;
      }

      // optional float flySpeed = 17;
      case 17: {
        if (tag == 141) {
         parse_flySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flyspeed_)));
          set_has_flyspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_name;
        break;
      }

      // optional bytes name = 18;
      case 18: {
        if (tag == 146) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_collideHeight;
        break;
      }

      // optional bytes collideHeight = 19;
      case 19: {
        if (tag == 154) {
         parse_collideHeight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collideheight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_spellActAura;
        break;
      }

      // optional int32 spellActAura = 20;
      case 20: {
        if (tag == 160) {
         parse_spellActAura:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellactaura_)));
          set_has_spellactaura();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_skillType;
        break;
      }

      // optional int32 skillType = 21;
      case 21: {
        if (tag == 168) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));
          set_has_skilltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_guidevpNeed;
        break;
      }

      // optional int32 guidevpNeed = 22;
      case 22: {
        if (tag == 176) {
         parse_guidevpNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guidevpneed_)));
          set_has_guidevpneed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_notTurnTime;
        break;
      }

      // optional float notTurnTime = 23;
      case 23: {
        if (tag == 189) {
         parse_notTurnTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &notturntime_)));
          set_has_notturntime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_noAtkTime;
        break;
      }

      // optional float noAtkTime = 24;
      case 24: {
        if (tag == 197) {
         parse_noAtkTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noatktime_)));
          set_has_noatktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_isAoe;
        break;
      }

      // optional int32 isAoe = 25;
      case 25: {
        if (tag == 200) {
         parse_isAoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaoe_)));
          set_has_isaoe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_ammoNeed;
        break;
      }

      // optional int32 ammoNeed = 26;
      case 26: {
        if (tag == 208) {
         parse_ammoNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammoneed_)));
          set_has_ammoneed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_movedelay;
        break;
      }

      // optional float movedelay = 27;
      case 27: {
        if (tag == 221) {
         parse_movedelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movedelay_)));
          set_has_movedelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_preAmmoType;
        break;
      }

      // optional bytes preAmmoType = 28;
      case 28: {
        if (tag == 226) {
         parse_preAmmoType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preammotype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_hideCastBar;
        break;
      }

      // optional int32 hideCastBar = 29;
      case 29: {
        if (tag == 232) {
         parse_hideCastBar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hidecastbar_)));
          set_has_hidecastbar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_tgtSelf;
        break;
      }

      // optional int32 tgtSelf = 30;
      case 30: {
        if (tag == 240) {
         parse_tgtSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtself_)));
          set_has_tgtself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_uiShape;
        break;
      }

      // optional bytes uiShape = 31;
      case 31: {
        if (tag == 250) {
         parse_uiShape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uishape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_indicatorTime;
        break;
      }

      // optional float indicatorTime = 32;
      case 32: {
        if (tag == 261) {
         parse_indicatorTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &indicatortime_)));
          set_has_indicatortime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_notMoveTime;
        break;
      }

      // optional float notMoveTime = 33;
      case 33: {
        if (tag == 269) {
         parse_notMoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &notmovetime_)));
          set_has_notmovetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_spellCharge;
        break;
      }

      // optional int32 spellCharge = 34;
      case 34: {
        if (tag == 272) {
         parse_spellCharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellcharge_)));
          set_has_spellcharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_selfStates;
        break;
      }

      // optional bytes selfStates = 35;
      case 35: {
        if (tag == 282) {
         parse_selfStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfstates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_preSpell;
        break;
      }

      // optional int32 preSpell = 36;
      case 36: {
        if (tag == 288) {
         parse_preSpell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prespell_)));
          set_has_prespell();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_rangeMax;
        break;
      }

      // optional bytes rangeMax = 37;
      case 37: {
        if (tag == 298) {
         parse_rangeMax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rangemax()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_autoUseSkill;
        break;
      }

      // optional int32 autoUseSkill = 38;
      case 38: {
        if (tag == 304) {
         parse_autoUseSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autouseskill_)));
          set_has_autouseskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_moveSpeed;
        break;
      }

      // optional float moveSpeed = 39;
      case 39: {
        if (tag == 317) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_tgtAllType;
        break;
      }

      // optional int32 tgtAllType = 40;
      case 40: {
        if (tag == 320) {
         parse_tgtAllType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtalltype_)));
          set_has_tgtalltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_rangeMin;
        break;
      }

      // optional int32 rangeMin = 41;
      case 41: {
        if (tag == 328) {
         parse_rangeMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangemin_)));
          set_has_rangemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_circleShape;
        break;
      }

      // optional bytes circleShape = 42;
      case 42: {
        if (tag == 338) {
         parse_circleShape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_circleshape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_spellMoveable;
        break;
      }

      // optional int32 spellMoveable = 43;
      case 43: {
        if (tag == 344) {
         parse_spellMoveable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellmoveable_)));
          set_has_spellmoveable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_wsAdd2;
        break;
      }

      // optional float wsAdd2 = 44;
      case 44: {
        if (tag == 357) {
         parse_wsAdd2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wsadd2_)));
          set_has_wsadd2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_wsAdd1;
        break;
      }

      // optional int32 wsAdd1 = 45;
      case 45: {
        if (tag == 360) {
         parse_wsAdd1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsadd1_)));
          set_has_wsadd1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_restoreDelayCd;
        break;
      }

      // optional int32 restoreDelayCd = 46;
      case 46: {
        if (tag == 368) {
         parse_restoreDelayCd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restoredelaycd_)));
          set_has_restoredelaycd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_useableInStub;
        break;
      }

      // optional int32 useableInStub = 47;
      case 47: {
        if (tag == 376) {
         parse_useableInStub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useableinstub_)));
          set_has_useableinstub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_selfHpMorePct;
        break;
      }

      // optional int32 selfHpMorePct = 48;
      case 48: {
        if (tag == 384) {
         parse_selfHpMorePct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfhpmorepct_)));
          set_has_selfhpmorepct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_noTgt;
        break;
      }

      // optional int32 noTgt = 49;
      case 49: {
        if (tag == 392) {
         parse_noTgt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notgt_)));
          set_has_notgt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_wsNeed1;
        break;
      }

      // optional int32 wsNeed1 = 50;
      case 50: {
        if (tag == 400) {
         parse_wsNeed1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsneed1_)));
          set_has_wsneed1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_wsNeed2;
        break;
      }

      // optional int32 wsNeed2 = 51;
      case 51: {
        if (tag == 408) {
         parse_wsNeed2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsneed2_)));
          set_has_wsneed2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_tgtSelfFriendType;
        break;
      }

      // optional int32 tgtSelfFriendType = 52;
      case 52: {
        if (tag == 416) {
         parse_tgtSelfFriendType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtselffriendtype_)));
          set_has_tgtselffriendtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_tgtFriendType;
        break;
      }

      // optional int32 tgtFriendType = 53;
      case 53: {
        if (tag == 424) {
         parse_tgtFriendType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtfriendtype_)));
          set_has_tgtfriendtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_moveDelayNotAffectCalc;
        break;
      }

      // optional int32 moveDelayNotAffectCalc = 54;
      case 54: {
        if (tag == 432) {
         parse_moveDelayNotAffectCalc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movedelaynotaffectcalc_)));
          set_has_movedelaynotaffectcalc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(445)) goto parse_cd;
        break;
      }

      // optional float cd = 55;
      case 55: {
        if (tag == 445) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_flyNoDelay;
        break;
      }

      // optional int32 flyNoDelay = 56;
      case 56: {
        if (tag == 448) {
         parse_flyNoDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flynodelay_)));
          set_has_flynodelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_detailEff2;
        break;
      }

      // optional bytes detailEff2 = 57;
      case 57: {
        if (tag == 458) {
         parse_detailEff2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detaileff2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_castDelay;
        break;
      }

      // optional bytes castDelay = 58;
      case 58: {
        if (tag == 466) {
         parse_castDelay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_castdelay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_tgtSelfEnemyType;
        break;
      }

      // optional int32 tgtSelfEnemyType = 59;
      case 59: {
        if (tag == 472) {
         parse_tgtSelfEnemyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtselfenemytype_)));
          set_has_tgtselfenemytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_switchState;
        break;
      }

      // optional int32 switchState = 60;
      case 60: {
        if (tag == 480) {
         parse_switchState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchstate_)));
          set_has_switchstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_detailEff3;
        break;
      }

      // optional bytes detailEff3 = 61;
      case 61: {
        if (tag == 490) {
         parse_detailEff3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detaileff3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(501)) goto parse_castTime;
        break;
      }

      // optional float castTime = 62;
      case 62: {
        if (tag == 501) {
         parse_castTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &casttime_)));
          set_has_casttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_detailEff1;
        break;
      }

      // optional bytes detailEff1 = 63;
      case 63: {
        if (tag == 506) {
         parse_detailEff1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detaileff1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_tgtSelectState;
        break;
      }

      // optional int32 tgtSelectState = 64;
      case 64: {
        if (tag == 512) {
         parse_tgtSelectState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtselectstate_)));
          set_has_tgtselectstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_wsType;
        break;
      }

      // optional int32 wsType = 65;
      case 65: {
        if (tag == 520) {
         parse_wsType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wstype_)));
          set_has_wstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_describe;
        break;
      }

      // optional bytes describe = 66;
      case 66: {
        if (tag == 530) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_describe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_addWsEff;
        break;
      }

      // optional bytes addWsEff = 67;
      case 67: {
        if (tag == 538) {
         parse_addWsEff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addwseff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_learnGold;
        break;
      }

      // optional int32 learnGold = 68;
      case 68: {
        if (tag == 544) {
         parse_learnGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learngold_)));
          set_has_learngold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_consumEquipNeed;
        break;
      }

      // optional bytes consumEquipNeed = 69;
      case 69: {
        if (tag == 554) {
         parse_consumEquipNeed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_consumequipneed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_auras;
        break;
      }

      // optional bytes auras = 70;
      case 70: {
        if (tag == 562) {
         parse_auras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auras()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_mpNeed;
        break;
      }

      // optional int32 mpNeed = 71;
      case 71: {
        if (tag == 568) {
         parse_mpNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpneed_)));
          set_has_mpneed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_spellBreakable;
        break;
      }

      // optional int32 spellBreakable = 72;
      case 72: {
        if (tag == 576) {
         parse_spellBreakable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellbreakable_)));
          set_has_spellbreakable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_mainEff;
        break;
      }

      // optional bytes mainEff = 73;
      case 73: {
        if (tag == 586) {
         parse_mainEff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_maineff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_noArrow;
        break;
      }

      // optional int32 noArrow = 74;
      case 74: {
        if (tag == 592) {
         parse_noArrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noarrow_)));
          set_has_noarrow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_moveid;
        break;
      }

      // optional int32 moveid = 75;
      case 75: {
        if (tag == 600) {
         parse_moveid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveid_)));
          set_has_moveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_id;
        break;
      }

      // optional int32 id = 76;
      case 76: {
        if (tag == 608) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_tgtPos;
        break;
      }

      // optional int32 tgtPos = 77;
      case 77: {
        if (tag == 616) {
         parse_tgtPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtpos_)));
          set_has_tgtpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(629)) goto parse_gcd;
        break;
      }

      // optional float gcd = 78;
      case 78: {
        if (tag == 629) {
         parse_gcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gcd_)));
          set_has_gcd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_tgtNowPos;
        break;
      }

      // optional int32 tgtNowPos = 79;
      case 79: {
        if (tag == 632) {
         parse_tgtNowPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtnowpos_)));
          set_has_tgtnowpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_graph2;
        break;
      }

      // optional bytes graph2 = 80;
      case 80: {
        if (tag == 642) {
         parse_graph2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graph2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_graph3;
        break;
      }

      // optional bytes graph3 = 81;
      case 81: {
        if (tag == 650) {
         parse_graph3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graph3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_goOnZaijuNo;
        break;
      }

      // optional int32 goOnZaijuNo = 82;
      case 82: {
        if (tag == 656) {
         parse_goOnZaijuNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goonzaijuno_)));
          set_has_goonzaijuno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_graph1;
        break;
      }

      // optional bytes graph1 = 83;
      case 83: {
        if (tag == 666) {
         parse_graph1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graph1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(674)) goto parse_details;
        break;
      }

      // optional bytes details = 84;
      case 84: {
        if (tag == 674) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(685)) goto parse_castInterval;
        break;
      }

      // optional float castInterval = 85;
      case 85: {
        if (tag == 685) {
         parse_castInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &castinterval_)));
          set_has_castinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_sid;
        break;
      }

      // optional int32 sid = 86;
      case 86: {
        if (tag == 688) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_selfHpLessPct;
        break;
      }

      // optional int32 selfHpLessPct = 87;
      case 87: {
        if (tag == 696) {
         parse_selfHpLessPct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfhplesspct_)));
          set_has_selfhplesspct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(704)) goto parse_tgtEnemyType;
        break;
      }

      // optional int32 tgtEnemyType = 88;
      case 88: {
        if (tag == 704) {
         parse_tgtEnemyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgtenemytype_)));
          set_has_tgtenemytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(712)) goto parse_guidempNeed;
        break;
      }

      // optional int32 guidempNeed = 89;
      case 89: {
        if (tag == 712) {
         parse_guidempNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guidempneed_)));
          set_has_guidempneed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_facePos;
        break;
      }

      // optional int32 facePos = 90;
      case 90: {
        if (tag == 720) {
         parse_facePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facepos_)));
          set_has_facepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(728)) goto parse_vpNeed;
        break;
      }

      // optional int32 vpNeed = 91;
      case 91: {
        if (tag == 728) {
         parse_vpNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vpneed_)));
          set_has_vpneed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_castMoveType;
        break;
      }

      // optional int32 castMoveType = 92;
      case 92: {
        if (tag == 736) {
         parse_castMoveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &castmovetype_)));
          set_has_castmovetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_wpSkillType;
        break;
      }

      // optional bytes wpSkillType = 93;
      case 93: {
        if (tag == 746) {
         parse_wpSkillType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wpskilltype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(754)) goto parse_chargeStgs;
        break;
      }

      // optional bytes chargeStgs = 94;
      case 94: {
        if (tag == 754) {
         parse_chargeStgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chargestgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(762)) goto parse_se;
        break;
      }

      // optional bytes se = 95;
      case 95: {
        if (tag == 762) {
         parse_se:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(770)) goto parse_effects;
        break;
      }

      // optional bytes effects = 96;
      case 96: {
        if (tag == 770) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_effects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Skill_General_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Skill_General_Data)
  return false;
#undef DO_
}

void Skill_General_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Skill_General_Data)
  // optional int32 spellActState = 1;
  if (has_spellactstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->spellactstate(), output);
  }

  // optional int32 castType = 2;
  if (has_casttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->casttype(), output);
  }

  // optional float spellTime = 3;
  if (has_spelltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->spelltime(), output);
  }

  // optional bytes seAfterCalc = 4;
  if (has_seaftercalc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->seaftercalc(), output);
  }

  // optional bytes tgtSelectStrategy = 5;
  if (has_tgtselectstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->tgtselectstrategy(), output);
  }

  // optional bytes mainEnhEff = 6;
  if (has_mainenheff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->mainenheff(), output);
  }

  // optional int32 checkMoveId = 7;
  if (has_checkmoveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->checkmoveid(), output);
  }

  // optional int32 clientCalcNum = 8;
  if (has_clientcalcnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->clientcalcnum(), output);
  }

  // optional int32 showIndicator = 9;
  if (has_showindicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->showindicator(), output);
  }

  // optional int32 lv = 10;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lv(), output);
  }

  // optional bytes creations = 11;
  if (has_creations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->creations(), output);
  }

  // optional int32 learnLv = 12;
  if (has_learnlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->learnlv(), output);
  }

  // optional bytes graph4 = 13;
  if (has_graph4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->graph4(), output);
  }

  // optional int32 castBreakable = 14;
  if (has_castbreakable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->castbreakable(), output);
  }

  // optional bytes selfNoStates = 15;
  if (has_selfnostates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->selfnostates(), output);
  }

  // optional int32 school = 16;
  if (has_school()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->school(), output);
  }

  // optional float flySpeed = 17;
  if (has_flyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->flyspeed(), output);
  }

  // optional bytes name = 18;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->name(), output);
  }

  // optional bytes collideHeight = 19;
  if (has_collideheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->collideheight(), output);
  }

  // optional int32 spellActAura = 20;
  if (has_spellactaura()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->spellactaura(), output);
  }

  // optional int32 skillType = 21;
  if (has_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->skilltype(), output);
  }

  // optional int32 guidevpNeed = 22;
  if (has_guidevpneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->guidevpneed(), output);
  }

  // optional float notTurnTime = 23;
  if (has_notturntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->notturntime(), output);
  }

  // optional float noAtkTime = 24;
  if (has_noatktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->noatktime(), output);
  }

  // optional int32 isAoe = 25;
  if (has_isaoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->isaoe(), output);
  }

  // optional int32 ammoNeed = 26;
  if (has_ammoneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ammoneed(), output);
  }

  // optional float movedelay = 27;
  if (has_movedelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->movedelay(), output);
  }

  // optional bytes preAmmoType = 28;
  if (has_preammotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->preammotype(), output);
  }

  // optional int32 hideCastBar = 29;
  if (has_hidecastbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->hidecastbar(), output);
  }

  // optional int32 tgtSelf = 30;
  if (has_tgtself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->tgtself(), output);
  }

  // optional bytes uiShape = 31;
  if (has_uishape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      31, this->uishape(), output);
  }

  // optional float indicatorTime = 32;
  if (has_indicatortime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->indicatortime(), output);
  }

  // optional float notMoveTime = 33;
  if (has_notmovetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->notmovetime(), output);
  }

  // optional int32 spellCharge = 34;
  if (has_spellcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->spellcharge(), output);
  }

  // optional bytes selfStates = 35;
  if (has_selfstates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      35, this->selfstates(), output);
  }

  // optional int32 preSpell = 36;
  if (has_prespell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->prespell(), output);
  }

  // optional bytes rangeMax = 37;
  if (has_rangemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      37, this->rangemax(), output);
  }

  // optional int32 autoUseSkill = 38;
  if (has_autouseskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->autouseskill(), output);
  }

  // optional float moveSpeed = 39;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->movespeed(), output);
  }

  // optional int32 tgtAllType = 40;
  if (has_tgtalltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tgtalltype(), output);
  }

  // optional int32 rangeMin = 41;
  if (has_rangemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->rangemin(), output);
  }

  // optional bytes circleShape = 42;
  if (has_circleshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      42, this->circleshape(), output);
  }

  // optional int32 spellMoveable = 43;
  if (has_spellmoveable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->spellmoveable(), output);
  }

  // optional float wsAdd2 = 44;
  if (has_wsadd2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->wsadd2(), output);
  }

  // optional int32 wsAdd1 = 45;
  if (has_wsadd1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->wsadd1(), output);
  }

  // optional int32 restoreDelayCd = 46;
  if (has_restoredelaycd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->restoredelaycd(), output);
  }

  // optional int32 useableInStub = 47;
  if (has_useableinstub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->useableinstub(), output);
  }

  // optional int32 selfHpMorePct = 48;
  if (has_selfhpmorepct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->selfhpmorepct(), output);
  }

  // optional int32 noTgt = 49;
  if (has_notgt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->notgt(), output);
  }

  // optional int32 wsNeed1 = 50;
  if (has_wsneed1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->wsneed1(), output);
  }

  // optional int32 wsNeed2 = 51;
  if (has_wsneed2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->wsneed2(), output);
  }

  // optional int32 tgtSelfFriendType = 52;
  if (has_tgtselffriendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->tgtselffriendtype(), output);
  }

  // optional int32 tgtFriendType = 53;
  if (has_tgtfriendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->tgtfriendtype(), output);
  }

  // optional int32 moveDelayNotAffectCalc = 54;
  if (has_movedelaynotaffectcalc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->movedelaynotaffectcalc(), output);
  }

  // optional float cd = 55;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->cd(), output);
  }

  // optional int32 flyNoDelay = 56;
  if (has_flynodelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->flynodelay(), output);
  }

  // optional bytes detailEff2 = 57;
  if (has_detaileff2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      57, this->detaileff2(), output);
  }

  // optional bytes castDelay = 58;
  if (has_castdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      58, this->castdelay(), output);
  }

  // optional int32 tgtSelfEnemyType = 59;
  if (has_tgtselfenemytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->tgtselfenemytype(), output);
  }

  // optional int32 switchState = 60;
  if (has_switchstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->switchstate(), output);
  }

  // optional bytes detailEff3 = 61;
  if (has_detaileff3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      61, this->detaileff3(), output);
  }

  // optional float castTime = 62;
  if (has_casttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->casttime(), output);
  }

  // optional bytes detailEff1 = 63;
  if (has_detaileff1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      63, this->detaileff1(), output);
  }

  // optional int32 tgtSelectState = 64;
  if (has_tgtselectstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->tgtselectstate(), output);
  }

  // optional int32 wsType = 65;
  if (has_wstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->wstype(), output);
  }

  // optional bytes describe = 66;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      66, this->describe(), output);
  }

  // optional bytes addWsEff = 67;
  if (has_addwseff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      67, this->addwseff(), output);
  }

  // optional int32 learnGold = 68;
  if (has_learngold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->learngold(), output);
  }

  // optional bytes consumEquipNeed = 69;
  if (has_consumequipneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      69, this->consumequipneed(), output);
  }

  // optional bytes auras = 70;
  if (has_auras()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      70, this->auras(), output);
  }

  // optional int32 mpNeed = 71;
  if (has_mpneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->mpneed(), output);
  }

  // optional int32 spellBreakable = 72;
  if (has_spellbreakable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->spellbreakable(), output);
  }

  // optional bytes mainEff = 73;
  if (has_maineff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      73, this->maineff(), output);
  }

  // optional int32 noArrow = 74;
  if (has_noarrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->noarrow(), output);
  }

  // optional int32 moveid = 75;
  if (has_moveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->moveid(), output);
  }

  // optional int32 id = 76;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->id(), output);
  }

  // optional int32 tgtPos = 77;
  if (has_tgtpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->tgtpos(), output);
  }

  // optional float gcd = 78;
  if (has_gcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->gcd(), output);
  }

  // optional int32 tgtNowPos = 79;
  if (has_tgtnowpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->tgtnowpos(), output);
  }

  // optional bytes graph2 = 80;
  if (has_graph2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      80, this->graph2(), output);
  }

  // optional bytes graph3 = 81;
  if (has_graph3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      81, this->graph3(), output);
  }

  // optional int32 goOnZaijuNo = 82;
  if (has_goonzaijuno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->goonzaijuno(), output);
  }

  // optional bytes graph1 = 83;
  if (has_graph1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      83, this->graph1(), output);
  }

  // optional bytes details = 84;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      84, this->details(), output);
  }

  // optional float castInterval = 85;
  if (has_castinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(85, this->castinterval(), output);
  }

  // optional int32 sid = 86;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(86, this->sid(), output);
  }

  // optional int32 selfHpLessPct = 87;
  if (has_selfhplesspct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->selfhplesspct(), output);
  }

  // optional int32 tgtEnemyType = 88;
  if (has_tgtenemytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(88, this->tgtenemytype(), output);
  }

  // optional int32 guidempNeed = 89;
  if (has_guidempneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(89, this->guidempneed(), output);
  }

  // optional int32 facePos = 90;
  if (has_facepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->facepos(), output);
  }

  // optional int32 vpNeed = 91;
  if (has_vpneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->vpneed(), output);
  }

  // optional int32 castMoveType = 92;
  if (has_castmovetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->castmovetype(), output);
  }

  // optional bytes wpSkillType = 93;
  if (has_wpskilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      93, this->wpskilltype(), output);
  }

  // optional bytes chargeStgs = 94;
  if (has_chargestgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      94, this->chargestgs(), output);
  }

  // optional bytes se = 95;
  if (has_se()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      95, this->se(), output);
  }

  // optional bytes effects = 96;
  if (has_effects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      96, this->effects(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Skill_General_Data)
}

::google::protobuf::uint8* Skill_General_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Skill_General_Data)
  // optional int32 spellActState = 1;
  if (has_spellactstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->spellactstate(), target);
  }

  // optional int32 castType = 2;
  if (has_casttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->casttype(), target);
  }

  // optional float spellTime = 3;
  if (has_spelltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->spelltime(), target);
  }

  // optional bytes seAfterCalc = 4;
  if (has_seaftercalc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->seaftercalc(), target);
  }

  // optional bytes tgtSelectStrategy = 5;
  if (has_tgtselectstrategy()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->tgtselectstrategy(), target);
  }

  // optional bytes mainEnhEff = 6;
  if (has_mainenheff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->mainenheff(), target);
  }

  // optional int32 checkMoveId = 7;
  if (has_checkmoveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->checkmoveid(), target);
  }

  // optional int32 clientCalcNum = 8;
  if (has_clientcalcnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->clientcalcnum(), target);
  }

  // optional int32 showIndicator = 9;
  if (has_showindicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->showindicator(), target);
  }

  // optional int32 lv = 10;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lv(), target);
  }

  // optional bytes creations = 11;
  if (has_creations()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->creations(), target);
  }

  // optional int32 learnLv = 12;
  if (has_learnlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->learnlv(), target);
  }

  // optional bytes graph4 = 13;
  if (has_graph4()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->graph4(), target);
  }

  // optional int32 castBreakable = 14;
  if (has_castbreakable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->castbreakable(), target);
  }

  // optional bytes selfNoStates = 15;
  if (has_selfnostates()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->selfnostates(), target);
  }

  // optional int32 school = 16;
  if (has_school()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->school(), target);
  }

  // optional float flySpeed = 17;
  if (has_flyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->flyspeed(), target);
  }

  // optional bytes name = 18;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->name(), target);
  }

  // optional bytes collideHeight = 19;
  if (has_collideheight()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->collideheight(), target);
  }

  // optional int32 spellActAura = 20;
  if (has_spellactaura()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->spellactaura(), target);
  }

  // optional int32 skillType = 21;
  if (has_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->skilltype(), target);
  }

  // optional int32 guidevpNeed = 22;
  if (has_guidevpneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->guidevpneed(), target);
  }

  // optional float notTurnTime = 23;
  if (has_notturntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->notturntime(), target);
  }

  // optional float noAtkTime = 24;
  if (has_noatktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->noatktime(), target);
  }

  // optional int32 isAoe = 25;
  if (has_isaoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->isaoe(), target);
  }

  // optional int32 ammoNeed = 26;
  if (has_ammoneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ammoneed(), target);
  }

  // optional float movedelay = 27;
  if (has_movedelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->movedelay(), target);
  }

  // optional bytes preAmmoType = 28;
  if (has_preammotype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->preammotype(), target);
  }

  // optional int32 hideCastBar = 29;
  if (has_hidecastbar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->hidecastbar(), target);
  }

  // optional int32 tgtSelf = 30;
  if (has_tgtself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->tgtself(), target);
  }

  // optional bytes uiShape = 31;
  if (has_uishape()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->uishape(), target);
  }

  // optional float indicatorTime = 32;
  if (has_indicatortime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->indicatortime(), target);
  }

  // optional float notMoveTime = 33;
  if (has_notmovetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->notmovetime(), target);
  }

  // optional int32 spellCharge = 34;
  if (has_spellcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->spellcharge(), target);
  }

  // optional bytes selfStates = 35;
  if (has_selfstates()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        35, this->selfstates(), target);
  }

  // optional int32 preSpell = 36;
  if (has_prespell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->prespell(), target);
  }

  // optional bytes rangeMax = 37;
  if (has_rangemax()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->rangemax(), target);
  }

  // optional int32 autoUseSkill = 38;
  if (has_autouseskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->autouseskill(), target);
  }

  // optional float moveSpeed = 39;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->movespeed(), target);
  }

  // optional int32 tgtAllType = 40;
  if (has_tgtalltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->tgtalltype(), target);
  }

  // optional int32 rangeMin = 41;
  if (has_rangemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->rangemin(), target);
  }

  // optional bytes circleShape = 42;
  if (has_circleshape()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->circleshape(), target);
  }

  // optional int32 spellMoveable = 43;
  if (has_spellmoveable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->spellmoveable(), target);
  }

  // optional float wsAdd2 = 44;
  if (has_wsadd2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->wsadd2(), target);
  }

  // optional int32 wsAdd1 = 45;
  if (has_wsadd1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->wsadd1(), target);
  }

  // optional int32 restoreDelayCd = 46;
  if (has_restoredelaycd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->restoredelaycd(), target);
  }

  // optional int32 useableInStub = 47;
  if (has_useableinstub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->useableinstub(), target);
  }

  // optional int32 selfHpMorePct = 48;
  if (has_selfhpmorepct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->selfhpmorepct(), target);
  }

  // optional int32 noTgt = 49;
  if (has_notgt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->notgt(), target);
  }

  // optional int32 wsNeed1 = 50;
  if (has_wsneed1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->wsneed1(), target);
  }

  // optional int32 wsNeed2 = 51;
  if (has_wsneed2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->wsneed2(), target);
  }

  // optional int32 tgtSelfFriendType = 52;
  if (has_tgtselffriendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->tgtselffriendtype(), target);
  }

  // optional int32 tgtFriendType = 53;
  if (has_tgtfriendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->tgtfriendtype(), target);
  }

  // optional int32 moveDelayNotAffectCalc = 54;
  if (has_movedelaynotaffectcalc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->movedelaynotaffectcalc(), target);
  }

  // optional float cd = 55;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->cd(), target);
  }

  // optional int32 flyNoDelay = 56;
  if (has_flynodelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->flynodelay(), target);
  }

  // optional bytes detailEff2 = 57;
  if (has_detaileff2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        57, this->detaileff2(), target);
  }

  // optional bytes castDelay = 58;
  if (has_castdelay()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        58, this->castdelay(), target);
  }

  // optional int32 tgtSelfEnemyType = 59;
  if (has_tgtselfenemytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->tgtselfenemytype(), target);
  }

  // optional int32 switchState = 60;
  if (has_switchstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->switchstate(), target);
  }

  // optional bytes detailEff3 = 61;
  if (has_detaileff3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        61, this->detaileff3(), target);
  }

  // optional float castTime = 62;
  if (has_casttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(62, this->casttime(), target);
  }

  // optional bytes detailEff1 = 63;
  if (has_detaileff1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        63, this->detaileff1(), target);
  }

  // optional int32 tgtSelectState = 64;
  if (has_tgtselectstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->tgtselectstate(), target);
  }

  // optional int32 wsType = 65;
  if (has_wstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->wstype(), target);
  }

  // optional bytes describe = 66;
  if (has_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        66, this->describe(), target);
  }

  // optional bytes addWsEff = 67;
  if (has_addwseff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        67, this->addwseff(), target);
  }

  // optional int32 learnGold = 68;
  if (has_learngold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->learngold(), target);
  }

  // optional bytes consumEquipNeed = 69;
  if (has_consumequipneed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        69, this->consumequipneed(), target);
  }

  // optional bytes auras = 70;
  if (has_auras()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->auras(), target);
  }

  // optional int32 mpNeed = 71;
  if (has_mpneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->mpneed(), target);
  }

  // optional int32 spellBreakable = 72;
  if (has_spellbreakable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->spellbreakable(), target);
  }

  // optional bytes mainEff = 73;
  if (has_maineff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        73, this->maineff(), target);
  }

  // optional int32 noArrow = 74;
  if (has_noarrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->noarrow(), target);
  }

  // optional int32 moveid = 75;
  if (has_moveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->moveid(), target);
  }

  // optional int32 id = 76;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->id(), target);
  }

  // optional int32 tgtPos = 77;
  if (has_tgtpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->tgtpos(), target);
  }

  // optional float gcd = 78;
  if (has_gcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(78, this->gcd(), target);
  }

  // optional int32 tgtNowPos = 79;
  if (has_tgtnowpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->tgtnowpos(), target);
  }

  // optional bytes graph2 = 80;
  if (has_graph2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        80, this->graph2(), target);
  }

  // optional bytes graph3 = 81;
  if (has_graph3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        81, this->graph3(), target);
  }

  // optional int32 goOnZaijuNo = 82;
  if (has_goonzaijuno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->goonzaijuno(), target);
  }

  // optional bytes graph1 = 83;
  if (has_graph1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        83, this->graph1(), target);
  }

  // optional bytes details = 84;
  if (has_details()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        84, this->details(), target);
  }

  // optional float castInterval = 85;
  if (has_castinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(85, this->castinterval(), target);
  }

  // optional int32 sid = 86;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(86, this->sid(), target);
  }

  // optional int32 selfHpLessPct = 87;
  if (has_selfhplesspct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(87, this->selfhplesspct(), target);
  }

  // optional int32 tgtEnemyType = 88;
  if (has_tgtenemytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(88, this->tgtenemytype(), target);
  }

  // optional int32 guidempNeed = 89;
  if (has_guidempneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(89, this->guidempneed(), target);
  }

  // optional int32 facePos = 90;
  if (has_facepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->facepos(), target);
  }

  // optional int32 vpNeed = 91;
  if (has_vpneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(91, this->vpneed(), target);
  }

  // optional int32 castMoveType = 92;
  if (has_castmovetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(92, this->castmovetype(), target);
  }

  // optional bytes wpSkillType = 93;
  if (has_wpskilltype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        93, this->wpskilltype(), target);
  }

  // optional bytes chargeStgs = 94;
  if (has_chargestgs()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        94, this->chargestgs(), target);
  }

  // optional bytes se = 95;
  if (has_se()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        95, this->se(), target);
  }

  // optional bytes effects = 96;
  if (has_effects()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        96, this->effects(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Skill_General_Data)
  return target;
}

int Skill_General_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 spellActState = 1;
    if (has_spellactstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellactstate());
    }

    // optional int32 castType = 2;
    if (has_casttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->casttype());
    }

    // optional float spellTime = 3;
    if (has_spelltime()) {
      total_size += 1 + 4;
    }

    // optional bytes seAfterCalc = 4;
    if (has_seaftercalc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seaftercalc());
    }

    // optional bytes tgtSelectStrategy = 5;
    if (has_tgtselectstrategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tgtselectstrategy());
    }

    // optional bytes mainEnhEff = 6;
    if (has_mainenheff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mainenheff());
    }

    // optional int32 checkMoveId = 7;
    if (has_checkmoveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkmoveid());
    }

    // optional int32 clientCalcNum = 8;
    if (has_clientcalcnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientcalcnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 showIndicator = 9;
    if (has_showindicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showindicator());
    }

    // optional int32 lv = 10;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional bytes creations = 11;
    if (has_creations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->creations());
    }

    // optional int32 learnLv = 12;
    if (has_learnlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learnlv());
    }

    // optional bytes graph4 = 13;
    if (has_graph4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graph4());
    }

    // optional int32 castBreakable = 14;
    if (has_castbreakable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->castbreakable());
    }

    // optional bytes selfNoStates = 15;
    if (has_selfnostates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfnostates());
    }

    // optional int32 school = 16;
    if (has_school()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->school());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float flySpeed = 17;
    if (has_flyspeed()) {
      total_size += 2 + 4;
    }

    // optional bytes name = 18;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes collideHeight = 19;
    if (has_collideheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->collideheight());
    }

    // optional int32 spellActAura = 20;
    if (has_spellactaura()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellactaura());
    }

    // optional int32 skillType = 21;
    if (has_skilltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltype());
    }

    // optional int32 guidevpNeed = 22;
    if (has_guidevpneed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guidevpneed());
    }

    // optional float notTurnTime = 23;
    if (has_notturntime()) {
      total_size += 2 + 4;
    }

    // optional float noAtkTime = 24;
    if (has_noatktime()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 isAoe = 25;
    if (has_isaoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaoe());
    }

    // optional int32 ammoNeed = 26;
    if (has_ammoneed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammoneed());
    }

    // optional float movedelay = 27;
    if (has_movedelay()) {
      total_size += 2 + 4;
    }

    // optional bytes preAmmoType = 28;
    if (has_preammotype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preammotype());
    }

    // optional int32 hideCastBar = 29;
    if (has_hidecastbar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hidecastbar());
    }

    // optional int32 tgtSelf = 30;
    if (has_tgtself()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtself());
    }

    // optional bytes uiShape = 31;
    if (has_uishape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uishape());
    }

    // optional float indicatorTime = 32;
    if (has_indicatortime()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float notMoveTime = 33;
    if (has_notmovetime()) {
      total_size += 2 + 4;
    }

    // optional int32 spellCharge = 34;
    if (has_spellcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellcharge());
    }

    // optional bytes selfStates = 35;
    if (has_selfstates()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfstates());
    }

    // optional int32 preSpell = 36;
    if (has_prespell()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prespell());
    }

    // optional bytes rangeMax = 37;
    if (has_rangemax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rangemax());
    }

    // optional int32 autoUseSkill = 38;
    if (has_autouseskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autouseskill());
    }

    // optional float moveSpeed = 39;
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // optional int32 tgtAllType = 40;
    if (has_tgtalltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtalltype());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 rangeMin = 41;
    if (has_rangemin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rangemin());
    }

    // optional bytes circleShape = 42;
    if (has_circleshape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->circleshape());
    }

    // optional int32 spellMoveable = 43;
    if (has_spellmoveable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellmoveable());
    }

    // optional float wsAdd2 = 44;
    if (has_wsadd2()) {
      total_size += 2 + 4;
    }

    // optional int32 wsAdd1 = 45;
    if (has_wsadd1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsadd1());
    }

    // optional int32 restoreDelayCd = 46;
    if (has_restoredelaycd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restoredelaycd());
    }

    // optional int32 useableInStub = 47;
    if (has_useableinstub()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useableinstub());
    }

    // optional int32 selfHpMorePct = 48;
    if (has_selfhpmorepct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfhpmorepct());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 noTgt = 49;
    if (has_notgt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notgt());
    }

    // optional int32 wsNeed1 = 50;
    if (has_wsneed1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsneed1());
    }

    // optional int32 wsNeed2 = 51;
    if (has_wsneed2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsneed2());
    }

    // optional int32 tgtSelfFriendType = 52;
    if (has_tgtselffriendtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtselffriendtype());
    }

    // optional int32 tgtFriendType = 53;
    if (has_tgtfriendtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtfriendtype());
    }

    // optional int32 moveDelayNotAffectCalc = 54;
    if (has_movedelaynotaffectcalc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movedelaynotaffectcalc());
    }

    // optional float cd = 55;
    if (has_cd()) {
      total_size += 2 + 4;
    }

    // optional int32 flyNoDelay = 56;
    if (has_flynodelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flynodelay());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional bytes detailEff2 = 57;
    if (has_detaileff2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detaileff2());
    }

    // optional bytes castDelay = 58;
    if (has_castdelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->castdelay());
    }

    // optional int32 tgtSelfEnemyType = 59;
    if (has_tgtselfenemytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtselfenemytype());
    }

    // optional int32 switchState = 60;
    if (has_switchstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switchstate());
    }

    // optional bytes detailEff3 = 61;
    if (has_detaileff3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detaileff3());
    }

    // optional float castTime = 62;
    if (has_casttime()) {
      total_size += 2 + 4;
    }

    // optional bytes detailEff1 = 63;
    if (has_detaileff1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detaileff1());
    }

    // optional int32 tgtSelectState = 64;
    if (has_tgtselectstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtselectstate());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 wsType = 65;
    if (has_wstype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wstype());
    }

    // optional bytes describe = 66;
    if (has_describe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->describe());
    }

    // optional bytes addWsEff = 67;
    if (has_addwseff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addwseff());
    }

    // optional int32 learnGold = 68;
    if (has_learngold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learngold());
    }

    // optional bytes consumEquipNeed = 69;
    if (has_consumequipneed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->consumequipneed());
    }

    // optional bytes auras = 70;
    if (has_auras()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auras());
    }

    // optional int32 mpNeed = 71;
    if (has_mpneed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpneed());
    }

    // optional int32 spellBreakable = 72;
    if (has_spellbreakable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellbreakable());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional bytes mainEff = 73;
    if (has_maineff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->maineff());
    }

    // optional int32 noArrow = 74;
    if (has_noarrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noarrow());
    }

    // optional int32 moveid = 75;
    if (has_moveid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveid());
    }

    // optional int32 id = 76;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 tgtPos = 77;
    if (has_tgtpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtpos());
    }

    // optional float gcd = 78;
    if (has_gcd()) {
      total_size += 2 + 4;
    }

    // optional int32 tgtNowPos = 79;
    if (has_tgtnowpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtnowpos());
    }

    // optional bytes graph2 = 80;
    if (has_graph2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graph2());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional bytes graph3 = 81;
    if (has_graph3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graph3());
    }

    // optional int32 goOnZaijuNo = 82;
    if (has_goonzaijuno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goonzaijuno());
    }

    // optional bytes graph1 = 83;
    if (has_graph1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graph1());
    }

    // optional bytes details = 84;
    if (has_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional float castInterval = 85;
    if (has_castinterval()) {
      total_size += 2 + 4;
    }

    // optional int32 sid = 86;
    if (has_sid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 selfHpLessPct = 87;
    if (has_selfhplesspct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfhplesspct());
    }

    // optional int32 tgtEnemyType = 88;
    if (has_tgtenemytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgtenemytype());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional int32 guidempNeed = 89;
    if (has_guidempneed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guidempneed());
    }

    // optional int32 facePos = 90;
    if (has_facepos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facepos());
    }

    // optional int32 vpNeed = 91;
    if (has_vpneed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vpneed());
    }

    // optional int32 castMoveType = 92;
    if (has_castmovetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->castmovetype());
    }

    // optional bytes wpSkillType = 93;
    if (has_wpskilltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wpskilltype());
    }

    // optional bytes chargeStgs = 94;
    if (has_chargestgs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chargestgs());
    }

    // optional bytes se = 95;
    if (has_se()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->se());
    }

    // optional bytes effects = 96;
    if (has_effects()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->effects());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill_General_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill_General_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill_General_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill_General_Data::MergeFrom(const Skill_General_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spellactstate()) {
      set_spellactstate(from.spellactstate());
    }
    if (from.has_casttype()) {
      set_casttype(from.casttype());
    }
    if (from.has_spelltime()) {
      set_spelltime(from.spelltime());
    }
    if (from.has_seaftercalc()) {
      set_seaftercalc(from.seaftercalc());
    }
    if (from.has_tgtselectstrategy()) {
      set_tgtselectstrategy(from.tgtselectstrategy());
    }
    if (from.has_mainenheff()) {
      set_mainenheff(from.mainenheff());
    }
    if (from.has_checkmoveid()) {
      set_checkmoveid(from.checkmoveid());
    }
    if (from.has_clientcalcnum()) {
      set_clientcalcnum(from.clientcalcnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showindicator()) {
      set_showindicator(from.showindicator());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_creations()) {
      set_creations(from.creations());
    }
    if (from.has_learnlv()) {
      set_learnlv(from.learnlv());
    }
    if (from.has_graph4()) {
      set_graph4(from.graph4());
    }
    if (from.has_castbreakable()) {
      set_castbreakable(from.castbreakable());
    }
    if (from.has_selfnostates()) {
      set_selfnostates(from.selfnostates());
    }
    if (from.has_school()) {
      set_school(from.school());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_flyspeed()) {
      set_flyspeed(from.flyspeed());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_collideheight()) {
      set_collideheight(from.collideheight());
    }
    if (from.has_spellactaura()) {
      set_spellactaura(from.spellactaura());
    }
    if (from.has_skilltype()) {
      set_skilltype(from.skilltype());
    }
    if (from.has_guidevpneed()) {
      set_guidevpneed(from.guidevpneed());
    }
    if (from.has_notturntime()) {
      set_notturntime(from.notturntime());
    }
    if (from.has_noatktime()) {
      set_noatktime(from.noatktime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_isaoe()) {
      set_isaoe(from.isaoe());
    }
    if (from.has_ammoneed()) {
      set_ammoneed(from.ammoneed());
    }
    if (from.has_movedelay()) {
      set_movedelay(from.movedelay());
    }
    if (from.has_preammotype()) {
      set_preammotype(from.preammotype());
    }
    if (from.has_hidecastbar()) {
      set_hidecastbar(from.hidecastbar());
    }
    if (from.has_tgtself()) {
      set_tgtself(from.tgtself());
    }
    if (from.has_uishape()) {
      set_uishape(from.uishape());
    }
    if (from.has_indicatortime()) {
      set_indicatortime(from.indicatortime());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_notmovetime()) {
      set_notmovetime(from.notmovetime());
    }
    if (from.has_spellcharge()) {
      set_spellcharge(from.spellcharge());
    }
    if (from.has_selfstates()) {
      set_selfstates(from.selfstates());
    }
    if (from.has_prespell()) {
      set_prespell(from.prespell());
    }
    if (from.has_rangemax()) {
      set_rangemax(from.rangemax());
    }
    if (from.has_autouseskill()) {
      set_autouseskill(from.autouseskill());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_tgtalltype()) {
      set_tgtalltype(from.tgtalltype());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_rangemin()) {
      set_rangemin(from.rangemin());
    }
    if (from.has_circleshape()) {
      set_circleshape(from.circleshape());
    }
    if (from.has_spellmoveable()) {
      set_spellmoveable(from.spellmoveable());
    }
    if (from.has_wsadd2()) {
      set_wsadd2(from.wsadd2());
    }
    if (from.has_wsadd1()) {
      set_wsadd1(from.wsadd1());
    }
    if (from.has_restoredelaycd()) {
      set_restoredelaycd(from.restoredelaycd());
    }
    if (from.has_useableinstub()) {
      set_useableinstub(from.useableinstub());
    }
    if (from.has_selfhpmorepct()) {
      set_selfhpmorepct(from.selfhpmorepct());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_notgt()) {
      set_notgt(from.notgt());
    }
    if (from.has_wsneed1()) {
      set_wsneed1(from.wsneed1());
    }
    if (from.has_wsneed2()) {
      set_wsneed2(from.wsneed2());
    }
    if (from.has_tgtselffriendtype()) {
      set_tgtselffriendtype(from.tgtselffriendtype());
    }
    if (from.has_tgtfriendtype()) {
      set_tgtfriendtype(from.tgtfriendtype());
    }
    if (from.has_movedelaynotaffectcalc()) {
      set_movedelaynotaffectcalc(from.movedelaynotaffectcalc());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_flynodelay()) {
      set_flynodelay(from.flynodelay());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_detaileff2()) {
      set_detaileff2(from.detaileff2());
    }
    if (from.has_castdelay()) {
      set_castdelay(from.castdelay());
    }
    if (from.has_tgtselfenemytype()) {
      set_tgtselfenemytype(from.tgtselfenemytype());
    }
    if (from.has_switchstate()) {
      set_switchstate(from.switchstate());
    }
    if (from.has_detaileff3()) {
      set_detaileff3(from.detaileff3());
    }
    if (from.has_casttime()) {
      set_casttime(from.casttime());
    }
    if (from.has_detaileff1()) {
      set_detaileff1(from.detaileff1());
    }
    if (from.has_tgtselectstate()) {
      set_tgtselectstate(from.tgtselectstate());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_wstype()) {
      set_wstype(from.wstype());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_addwseff()) {
      set_addwseff(from.addwseff());
    }
    if (from.has_learngold()) {
      set_learngold(from.learngold());
    }
    if (from.has_consumequipneed()) {
      set_consumequipneed(from.consumequipneed());
    }
    if (from.has_auras()) {
      set_auras(from.auras());
    }
    if (from.has_mpneed()) {
      set_mpneed(from.mpneed());
    }
    if (from.has_spellbreakable()) {
      set_spellbreakable(from.spellbreakable());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_maineff()) {
      set_maineff(from.maineff());
    }
    if (from.has_noarrow()) {
      set_noarrow(from.noarrow());
    }
    if (from.has_moveid()) {
      set_moveid(from.moveid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tgtpos()) {
      set_tgtpos(from.tgtpos());
    }
    if (from.has_gcd()) {
      set_gcd(from.gcd());
    }
    if (from.has_tgtnowpos()) {
      set_tgtnowpos(from.tgtnowpos());
    }
    if (from.has_graph2()) {
      set_graph2(from.graph2());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_graph3()) {
      set_graph3(from.graph3());
    }
    if (from.has_goonzaijuno()) {
      set_goonzaijuno(from.goonzaijuno());
    }
    if (from.has_graph1()) {
      set_graph1(from.graph1());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
    if (from.has_castinterval()) {
      set_castinterval(from.castinterval());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_selfhplesspct()) {
      set_selfhplesspct(from.selfhplesspct());
    }
    if (from.has_tgtenemytype()) {
      set_tgtenemytype(from.tgtenemytype());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_guidempneed()) {
      set_guidempneed(from.guidempneed());
    }
    if (from.has_facepos()) {
      set_facepos(from.facepos());
    }
    if (from.has_vpneed()) {
      set_vpneed(from.vpneed());
    }
    if (from.has_castmovetype()) {
      set_castmovetype(from.castmovetype());
    }
    if (from.has_wpskilltype()) {
      set_wpskilltype(from.wpskilltype());
    }
    if (from.has_chargestgs()) {
      set_chargestgs(from.chargestgs());
    }
    if (from.has_se()) {
      set_se(from.se());
    }
    if (from.has_effects()) {
      set_effects(from.effects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill_General_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill_General_Data::CopyFrom(const Skill_General_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill_General_Data::IsInitialized() const {

  return true;
}

void Skill_General_Data::Swap(Skill_General_Data* other) {
  if (other != this) {
    std::swap(spellactstate_, other->spellactstate_);
    std::swap(casttype_, other->casttype_);
    std::swap(spelltime_, other->spelltime_);
    std::swap(seaftercalc_, other->seaftercalc_);
    std::swap(tgtselectstrategy_, other->tgtselectstrategy_);
    std::swap(mainenheff_, other->mainenheff_);
    std::swap(checkmoveid_, other->checkmoveid_);
    std::swap(clientcalcnum_, other->clientcalcnum_);
    std::swap(showindicator_, other->showindicator_);
    std::swap(lv_, other->lv_);
    std::swap(creations_, other->creations_);
    std::swap(learnlv_, other->learnlv_);
    std::swap(graph4_, other->graph4_);
    std::swap(castbreakable_, other->castbreakable_);
    std::swap(selfnostates_, other->selfnostates_);
    std::swap(school_, other->school_);
    std::swap(flyspeed_, other->flyspeed_);
    std::swap(name_, other->name_);
    std::swap(collideheight_, other->collideheight_);
    std::swap(spellactaura_, other->spellactaura_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(guidevpneed_, other->guidevpneed_);
    std::swap(notturntime_, other->notturntime_);
    std::swap(noatktime_, other->noatktime_);
    std::swap(isaoe_, other->isaoe_);
    std::swap(ammoneed_, other->ammoneed_);
    std::swap(movedelay_, other->movedelay_);
    std::swap(preammotype_, other->preammotype_);
    std::swap(hidecastbar_, other->hidecastbar_);
    std::swap(tgtself_, other->tgtself_);
    std::swap(uishape_, other->uishape_);
    std::swap(indicatortime_, other->indicatortime_);
    std::swap(notmovetime_, other->notmovetime_);
    std::swap(spellcharge_, other->spellcharge_);
    std::swap(selfstates_, other->selfstates_);
    std::swap(prespell_, other->prespell_);
    std::swap(rangemax_, other->rangemax_);
    std::swap(autouseskill_, other->autouseskill_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(tgtalltype_, other->tgtalltype_);
    std::swap(rangemin_, other->rangemin_);
    std::swap(circleshape_, other->circleshape_);
    std::swap(spellmoveable_, other->spellmoveable_);
    std::swap(wsadd2_, other->wsadd2_);
    std::swap(wsadd1_, other->wsadd1_);
    std::swap(restoredelaycd_, other->restoredelaycd_);
    std::swap(useableinstub_, other->useableinstub_);
    std::swap(selfhpmorepct_, other->selfhpmorepct_);
    std::swap(notgt_, other->notgt_);
    std::swap(wsneed1_, other->wsneed1_);
    std::swap(wsneed2_, other->wsneed2_);
    std::swap(tgtselffriendtype_, other->tgtselffriendtype_);
    std::swap(tgtfriendtype_, other->tgtfriendtype_);
    std::swap(movedelaynotaffectcalc_, other->movedelaynotaffectcalc_);
    std::swap(cd_, other->cd_);
    std::swap(flynodelay_, other->flynodelay_);
    std::swap(detaileff2_, other->detaileff2_);
    std::swap(castdelay_, other->castdelay_);
    std::swap(tgtselfenemytype_, other->tgtselfenemytype_);
    std::swap(switchstate_, other->switchstate_);
    std::swap(detaileff3_, other->detaileff3_);
    std::swap(casttime_, other->casttime_);
    std::swap(detaileff1_, other->detaileff1_);
    std::swap(tgtselectstate_, other->tgtselectstate_);
    std::swap(wstype_, other->wstype_);
    std::swap(describe_, other->describe_);
    std::swap(addwseff_, other->addwseff_);
    std::swap(learngold_, other->learngold_);
    std::swap(consumequipneed_, other->consumequipneed_);
    std::swap(auras_, other->auras_);
    std::swap(mpneed_, other->mpneed_);
    std::swap(spellbreakable_, other->spellbreakable_);
    std::swap(maineff_, other->maineff_);
    std::swap(noarrow_, other->noarrow_);
    std::swap(moveid_, other->moveid_);
    std::swap(id_, other->id_);
    std::swap(tgtpos_, other->tgtpos_);
    std::swap(gcd_, other->gcd_);
    std::swap(tgtnowpos_, other->tgtnowpos_);
    std::swap(graph2_, other->graph2_);
    std::swap(graph3_, other->graph3_);
    std::swap(goonzaijuno_, other->goonzaijuno_);
    std::swap(graph1_, other->graph1_);
    std::swap(details_, other->details_);
    std::swap(castinterval_, other->castinterval_);
    std::swap(sid_, other->sid_);
    std::swap(selfhplesspct_, other->selfhplesspct_);
    std::swap(tgtenemytype_, other->tgtenemytype_);
    std::swap(guidempneed_, other->guidempneed_);
    std::swap(facepos_, other->facepos_);
    std::swap(vpneed_, other->vpneed_);
    std::swap(castmovetype_, other->castmovetype_);
    std::swap(wpskilltype_, other->wpskilltype_);
    std::swap(chargestgs_, other->chargestgs_);
    std::swap(se_, other->se_);
    std::swap(effects_, other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill_General_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_General_Data_descriptor_;
  metadata.reflection = Skill_General_Data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
