// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Item_Data;
class Skill_General_Data;

// ===================================================================

class Item_Data : public ::google::protobuf::Message {
 public:
  Item_Data();
  virtual ~Item_Data();

  Item_Data(const Item_Data& from);

  inline Item_Data& operator=(const Item_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item_Data& default_instance();

  void Swap(Item_Data* other);

  // implements Message ----------------------------------------------

  Item_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item_Data& from);
  void MergeFrom(const Item_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // optional int32 modelId = 3;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIdFieldNumber = 3;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // optional float modelScale = 4;
  inline bool has_modelscale() const;
  inline void clear_modelscale();
  static const int kModelScaleFieldNumber = 4;
  inline float modelscale() const;
  inline void set_modelscale(float value);

  // optional int32 dropItemSound = 5;
  inline bool has_dropitemsound() const;
  inline void clear_dropitemsound();
  static const int kDropItemSoundFieldNumber = 5;
  inline ::google::protobuf::int32 dropitemsound() const;
  inline void set_dropitemsound(::google::protobuf::int32 value);

  // optional int32 useItemSound = 6;
  inline bool has_useitemsound() const;
  inline void clear_useitemsound();
  static const int kUseItemSoundFieldNumber = 6;
  inline ::google::protobuf::int32 useitemsound() const;
  inline void set_useitemsound(::google::protobuf::int32 value);

  // optional int32 dragItemSound = 7;
  inline bool has_dragitemsound() const;
  inline void clear_dragitemsound();
  static const int kDragItemSoundFieldNumber = 7;
  inline ::google::protobuf::int32 dragitemsound() const;
  inline void set_dragitemsound(::google::protobuf::int32 value);

  // optional int32 parentId = 8;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIdFieldNumber = 8;
  inline ::google::protobuf::int32 parentid() const;
  inline void set_parentid(::google::protobuf::int32 value);

  // optional int32 isDisplayInDb = 9;
  inline bool has_isdisplayindb() const;
  inline void clear_isdisplayindb();
  static const int kIsDisplayInDbFieldNumber = 9;
  inline ::google::protobuf::int32 isdisplayindb() const;
  inline void set_isdisplayindb(::google::protobuf::int32 value);

  // optional int32 quality = 10;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 10;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 category = 12;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 12;
  inline ::google::protobuf::int32 category() const;
  inline void set_category(::google::protobuf::int32 value);

  // optional int32 subcategory = 13;
  inline bool has_subcategory() const;
  inline void clear_subcategory();
  static const int kSubcategoryFieldNumber = 13;
  inline ::google::protobuf::int32 subcategory() const;
  inline void set_subcategory(::google::protobuf::int32 value);

  // optional int32 valuable = 14;
  inline bool has_valuable() const;
  inline void clear_valuable();
  static const int kValuableFieldNumber = 14;
  inline ::google::protobuf::int32 valuable() const;
  inline void set_valuable(::google::protobuf::int32 value);

  // optional int32 precious = 15;
  inline bool has_precious() const;
  inline void clear_precious();
  static const int kPreciousFieldNumber = 15;
  inline ::google::protobuf::int32 precious() const;
  inline void set_precious(::google::protobuf::int32 value);

  // optional int32 runeEquipExp = 16;
  inline bool has_runeequipexp() const;
  inline void clear_runeequipexp();
  static const int kRuneEquipExpFieldNumber = 16;
  inline ::google::protobuf::int32 runeequipexp() const;
  inline void set_runeequipexp(::google::protobuf::int32 value);

  // optional float heightOffset = 17;
  inline bool has_heightoffset() const;
  inline void clear_heightoffset();
  static const int kHeightOffsetFieldNumber = 17;
  inline float heightoffset() const;
  inline void set_heightoffset(float value);

  // optional int32 questItem = 18;
  inline bool has_questitem() const;
  inline void clear_questitem();
  static const int kQuestItemFieldNumber = 18;
  inline ::google::protobuf::int32 questitem() const;
  inline void set_questitem(::google::protobuf::int32 value);

  // optional int32 cdgroup = 19;
  inline bool has_cdgroup() const;
  inline void clear_cdgroup();
  static const int kCdgroupFieldNumber = 19;
  inline ::google::protobuf::int32 cdgroup() const;
  inline void set_cdgroup(::google::protobuf::int32 value);

  // optional int32 cd = 20;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 20;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // optional int32 bPrice = 21;
  inline bool has_bprice() const;
  inline void clear_bprice();
  static const int kBPriceFieldNumber = 21;
  inline ::google::protobuf::int32 bprice() const;
  inline void set_bprice(::google::protobuf::int32 value);

  // optional int32 bPriceType = 22;
  inline bool has_bpricetype() const;
  inline void clear_bpricetype();
  static const int kBPriceTypeFieldNumber = 22;
  inline ::google::protobuf::int32 bpricetype() const;
  inline void set_bpricetype(::google::protobuf::int32 value);

  // optional int32 sPrice = 23;
  inline bool has_sprice() const;
  inline void clear_sprice();
  static const int kSPriceFieldNumber = 23;
  inline ::google::protobuf::int32 sprice() const;
  inline void set_sprice(::google::protobuf::int32 value);

  // optional int32 sPriceType = 24;
  inline bool has_spricetype() const;
  inline void clear_spricetype();
  static const int kSPriceTypeFieldNumber = 24;
  inline ::google::protobuf::int32 spricetype() const;
  inline void set_spricetype(::google::protobuf::int32 value);

  // optional int32 fPrice = 25;
  inline bool has_fprice() const;
  inline void clear_fprice();
  static const int kFPriceFieldNumber = 25;
  inline ::google::protobuf::int32 fprice() const;
  inline void set_fprice(::google::protobuf::int32 value);

  // optional int32 auctionPrice = 26;
  inline bool has_auctionprice() const;
  inline void clear_auctionprice();
  static const int kAuctionPriceFieldNumber = 26;
  inline ::google::protobuf::int32 auctionprice() const;
  inline void set_auctionprice(::google::protobuf::int32 value);

  // optional int32 noBuyBack = 28;
  inline bool has_nobuyback() const;
  inline void clear_nobuyback();
  static const int kNoBuyBackFieldNumber = 28;
  inline ::google::protobuf::int32 nobuyback() const;
  inline void set_nobuyback(::google::protobuf::int32 value);

  // optional int32 shopJingJieRequire = 30;
  inline bool has_shopjingjierequire() const;
  inline void clear_shopjingjierequire();
  static const int kShopJingJieRequireFieldNumber = 30;
  inline ::google::protobuf::int32 shopjingjierequire() const;
  inline void set_shopjingjierequire(::google::protobuf::int32 value);

  // optional int32 bindType = 31;
  inline bool has_bindtype() const;
  inline void clear_bindtype();
  static const int kBindTypeFieldNumber = 31;
  inline ::google::protobuf::int32 bindtype() const;
  inline void set_bindtype(::google::protobuf::int32 value);

  // optional int32 lvReq = 32;
  inline bool has_lvreq() const;
  inline void clear_lvreq();
  static const int kLvReqFieldNumber = 32;
  inline ::google::protobuf::int32 lvreq() const;
  inline void set_lvreq(::google::protobuf::int32 value);

  // optional int32 maxLvReq = 33;
  inline bool has_maxlvreq() const;
  inline void clear_maxlvreq();
  static const int kMaxLvReqFieldNumber = 33;
  inline ::google::protobuf::int32 maxlvreq() const;
  inline void set_maxlvreq(::google::protobuf::int32 value);

  // optional int32 sexReq = 34;
  inline bool has_sexreq() const;
  inline void clear_sexreq();
  static const int kSexReqFieldNumber = 34;
  inline ::google::protobuf::int32 sexreq() const;
  inline void set_sexreq(::google::protobuf::int32 value);

  // optional int32 allowBodyType = 35;
  inline bool has_allowbodytype() const;
  inline void clear_allowbodytype();
  static const int kAllowBodyTypeFieldNumber = 35;
  inline ::google::protobuf::int32 allowbodytype() const;
  inline void set_allowbodytype(::google::protobuf::int32 value);

  // optional int32 combatReq = 37;
  inline bool has_combatreq() const;
  inline void clear_combatreq();
  static const int kCombatReqFieldNumber = 37;
  inline ::google::protobuf::int32 combatreq() const;
  inline void set_combatreq(::google::protobuf::int32 value);

  // optional int32 combatEquReq = 38;
  inline bool has_combatequreq() const;
  inline void clear_combatequreq();
  static const int kCombatEquReqFieldNumber = 38;
  inline ::google::protobuf::int32 combatequreq() const;
  inline void set_combatequreq(::google::protobuf::int32 value);

  // optional int32 zaijuReq = 39;
  inline bool has_zaijureq() const;
  inline void clear_zaijureq();
  static const int kZaijuReqFieldNumber = 39;
  inline ::google::protobuf::int32 zaijureq() const;
  inline void set_zaijureq(::google::protobuf::int32 value);

  // optional int32 conType1 = 42;
  inline bool has_contype1() const;
  inline void clear_contype1();
  static const int kConType1FieldNumber = 42;
  inline ::google::protobuf::int32 contype1() const;
  inline void set_contype1(::google::protobuf::int32 value);

  // optional int32 conId1 = 43;
  inline bool has_conid1() const;
  inline void clear_conid1();
  static const int kConId1FieldNumber = 43;
  inline ::google::protobuf::int32 conid1() const;
  inline void set_conid1(::google::protobuf::int32 value);

  // optional int32 conOp1 = 44;
  inline bool has_conop1() const;
  inline void clear_conop1();
  static const int kConOp1FieldNumber = 44;
  inline ::google::protobuf::int32 conop1() const;
  inline void set_conop1(::google::protobuf::int32 value);

  // optional int32 conParam1 = 45;
  inline bool has_conparam1() const;
  inline void clear_conparam1();
  static const int kConParam1FieldNumber = 45;
  inline ::google::protobuf::int32 conparam1() const;
  inline void set_conparam1(::google::protobuf::int32 value);

  // optional int32 conType2 = 46;
  inline bool has_contype2() const;
  inline void clear_contype2();
  static const int kConType2FieldNumber = 46;
  inline ::google::protobuf::int32 contype2() const;
  inline void set_contype2(::google::protobuf::int32 value);

  // optional int32 conId2 = 47;
  inline bool has_conid2() const;
  inline void clear_conid2();
  static const int kConId2FieldNumber = 47;
  inline ::google::protobuf::int32 conid2() const;
  inline void set_conid2(::google::protobuf::int32 value);

  // optional int32 conOp2 = 48;
  inline bool has_conop2() const;
  inline void clear_conop2();
  static const int kConOp2FieldNumber = 48;
  inline ::google::protobuf::int32 conop2() const;
  inline void set_conop2(::google::protobuf::int32 value);

  // optional int32 conParam2 = 49;
  inline bool has_conparam2() const;
  inline void clear_conparam2();
  static const int kConParam2FieldNumber = 49;
  inline ::google::protobuf::int32 conparam2() const;
  inline void set_conparam2(::google::protobuf::int32 value);

  // optional int32 conType3 = 50;
  inline bool has_contype3() const;
  inline void clear_contype3();
  static const int kConType3FieldNumber = 50;
  inline ::google::protobuf::int32 contype3() const;
  inline void set_contype3(::google::protobuf::int32 value);

  // optional int32 conId3 = 51;
  inline bool has_conid3() const;
  inline void clear_conid3();
  static const int kConId3FieldNumber = 51;
  inline ::google::protobuf::int32 conid3() const;
  inline void set_conid3(::google::protobuf::int32 value);

  // optional int32 conOp3 = 52;
  inline bool has_conop3() const;
  inline void clear_conop3();
  static const int kConOp3FieldNumber = 52;
  inline ::google::protobuf::int32 conop3() const;
  inline void set_conop3(::google::protobuf::int32 value);

  // optional int32 conParam3 = 53;
  inline bool has_conparam3() const;
  inline void clear_conparam3();
  static const int kConParam3FieldNumber = 53;
  inline ::google::protobuf::int32 conparam3() const;
  inline void set_conparam3(::google::protobuf::int32 value);

  // optional int32 mwrap = 54;
  inline bool has_mwrap() const;
  inline void clear_mwrap();
  static const int kMwrapFieldNumber = 54;
  inline ::google::protobuf::int32 mwrap() const;
  inline void set_mwrap(::google::protobuf::int32 value);

  // optional int32 holdMax = 55;
  inline bool has_holdmax() const;
  inline void clear_holdmax();
  static const int kHoldMaxFieldNumber = 55;
  inline ::google::protobuf::int32 holdmax() const;
  inline void set_holdmax(::google::protobuf::int32 value);

  // optional int32 tgtType = 56;
  inline bool has_tgttype() const;
  inline void clear_tgttype();
  static const int kTgtTypeFieldNumber = 56;
  inline ::google::protobuf::int32 tgttype() const;
  inline void set_tgttype(::google::protobuf::int32 value);

  // optional float tgtDist = 57;
  inline bool has_tgtdist() const;
  inline void clear_tgtdist();
  static const int kTgtDistFieldNumber = 57;
  inline float tgtdist() const;
  inline void set_tgtdist(float value);

  // optional int32 ttlType = 59;
  inline bool has_ttltype() const;
  inline void clear_ttltype();
  static const int kTtlTypeFieldNumber = 59;
  inline ::google::protobuf::int32 ttltype() const;
  inline void set_ttltype(::google::protobuf::int32 value);

  // optional int32 ttl = 60;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 60;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);

  // optional int32 ttlExpireType = 61;
  inline bool has_ttlexpiretype() const;
  inline void clear_ttlexpiretype();
  static const int kTtlExpireTypeFieldNumber = 61;
  inline ::google::protobuf::int32 ttlexpiretype() const;
  inline void set_ttlexpiretype(::google::protobuf::int32 value);

  // optional int32 ttlChangeId = 62;
  inline bool has_ttlchangeid() const;
  inline void clear_ttlchangeid();
  static const int kTtlChangeIdFieldNumber = 62;
  inline ::google::protobuf::int32 ttlchangeid() const;
  inline void set_ttlchangeid(::google::protobuf::int32 value);

  // optional int32 ttlChangeAmount = 63;
  inline bool has_ttlchangeamount() const;
  inline void clear_ttlchangeamount();
  static const int kTtlChangeAmountFieldNumber = 63;
  inline ::google::protobuf::int32 ttlchangeamount() const;
  inline void set_ttlchangeamount(::google::protobuf::int32 value);

  // optional bytes commonExpireTime = 64;
  inline bool has_commonexpiretime() const;
  inline void clear_commonexpiretime();
  static const int kCommonExpireTimeFieldNumber = 64;
  inline const ::std::string& commonexpiretime() const;
  inline void set_commonexpiretime(const ::std::string& value);
  inline void set_commonexpiretime(const char* value);
  inline void set_commonexpiretime(const void* value, size_t size);
  inline ::std::string* mutable_commonexpiretime();
  inline ::std::string* release_commonexpiretime();
  inline void set_allocated_commonexpiretime(::std::string* commonexpiretime);

  // optional int32 ownership = 65;
  inline bool has_ownership() const;
  inline void clear_ownership();
  static const int kOwnershipFieldNumber = 65;
  inline ::google::protobuf::int32 ownership() const;
  inline void set_ownership(::google::protobuf::int32 value);

  // optional int32 renewalType = 66;
  inline bool has_renewaltype() const;
  inline void clear_renewaltype();
  static const int kRenewalTypeFieldNumber = 66;
  inline ::google::protobuf::int32 renewaltype() const;
  inline void set_renewaltype(::google::protobuf::int32 value);

  // optional int32 commonRenewalType = 67;
  inline bool has_commonrenewaltype() const;
  inline void clear_commonrenewaltype();
  static const int kCommonRenewalTypeFieldNumber = 67;
  inline ::google::protobuf::int32 commonrenewaltype() const;
  inline void set_commonrenewaltype(::google::protobuf::int32 value);

  // optional int32 mallRenewal30Days = 68;
  inline bool has_mallrenewal30days() const;
  inline void clear_mallrenewal30days();
  static const int kMallRenewal30DaysFieldNumber = 68;
  inline ::google::protobuf::int32 mallrenewal30days() const;
  inline void set_mallrenewal30days(::google::protobuf::int32 value);

  // optional int32 mallRenewalOwnership = 69;
  inline bool has_mallrenewalownership() const;
  inline void clear_mallrenewalownership();
  static const int kMallRenewalOwnershipFieldNumber = 69;
  inline ::google::protobuf::int32 mallrenewalownership() const;
  inline void set_mallrenewalownership(::google::protobuf::int32 value);

  // optional int32 mallRenewalForever = 70;
  inline bool has_mallrenewalforever() const;
  inline void clear_mallrenewalforever();
  static const int kMallRenewalForeverFieldNumber = 70;
  inline ::google::protobuf::int32 mallrenewalforever() const;
  inline void set_mallrenewalforever(::google::protobuf::int32 value);

  // optional int32 noSell = 71;
  inline bool has_nosell() const;
  inline void clear_nosell();
  static const int kNoSellFieldNumber = 71;
  inline ::google::protobuf::int32 nosell() const;
  inline void set_nosell(::google::protobuf::int32 value);

  // optional int32 noTrade = 72;
  inline bool has_notrade() const;
  inline void clear_notrade();
  static const int kNoTradeFieldNumber = 72;
  inline ::google::protobuf::int32 notrade() const;
  inline void set_notrade(::google::protobuf::int32 value);

  // optional int32 noDrop = 73;
  inline bool has_nodrop() const;
  inline void clear_nodrop();
  static const int kNoDropFieldNumber = 73;
  inline ::google::protobuf::int32 nodrop() const;
  inline void set_nodrop(::google::protobuf::int32 value);

  // optional int32 noMail = 74;
  inline bool has_nomail() const;
  inline void clear_nomail();
  static const int kNoMailFieldNumber = 74;
  inline ::google::protobuf::int32 nomail() const;
  inline void set_nomail(::google::protobuf::int32 value);

  // optional int32 noConsign = 75;
  inline bool has_noconsign() const;
  inline void clear_noconsign();
  static const int kNoConsignFieldNumber = 75;
  inline ::google::protobuf::int32 noconsign() const;
  inline void set_noconsign(::google::protobuf::int32 value);

  // optional int32 coinConsign = 76;
  inline bool has_coinconsign() const;
  inline void clear_coinconsign();
  static const int kCoinConsignFieldNumber = 76;
  inline ::google::protobuf::int32 coinconsign() const;
  inline void set_coinconsign(::google::protobuf::int32 value);

  // optional int32 noBooth = 77;
  inline bool has_nobooth() const;
  inline void clear_nobooth();
  static const int kNoBoothFieldNumber = 77;
  inline ::google::protobuf::int32 nobooth() const;
  inline void set_nobooth(::google::protobuf::int32 value);

  // optional int32 noBoothBuy = 78;
  inline bool has_noboothbuy() const;
  inline void clear_noboothbuy();
  static const int kNoBoothBuyFieldNumber = 78;
  inline ::google::protobuf::int32 noboothbuy() const;
  inline void set_noboothbuy(::google::protobuf::int32 value);

  // optional int32 noStorage = 79;
  inline bool has_nostorage() const;
  inline void clear_nostorage();
  static const int kNoStorageFieldNumber = 79;
  inline ::google::protobuf::int32 nostorage() const;
  inline void set_nostorage(::google::protobuf::int32 value);

  // optional int32 noRepair = 80;
  inline bool has_norepair() const;
  inline void clear_norepair();
  static const int kNoRepairFieldNumber = 80;
  inline ::google::protobuf::int32 norepair() const;
  inline void set_norepair(::google::protobuf::int32 value);

  // optional int32 noLatch = 81;
  inline bool has_nolatch() const;
  inline void clear_nolatch();
  static const int kNoLatchFieldNumber = 81;
  inline ::google::protobuf::int32 nolatch() const;
  inline void set_nolatch(::google::protobuf::int32 value);

  // optional int32 noReturn = 82;
  inline bool has_noreturn() const;
  inline void clear_noreturn();
  static const int kNoReturnFieldNumber = 82;
  inline ::google::protobuf::int32 noreturn() const;
  inline void set_noreturn(::google::protobuf::int32 value);

  // optional int32 rideItemType = 83;
  inline bool has_rideitemtype() const;
  inline void clear_rideitemtype();
  static const int kRideItemTypeFieldNumber = 83;
  inline ::google::protobuf::int32 rideitemtype() const;
  inline void set_rideitemtype(::google::protobuf::int32 value);

  // optional float spellTime = 84;
  inline bool has_spelltime() const;
  inline void clear_spelltime();
  static const int kSpellTimeFieldNumber = 84;
  inline float spelltime() const;
  inline void set_spelltime(float value);

  // optional int32 accordingType = 85;
  inline bool has_accordingtype() const;
  inline void clear_accordingtype();
  static const int kAccordingTypeFieldNumber = 85;
  inline ::google::protobuf::int32 accordingtype() const;
  inline void set_accordingtype(::google::protobuf::int32 value);

  // optional int32 ctrl = 86;
  inline bool has_ctrl() const;
  inline void clear_ctrl();
  static const int kCtrlFieldNumber = 86;
  inline ::google::protobuf::int32 ctrl() const;
  inline void set_ctrl(::google::protobuf::int32 value);

  // optional bytes navigatorName = 87;
  inline bool has_navigatorname() const;
  inline void clear_navigatorname();
  static const int kNavigatorNameFieldNumber = 87;
  inline const ::std::string& navigatorname() const;
  inline void set_navigatorname(const ::std::string& value);
  inline void set_navigatorname(const char* value);
  inline void set_navigatorname(const void* value, size_t size);
  inline ::std::string* mutable_navigatorname();
  inline ::std::string* release_navigatorname();
  inline void set_allocated_navigatorname(::std::string* navigatorname);

  // optional bytes navigatorTarget = 88;
  inline bool has_navigatortarget() const;
  inline void clear_navigatortarget();
  static const int kNavigatorTargetFieldNumber = 88;
  inline const ::std::string& navigatortarget() const;
  inline void set_navigatortarget(const ::std::string& value);
  inline void set_navigatortarget(const char* value);
  inline void set_navigatortarget(const void* value, size_t size);
  inline ::std::string* mutable_navigatortarget();
  inline ::std::string* release_navigatortarget();
  inline void set_allocated_navigatortarget(::std::string* navigatortarget);

  // optional bytes descTitle = 89;
  inline bool has_desctitle() const;
  inline void clear_desctitle();
  static const int kDescTitleFieldNumber = 89;
  inline const ::std::string& desctitle() const;
  inline void set_desctitle(const ::std::string& value);
  inline void set_desctitle(const char* value);
  inline void set_desctitle(const void* value, size_t size);
  inline ::std::string* mutable_desctitle();
  inline ::std::string* release_desctitle();
  inline void set_allocated_desctitle(::std::string* desctitle);

  // optional bytes funcDesc = 90;
  inline bool has_funcdesc() const;
  inline void clear_funcdesc();
  static const int kFuncDescFieldNumber = 90;
  inline const ::std::string& funcdesc() const;
  inline void set_funcdesc(const ::std::string& value);
  inline void set_funcdesc(const char* value);
  inline void set_funcdesc(const void* value, size_t size);
  inline ::std::string* mutable_funcdesc();
  inline ::std::string* release_funcdesc();
  inline void set_allocated_funcdesc(::std::string* funcdesc);

  // optional bytes desc = 91;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 91;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional bytes historyDesc = 92;
  inline bool has_historydesc() const;
  inline void clear_historydesc();
  static const int kHistoryDescFieldNumber = 92;
  inline const ::std::string& historydesc() const;
  inline void set_historydesc(const ::std::string& value);
  inline void set_historydesc(const char* value);
  inline void set_historydesc(const void* value, size_t size);
  inline ::std::string* mutable_historydesc();
  inline ::std::string* release_historydesc();
  inline void set_allocated_historydesc(::std::string* historydesc);

  // optional int32 timestamp = 93;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 93;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data.Item_Data)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_modelscale();
  inline void clear_has_modelscale();
  inline void set_has_dropitemsound();
  inline void clear_has_dropitemsound();
  inline void set_has_useitemsound();
  inline void clear_has_useitemsound();
  inline void set_has_dragitemsound();
  inline void clear_has_dragitemsound();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_isdisplayindb();
  inline void clear_has_isdisplayindb();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_subcategory();
  inline void clear_has_subcategory();
  inline void set_has_valuable();
  inline void clear_has_valuable();
  inline void set_has_precious();
  inline void clear_has_precious();
  inline void set_has_runeequipexp();
  inline void clear_has_runeequipexp();
  inline void set_has_heightoffset();
  inline void clear_has_heightoffset();
  inline void set_has_questitem();
  inline void clear_has_questitem();
  inline void set_has_cdgroup();
  inline void clear_has_cdgroup();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_bprice();
  inline void clear_has_bprice();
  inline void set_has_bpricetype();
  inline void clear_has_bpricetype();
  inline void set_has_sprice();
  inline void clear_has_sprice();
  inline void set_has_spricetype();
  inline void clear_has_spricetype();
  inline void set_has_fprice();
  inline void clear_has_fprice();
  inline void set_has_auctionprice();
  inline void clear_has_auctionprice();
  inline void set_has_nobuyback();
  inline void clear_has_nobuyback();
  inline void set_has_shopjingjierequire();
  inline void clear_has_shopjingjierequire();
  inline void set_has_bindtype();
  inline void clear_has_bindtype();
  inline void set_has_lvreq();
  inline void clear_has_lvreq();
  inline void set_has_maxlvreq();
  inline void clear_has_maxlvreq();
  inline void set_has_sexreq();
  inline void clear_has_sexreq();
  inline void set_has_allowbodytype();
  inline void clear_has_allowbodytype();
  inline void set_has_combatreq();
  inline void clear_has_combatreq();
  inline void set_has_combatequreq();
  inline void clear_has_combatequreq();
  inline void set_has_zaijureq();
  inline void clear_has_zaijureq();
  inline void set_has_contype1();
  inline void clear_has_contype1();
  inline void set_has_conid1();
  inline void clear_has_conid1();
  inline void set_has_conop1();
  inline void clear_has_conop1();
  inline void set_has_conparam1();
  inline void clear_has_conparam1();
  inline void set_has_contype2();
  inline void clear_has_contype2();
  inline void set_has_conid2();
  inline void clear_has_conid2();
  inline void set_has_conop2();
  inline void clear_has_conop2();
  inline void set_has_conparam2();
  inline void clear_has_conparam2();
  inline void set_has_contype3();
  inline void clear_has_contype3();
  inline void set_has_conid3();
  inline void clear_has_conid3();
  inline void set_has_conop3();
  inline void clear_has_conop3();
  inline void set_has_conparam3();
  inline void clear_has_conparam3();
  inline void set_has_mwrap();
  inline void clear_has_mwrap();
  inline void set_has_holdmax();
  inline void clear_has_holdmax();
  inline void set_has_tgttype();
  inline void clear_has_tgttype();
  inline void set_has_tgtdist();
  inline void clear_has_tgtdist();
  inline void set_has_ttltype();
  inline void clear_has_ttltype();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  inline void set_has_ttlexpiretype();
  inline void clear_has_ttlexpiretype();
  inline void set_has_ttlchangeid();
  inline void clear_has_ttlchangeid();
  inline void set_has_ttlchangeamount();
  inline void clear_has_ttlchangeamount();
  inline void set_has_commonexpiretime();
  inline void clear_has_commonexpiretime();
  inline void set_has_ownership();
  inline void clear_has_ownership();
  inline void set_has_renewaltype();
  inline void clear_has_renewaltype();
  inline void set_has_commonrenewaltype();
  inline void clear_has_commonrenewaltype();
  inline void set_has_mallrenewal30days();
  inline void clear_has_mallrenewal30days();
  inline void set_has_mallrenewalownership();
  inline void clear_has_mallrenewalownership();
  inline void set_has_mallrenewalforever();
  inline void clear_has_mallrenewalforever();
  inline void set_has_nosell();
  inline void clear_has_nosell();
  inline void set_has_notrade();
  inline void clear_has_notrade();
  inline void set_has_nodrop();
  inline void clear_has_nodrop();
  inline void set_has_nomail();
  inline void clear_has_nomail();
  inline void set_has_noconsign();
  inline void clear_has_noconsign();
  inline void set_has_coinconsign();
  inline void clear_has_coinconsign();
  inline void set_has_nobooth();
  inline void clear_has_nobooth();
  inline void set_has_noboothbuy();
  inline void clear_has_noboothbuy();
  inline void set_has_nostorage();
  inline void clear_has_nostorage();
  inline void set_has_norepair();
  inline void clear_has_norepair();
  inline void set_has_nolatch();
  inline void clear_has_nolatch();
  inline void set_has_noreturn();
  inline void clear_has_noreturn();
  inline void set_has_rideitemtype();
  inline void clear_has_rideitemtype();
  inline void set_has_spelltime();
  inline void clear_has_spelltime();
  inline void set_has_accordingtype();
  inline void clear_has_accordingtype();
  inline void set_has_ctrl();
  inline void clear_has_ctrl();
  inline void set_has_navigatorname();
  inline void clear_has_navigatorname();
  inline void set_has_navigatortarget();
  inline void clear_has_navigatortarget();
  inline void set_has_desctitle();
  inline void clear_has_desctitle();
  inline void set_has_funcdesc();
  inline void clear_has_funcdesc();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_historydesc();
  inline void clear_has_historydesc();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int32 modelid_;
  float modelscale_;
  ::google::protobuf::int32 dropitemsound_;
  ::google::protobuf::int32 useitemsound_;
  ::google::protobuf::int32 dragitemsound_;
  ::google::protobuf::int32 parentid_;
  ::google::protobuf::int32 isdisplayindb_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 category_;
  ::google::protobuf::int32 subcategory_;
  ::google::protobuf::int32 valuable_;
  ::google::protobuf::int32 precious_;
  ::google::protobuf::int32 runeequipexp_;
  float heightoffset_;
  ::google::protobuf::int32 questitem_;
  ::google::protobuf::int32 cdgroup_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 bprice_;
  ::google::protobuf::int32 bpricetype_;
  ::google::protobuf::int32 sprice_;
  ::google::protobuf::int32 spricetype_;
  ::google::protobuf::int32 fprice_;
  ::google::protobuf::int32 auctionprice_;
  ::google::protobuf::int32 nobuyback_;
  ::google::protobuf::int32 shopjingjierequire_;
  ::google::protobuf::int32 bindtype_;
  ::google::protobuf::int32 lvreq_;
  ::google::protobuf::int32 maxlvreq_;
  ::google::protobuf::int32 sexreq_;
  ::google::protobuf::int32 allowbodytype_;
  ::google::protobuf::int32 combatreq_;
  ::google::protobuf::int32 combatequreq_;
  ::google::protobuf::int32 zaijureq_;
  ::google::protobuf::int32 contype1_;
  ::google::protobuf::int32 conid1_;
  ::google::protobuf::int32 conop1_;
  ::google::protobuf::int32 conparam1_;
  ::google::protobuf::int32 contype2_;
  ::google::protobuf::int32 conid2_;
  ::google::protobuf::int32 conop2_;
  ::google::protobuf::int32 conparam2_;
  ::google::protobuf::int32 contype3_;
  ::google::protobuf::int32 conid3_;
  ::google::protobuf::int32 conop3_;
  ::google::protobuf::int32 conparam3_;
  ::google::protobuf::int32 mwrap_;
  ::google::protobuf::int32 holdmax_;
  ::google::protobuf::int32 tgttype_;
  float tgtdist_;
  ::google::protobuf::int32 ttltype_;
  ::google::protobuf::int32 ttl_;
  ::google::protobuf::int32 ttlexpiretype_;
  ::google::protobuf::int32 ttlchangeid_;
  ::google::protobuf::int32 ttlchangeamount_;
  ::std::string* commonexpiretime_;
  ::google::protobuf::int32 ownership_;
  ::google::protobuf::int32 renewaltype_;
  ::google::protobuf::int32 commonrenewaltype_;
  ::google::protobuf::int32 mallrenewal30days_;
  ::google::protobuf::int32 mallrenewalownership_;
  ::google::protobuf::int32 mallrenewalforever_;
  ::google::protobuf::int32 nosell_;
  ::google::protobuf::int32 notrade_;
  ::google::protobuf::int32 nodrop_;
  ::google::protobuf::int32 nomail_;
  ::google::protobuf::int32 noconsign_;
  ::google::protobuf::int32 coinconsign_;
  ::google::protobuf::int32 nobooth_;
  ::google::protobuf::int32 noboothbuy_;
  ::google::protobuf::int32 nostorage_;
  ::google::protobuf::int32 norepair_;
  ::google::protobuf::int32 nolatch_;
  ::google::protobuf::int32 noreturn_;
  ::google::protobuf::int32 rideitemtype_;
  float spelltime_;
  ::google::protobuf::int32 accordingtype_;
  ::google::protobuf::int32 ctrl_;
  ::std::string* navigatorname_;
  ::std::string* navigatortarget_;
  ::std::string* desctitle_;
  ::std::string* funcdesc_;
  ::std::string* desc_;
  ::std::string* historydesc_;
  ::google::protobuf::int32 timestamp_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static Item_Data* default_instance_;
};
// -------------------------------------------------------------------

class Skill_General_Data : public ::google::protobuf::Message {
 public:
  Skill_General_Data();
  virtual ~Skill_General_Data();

  Skill_General_Data(const Skill_General_Data& from);

  inline Skill_General_Data& operator=(const Skill_General_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Skill_General_Data& default_instance();

  void Swap(Skill_General_Data* other);

  // implements Message ----------------------------------------------

  Skill_General_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Skill_General_Data& from);
  void MergeFrom(const Skill_General_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 spellActState = 1;
  inline bool has_spellactstate() const;
  inline void clear_spellactstate();
  static const int kSpellActStateFieldNumber = 1;
  inline ::google::protobuf::int32 spellactstate() const;
  inline void set_spellactstate(::google::protobuf::int32 value);

  // optional int32 castType = 2;
  inline bool has_casttype() const;
  inline void clear_casttype();
  static const int kCastTypeFieldNumber = 2;
  inline ::google::protobuf::int32 casttype() const;
  inline void set_casttype(::google::protobuf::int32 value);

  // optional float spellTime = 3;
  inline bool has_spelltime() const;
  inline void clear_spelltime();
  static const int kSpellTimeFieldNumber = 3;
  inline float spelltime() const;
  inline void set_spelltime(float value);

  // optional bytes seAfterCalc = 4;
  inline bool has_seaftercalc() const;
  inline void clear_seaftercalc();
  static const int kSeAfterCalcFieldNumber = 4;
  inline const ::std::string& seaftercalc() const;
  inline void set_seaftercalc(const ::std::string& value);
  inline void set_seaftercalc(const char* value);
  inline void set_seaftercalc(const void* value, size_t size);
  inline ::std::string* mutable_seaftercalc();
  inline ::std::string* release_seaftercalc();
  inline void set_allocated_seaftercalc(::std::string* seaftercalc);

  // optional bytes tgtSelectStrategy = 5;
  inline bool has_tgtselectstrategy() const;
  inline void clear_tgtselectstrategy();
  static const int kTgtSelectStrategyFieldNumber = 5;
  inline const ::std::string& tgtselectstrategy() const;
  inline void set_tgtselectstrategy(const ::std::string& value);
  inline void set_tgtselectstrategy(const char* value);
  inline void set_tgtselectstrategy(const void* value, size_t size);
  inline ::std::string* mutable_tgtselectstrategy();
  inline ::std::string* release_tgtselectstrategy();
  inline void set_allocated_tgtselectstrategy(::std::string* tgtselectstrategy);

  // optional bytes mainEnhEff = 6;
  inline bool has_mainenheff() const;
  inline void clear_mainenheff();
  static const int kMainEnhEffFieldNumber = 6;
  inline const ::std::string& mainenheff() const;
  inline void set_mainenheff(const ::std::string& value);
  inline void set_mainenheff(const char* value);
  inline void set_mainenheff(const void* value, size_t size);
  inline ::std::string* mutable_mainenheff();
  inline ::std::string* release_mainenheff();
  inline void set_allocated_mainenheff(::std::string* mainenheff);

  // optional int32 checkMoveId = 7;
  inline bool has_checkmoveid() const;
  inline void clear_checkmoveid();
  static const int kCheckMoveIdFieldNumber = 7;
  inline ::google::protobuf::int32 checkmoveid() const;
  inline void set_checkmoveid(::google::protobuf::int32 value);

  // optional int32 clientCalcNum = 8;
  inline bool has_clientcalcnum() const;
  inline void clear_clientcalcnum();
  static const int kClientCalcNumFieldNumber = 8;
  inline ::google::protobuf::int32 clientcalcnum() const;
  inline void set_clientcalcnum(::google::protobuf::int32 value);

  // optional int32 showIndicator = 9;
  inline bool has_showindicator() const;
  inline void clear_showindicator();
  static const int kShowIndicatorFieldNumber = 9;
  inline ::google::protobuf::int32 showindicator() const;
  inline void set_showindicator(::google::protobuf::int32 value);

  // optional int32 lv = 10;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 10;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional bytes creations = 11;
  inline bool has_creations() const;
  inline void clear_creations();
  static const int kCreationsFieldNumber = 11;
  inline const ::std::string& creations() const;
  inline void set_creations(const ::std::string& value);
  inline void set_creations(const char* value);
  inline void set_creations(const void* value, size_t size);
  inline ::std::string* mutable_creations();
  inline ::std::string* release_creations();
  inline void set_allocated_creations(::std::string* creations);

  // optional int32 learnLv = 12;
  inline bool has_learnlv() const;
  inline void clear_learnlv();
  static const int kLearnLvFieldNumber = 12;
  inline ::google::protobuf::int32 learnlv() const;
  inline void set_learnlv(::google::protobuf::int32 value);

  // optional bytes graph4 = 13;
  inline bool has_graph4() const;
  inline void clear_graph4();
  static const int kGraph4FieldNumber = 13;
  inline const ::std::string& graph4() const;
  inline void set_graph4(const ::std::string& value);
  inline void set_graph4(const char* value);
  inline void set_graph4(const void* value, size_t size);
  inline ::std::string* mutable_graph4();
  inline ::std::string* release_graph4();
  inline void set_allocated_graph4(::std::string* graph4);

  // optional int32 castBreakable = 14;
  inline bool has_castbreakable() const;
  inline void clear_castbreakable();
  static const int kCastBreakableFieldNumber = 14;
  inline ::google::protobuf::int32 castbreakable() const;
  inline void set_castbreakable(::google::protobuf::int32 value);

  // optional bytes selfNoStates = 15;
  inline bool has_selfnostates() const;
  inline void clear_selfnostates();
  static const int kSelfNoStatesFieldNumber = 15;
  inline const ::std::string& selfnostates() const;
  inline void set_selfnostates(const ::std::string& value);
  inline void set_selfnostates(const char* value);
  inline void set_selfnostates(const void* value, size_t size);
  inline ::std::string* mutable_selfnostates();
  inline ::std::string* release_selfnostates();
  inline void set_allocated_selfnostates(::std::string* selfnostates);

  // optional int32 school = 16;
  inline bool has_school() const;
  inline void clear_school();
  static const int kSchoolFieldNumber = 16;
  inline ::google::protobuf::int32 school() const;
  inline void set_school(::google::protobuf::int32 value);

  // optional float flySpeed = 17;
  inline bool has_flyspeed() const;
  inline void clear_flyspeed();
  static const int kFlySpeedFieldNumber = 17;
  inline float flyspeed() const;
  inline void set_flyspeed(float value);

  // optional bytes name = 18;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 18;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes collideHeight = 19;
  inline bool has_collideheight() const;
  inline void clear_collideheight();
  static const int kCollideHeightFieldNumber = 19;
  inline const ::std::string& collideheight() const;
  inline void set_collideheight(const ::std::string& value);
  inline void set_collideheight(const char* value);
  inline void set_collideheight(const void* value, size_t size);
  inline ::std::string* mutable_collideheight();
  inline ::std::string* release_collideheight();
  inline void set_allocated_collideheight(::std::string* collideheight);

  // optional int32 spellActAura = 20;
  inline bool has_spellactaura() const;
  inline void clear_spellactaura();
  static const int kSpellActAuraFieldNumber = 20;
  inline ::google::protobuf::int32 spellactaura() const;
  inline void set_spellactaura(::google::protobuf::int32 value);

  // optional int32 skillType = 21;
  inline bool has_skilltype() const;
  inline void clear_skilltype();
  static const int kSkillTypeFieldNumber = 21;
  inline ::google::protobuf::int32 skilltype() const;
  inline void set_skilltype(::google::protobuf::int32 value);

  // optional int32 guidevpNeed = 22;
  inline bool has_guidevpneed() const;
  inline void clear_guidevpneed();
  static const int kGuidevpNeedFieldNumber = 22;
  inline ::google::protobuf::int32 guidevpneed() const;
  inline void set_guidevpneed(::google::protobuf::int32 value);

  // optional float notTurnTime = 23;
  inline bool has_notturntime() const;
  inline void clear_notturntime();
  static const int kNotTurnTimeFieldNumber = 23;
  inline float notturntime() const;
  inline void set_notturntime(float value);

  // optional float noAtkTime = 24;
  inline bool has_noatktime() const;
  inline void clear_noatktime();
  static const int kNoAtkTimeFieldNumber = 24;
  inline float noatktime() const;
  inline void set_noatktime(float value);

  // optional int32 isAoe = 25;
  inline bool has_isaoe() const;
  inline void clear_isaoe();
  static const int kIsAoeFieldNumber = 25;
  inline ::google::protobuf::int32 isaoe() const;
  inline void set_isaoe(::google::protobuf::int32 value);

  // optional int32 ammoNeed = 26;
  inline bool has_ammoneed() const;
  inline void clear_ammoneed();
  static const int kAmmoNeedFieldNumber = 26;
  inline ::google::protobuf::int32 ammoneed() const;
  inline void set_ammoneed(::google::protobuf::int32 value);

  // optional float movedelay = 27;
  inline bool has_movedelay() const;
  inline void clear_movedelay();
  static const int kMovedelayFieldNumber = 27;
  inline float movedelay() const;
  inline void set_movedelay(float value);

  // optional bytes preAmmoType = 28;
  inline bool has_preammotype() const;
  inline void clear_preammotype();
  static const int kPreAmmoTypeFieldNumber = 28;
  inline const ::std::string& preammotype() const;
  inline void set_preammotype(const ::std::string& value);
  inline void set_preammotype(const char* value);
  inline void set_preammotype(const void* value, size_t size);
  inline ::std::string* mutable_preammotype();
  inline ::std::string* release_preammotype();
  inline void set_allocated_preammotype(::std::string* preammotype);

  // optional int32 hideCastBar = 29;
  inline bool has_hidecastbar() const;
  inline void clear_hidecastbar();
  static const int kHideCastBarFieldNumber = 29;
  inline ::google::protobuf::int32 hidecastbar() const;
  inline void set_hidecastbar(::google::protobuf::int32 value);

  // optional int32 tgtSelf = 30;
  inline bool has_tgtself() const;
  inline void clear_tgtself();
  static const int kTgtSelfFieldNumber = 30;
  inline ::google::protobuf::int32 tgtself() const;
  inline void set_tgtself(::google::protobuf::int32 value);

  // optional bytes uiShape = 31;
  inline bool has_uishape() const;
  inline void clear_uishape();
  static const int kUiShapeFieldNumber = 31;
  inline const ::std::string& uishape() const;
  inline void set_uishape(const ::std::string& value);
  inline void set_uishape(const char* value);
  inline void set_uishape(const void* value, size_t size);
  inline ::std::string* mutable_uishape();
  inline ::std::string* release_uishape();
  inline void set_allocated_uishape(::std::string* uishape);

  // optional float indicatorTime = 32;
  inline bool has_indicatortime() const;
  inline void clear_indicatortime();
  static const int kIndicatorTimeFieldNumber = 32;
  inline float indicatortime() const;
  inline void set_indicatortime(float value);

  // optional float notMoveTime = 33;
  inline bool has_notmovetime() const;
  inline void clear_notmovetime();
  static const int kNotMoveTimeFieldNumber = 33;
  inline float notmovetime() const;
  inline void set_notmovetime(float value);

  // optional int32 spellCharge = 34;
  inline bool has_spellcharge() const;
  inline void clear_spellcharge();
  static const int kSpellChargeFieldNumber = 34;
  inline ::google::protobuf::int32 spellcharge() const;
  inline void set_spellcharge(::google::protobuf::int32 value);

  // optional bytes selfStates = 35;
  inline bool has_selfstates() const;
  inline void clear_selfstates();
  static const int kSelfStatesFieldNumber = 35;
  inline const ::std::string& selfstates() const;
  inline void set_selfstates(const ::std::string& value);
  inline void set_selfstates(const char* value);
  inline void set_selfstates(const void* value, size_t size);
  inline ::std::string* mutable_selfstates();
  inline ::std::string* release_selfstates();
  inline void set_allocated_selfstates(::std::string* selfstates);

  // optional int32 preSpell = 36;
  inline bool has_prespell() const;
  inline void clear_prespell();
  static const int kPreSpellFieldNumber = 36;
  inline ::google::protobuf::int32 prespell() const;
  inline void set_prespell(::google::protobuf::int32 value);

  // optional bytes rangeMax = 37;
  inline bool has_rangemax() const;
  inline void clear_rangemax();
  static const int kRangeMaxFieldNumber = 37;
  inline const ::std::string& rangemax() const;
  inline void set_rangemax(const ::std::string& value);
  inline void set_rangemax(const char* value);
  inline void set_rangemax(const void* value, size_t size);
  inline ::std::string* mutable_rangemax();
  inline ::std::string* release_rangemax();
  inline void set_allocated_rangemax(::std::string* rangemax);

  // optional int32 autoUseSkill = 38;
  inline bool has_autouseskill() const;
  inline void clear_autouseskill();
  static const int kAutoUseSkillFieldNumber = 38;
  inline ::google::protobuf::int32 autouseskill() const;
  inline void set_autouseskill(::google::protobuf::int32 value);

  // optional float moveSpeed = 39;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 39;
  inline float movespeed() const;
  inline void set_movespeed(float value);

  // optional int32 tgtAllType = 40;
  inline bool has_tgtalltype() const;
  inline void clear_tgtalltype();
  static const int kTgtAllTypeFieldNumber = 40;
  inline ::google::protobuf::int32 tgtalltype() const;
  inline void set_tgtalltype(::google::protobuf::int32 value);

  // optional int32 rangeMin = 41;
  inline bool has_rangemin() const;
  inline void clear_rangemin();
  static const int kRangeMinFieldNumber = 41;
  inline ::google::protobuf::int32 rangemin() const;
  inline void set_rangemin(::google::protobuf::int32 value);

  // optional bytes circleShape = 42;
  inline bool has_circleshape() const;
  inline void clear_circleshape();
  static const int kCircleShapeFieldNumber = 42;
  inline const ::std::string& circleshape() const;
  inline void set_circleshape(const ::std::string& value);
  inline void set_circleshape(const char* value);
  inline void set_circleshape(const void* value, size_t size);
  inline ::std::string* mutable_circleshape();
  inline ::std::string* release_circleshape();
  inline void set_allocated_circleshape(::std::string* circleshape);

  // optional int32 spellMoveable = 43;
  inline bool has_spellmoveable() const;
  inline void clear_spellmoveable();
  static const int kSpellMoveableFieldNumber = 43;
  inline ::google::protobuf::int32 spellmoveable() const;
  inline void set_spellmoveable(::google::protobuf::int32 value);

  // optional float wsAdd2 = 44;
  inline bool has_wsadd2() const;
  inline void clear_wsadd2();
  static const int kWsAdd2FieldNumber = 44;
  inline float wsadd2() const;
  inline void set_wsadd2(float value);

  // optional int32 wsAdd1 = 45;
  inline bool has_wsadd1() const;
  inline void clear_wsadd1();
  static const int kWsAdd1FieldNumber = 45;
  inline ::google::protobuf::int32 wsadd1() const;
  inline void set_wsadd1(::google::protobuf::int32 value);

  // optional int32 restoreDelayCd = 46;
  inline bool has_restoredelaycd() const;
  inline void clear_restoredelaycd();
  static const int kRestoreDelayCdFieldNumber = 46;
  inline ::google::protobuf::int32 restoredelaycd() const;
  inline void set_restoredelaycd(::google::protobuf::int32 value);

  // optional int32 useableInStub = 47;
  inline bool has_useableinstub() const;
  inline void clear_useableinstub();
  static const int kUseableInStubFieldNumber = 47;
  inline ::google::protobuf::int32 useableinstub() const;
  inline void set_useableinstub(::google::protobuf::int32 value);

  // optional int32 selfHpMorePct = 48;
  inline bool has_selfhpmorepct() const;
  inline void clear_selfhpmorepct();
  static const int kSelfHpMorePctFieldNumber = 48;
  inline ::google::protobuf::int32 selfhpmorepct() const;
  inline void set_selfhpmorepct(::google::protobuf::int32 value);

  // optional int32 noTgt = 49;
  inline bool has_notgt() const;
  inline void clear_notgt();
  static const int kNoTgtFieldNumber = 49;
  inline ::google::protobuf::int32 notgt() const;
  inline void set_notgt(::google::protobuf::int32 value);

  // optional int32 wsNeed1 = 50;
  inline bool has_wsneed1() const;
  inline void clear_wsneed1();
  static const int kWsNeed1FieldNumber = 50;
  inline ::google::protobuf::int32 wsneed1() const;
  inline void set_wsneed1(::google::protobuf::int32 value);

  // optional int32 wsNeed2 = 51;
  inline bool has_wsneed2() const;
  inline void clear_wsneed2();
  static const int kWsNeed2FieldNumber = 51;
  inline ::google::protobuf::int32 wsneed2() const;
  inline void set_wsneed2(::google::protobuf::int32 value);

  // optional int32 tgtSelfFriendType = 52;
  inline bool has_tgtselffriendtype() const;
  inline void clear_tgtselffriendtype();
  static const int kTgtSelfFriendTypeFieldNumber = 52;
  inline ::google::protobuf::int32 tgtselffriendtype() const;
  inline void set_tgtselffriendtype(::google::protobuf::int32 value);

  // optional int32 tgtFriendType = 53;
  inline bool has_tgtfriendtype() const;
  inline void clear_tgtfriendtype();
  static const int kTgtFriendTypeFieldNumber = 53;
  inline ::google::protobuf::int32 tgtfriendtype() const;
  inline void set_tgtfriendtype(::google::protobuf::int32 value);

  // optional int32 moveDelayNotAffectCalc = 54;
  inline bool has_movedelaynotaffectcalc() const;
  inline void clear_movedelaynotaffectcalc();
  static const int kMoveDelayNotAffectCalcFieldNumber = 54;
  inline ::google::protobuf::int32 movedelaynotaffectcalc() const;
  inline void set_movedelaynotaffectcalc(::google::protobuf::int32 value);

  // optional float cd = 55;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 55;
  inline float cd() const;
  inline void set_cd(float value);

  // optional int32 flyNoDelay = 56;
  inline bool has_flynodelay() const;
  inline void clear_flynodelay();
  static const int kFlyNoDelayFieldNumber = 56;
  inline ::google::protobuf::int32 flynodelay() const;
  inline void set_flynodelay(::google::protobuf::int32 value);

  // optional bytes detailEff2 = 57;
  inline bool has_detaileff2() const;
  inline void clear_detaileff2();
  static const int kDetailEff2FieldNumber = 57;
  inline const ::std::string& detaileff2() const;
  inline void set_detaileff2(const ::std::string& value);
  inline void set_detaileff2(const char* value);
  inline void set_detaileff2(const void* value, size_t size);
  inline ::std::string* mutable_detaileff2();
  inline ::std::string* release_detaileff2();
  inline void set_allocated_detaileff2(::std::string* detaileff2);

  // optional bytes castDelay = 58;
  inline bool has_castdelay() const;
  inline void clear_castdelay();
  static const int kCastDelayFieldNumber = 58;
  inline const ::std::string& castdelay() const;
  inline void set_castdelay(const ::std::string& value);
  inline void set_castdelay(const char* value);
  inline void set_castdelay(const void* value, size_t size);
  inline ::std::string* mutable_castdelay();
  inline ::std::string* release_castdelay();
  inline void set_allocated_castdelay(::std::string* castdelay);

  // optional int32 tgtSelfEnemyType = 59;
  inline bool has_tgtselfenemytype() const;
  inline void clear_tgtselfenemytype();
  static const int kTgtSelfEnemyTypeFieldNumber = 59;
  inline ::google::protobuf::int32 tgtselfenemytype() const;
  inline void set_tgtselfenemytype(::google::protobuf::int32 value);

  // optional int32 switchState = 60;
  inline bool has_switchstate() const;
  inline void clear_switchstate();
  static const int kSwitchStateFieldNumber = 60;
  inline ::google::protobuf::int32 switchstate() const;
  inline void set_switchstate(::google::protobuf::int32 value);

  // optional bytes detailEff3 = 61;
  inline bool has_detaileff3() const;
  inline void clear_detaileff3();
  static const int kDetailEff3FieldNumber = 61;
  inline const ::std::string& detaileff3() const;
  inline void set_detaileff3(const ::std::string& value);
  inline void set_detaileff3(const char* value);
  inline void set_detaileff3(const void* value, size_t size);
  inline ::std::string* mutable_detaileff3();
  inline ::std::string* release_detaileff3();
  inline void set_allocated_detaileff3(::std::string* detaileff3);

  // optional float castTime = 62;
  inline bool has_casttime() const;
  inline void clear_casttime();
  static const int kCastTimeFieldNumber = 62;
  inline float casttime() const;
  inline void set_casttime(float value);

  // optional bytes detailEff1 = 63;
  inline bool has_detaileff1() const;
  inline void clear_detaileff1();
  static const int kDetailEff1FieldNumber = 63;
  inline const ::std::string& detaileff1() const;
  inline void set_detaileff1(const ::std::string& value);
  inline void set_detaileff1(const char* value);
  inline void set_detaileff1(const void* value, size_t size);
  inline ::std::string* mutable_detaileff1();
  inline ::std::string* release_detaileff1();
  inline void set_allocated_detaileff1(::std::string* detaileff1);

  // optional int32 tgtSelectState = 64;
  inline bool has_tgtselectstate() const;
  inline void clear_tgtselectstate();
  static const int kTgtSelectStateFieldNumber = 64;
  inline ::google::protobuf::int32 tgtselectstate() const;
  inline void set_tgtselectstate(::google::protobuf::int32 value);

  // optional int32 wsType = 65;
  inline bool has_wstype() const;
  inline void clear_wstype();
  static const int kWsTypeFieldNumber = 65;
  inline ::google::protobuf::int32 wstype() const;
  inline void set_wstype(::google::protobuf::int32 value);

  // optional bytes describe = 66;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 66;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const void* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional bytes addWsEff = 67;
  inline bool has_addwseff() const;
  inline void clear_addwseff();
  static const int kAddWsEffFieldNumber = 67;
  inline const ::std::string& addwseff() const;
  inline void set_addwseff(const ::std::string& value);
  inline void set_addwseff(const char* value);
  inline void set_addwseff(const void* value, size_t size);
  inline ::std::string* mutable_addwseff();
  inline ::std::string* release_addwseff();
  inline void set_allocated_addwseff(::std::string* addwseff);

  // optional int32 learnGold = 68;
  inline bool has_learngold() const;
  inline void clear_learngold();
  static const int kLearnGoldFieldNumber = 68;
  inline ::google::protobuf::int32 learngold() const;
  inline void set_learngold(::google::protobuf::int32 value);

  // optional bytes consumEquipNeed = 69;
  inline bool has_consumequipneed() const;
  inline void clear_consumequipneed();
  static const int kConsumEquipNeedFieldNumber = 69;
  inline const ::std::string& consumequipneed() const;
  inline void set_consumequipneed(const ::std::string& value);
  inline void set_consumequipneed(const char* value);
  inline void set_consumequipneed(const void* value, size_t size);
  inline ::std::string* mutable_consumequipneed();
  inline ::std::string* release_consumequipneed();
  inline void set_allocated_consumequipneed(::std::string* consumequipneed);

  // optional bytes auras = 70;
  inline bool has_auras() const;
  inline void clear_auras();
  static const int kAurasFieldNumber = 70;
  inline const ::std::string& auras() const;
  inline void set_auras(const ::std::string& value);
  inline void set_auras(const char* value);
  inline void set_auras(const void* value, size_t size);
  inline ::std::string* mutable_auras();
  inline ::std::string* release_auras();
  inline void set_allocated_auras(::std::string* auras);

  // optional int32 mpNeed = 71;
  inline bool has_mpneed() const;
  inline void clear_mpneed();
  static const int kMpNeedFieldNumber = 71;
  inline ::google::protobuf::int32 mpneed() const;
  inline void set_mpneed(::google::protobuf::int32 value);

  // optional int32 spellBreakable = 72;
  inline bool has_spellbreakable() const;
  inline void clear_spellbreakable();
  static const int kSpellBreakableFieldNumber = 72;
  inline ::google::protobuf::int32 spellbreakable() const;
  inline void set_spellbreakable(::google::protobuf::int32 value);

  // optional bytes mainEff = 73;
  inline bool has_maineff() const;
  inline void clear_maineff();
  static const int kMainEffFieldNumber = 73;
  inline const ::std::string& maineff() const;
  inline void set_maineff(const ::std::string& value);
  inline void set_maineff(const char* value);
  inline void set_maineff(const void* value, size_t size);
  inline ::std::string* mutable_maineff();
  inline ::std::string* release_maineff();
  inline void set_allocated_maineff(::std::string* maineff);

  // optional int32 noArrow = 74;
  inline bool has_noarrow() const;
  inline void clear_noarrow();
  static const int kNoArrowFieldNumber = 74;
  inline ::google::protobuf::int32 noarrow() const;
  inline void set_noarrow(::google::protobuf::int32 value);

  // optional int32 moveid = 75;
  inline bool has_moveid() const;
  inline void clear_moveid();
  static const int kMoveidFieldNumber = 75;
  inline ::google::protobuf::int32 moveid() const;
  inline void set_moveid(::google::protobuf::int32 value);

  // optional int32 id = 76;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 76;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 tgtPos = 77;
  inline bool has_tgtpos() const;
  inline void clear_tgtpos();
  static const int kTgtPosFieldNumber = 77;
  inline ::google::protobuf::int32 tgtpos() const;
  inline void set_tgtpos(::google::protobuf::int32 value);

  // optional float gcd = 78;
  inline bool has_gcd() const;
  inline void clear_gcd();
  static const int kGcdFieldNumber = 78;
  inline float gcd() const;
  inline void set_gcd(float value);

  // optional int32 tgtNowPos = 79;
  inline bool has_tgtnowpos() const;
  inline void clear_tgtnowpos();
  static const int kTgtNowPosFieldNumber = 79;
  inline ::google::protobuf::int32 tgtnowpos() const;
  inline void set_tgtnowpos(::google::protobuf::int32 value);

  // optional bytes graph2 = 80;
  inline bool has_graph2() const;
  inline void clear_graph2();
  static const int kGraph2FieldNumber = 80;
  inline const ::std::string& graph2() const;
  inline void set_graph2(const ::std::string& value);
  inline void set_graph2(const char* value);
  inline void set_graph2(const void* value, size_t size);
  inline ::std::string* mutable_graph2();
  inline ::std::string* release_graph2();
  inline void set_allocated_graph2(::std::string* graph2);

  // optional bytes graph3 = 81;
  inline bool has_graph3() const;
  inline void clear_graph3();
  static const int kGraph3FieldNumber = 81;
  inline const ::std::string& graph3() const;
  inline void set_graph3(const ::std::string& value);
  inline void set_graph3(const char* value);
  inline void set_graph3(const void* value, size_t size);
  inline ::std::string* mutable_graph3();
  inline ::std::string* release_graph3();
  inline void set_allocated_graph3(::std::string* graph3);

  // optional int32 goOnZaijuNo = 82;
  inline bool has_goonzaijuno() const;
  inline void clear_goonzaijuno();
  static const int kGoOnZaijuNoFieldNumber = 82;
  inline ::google::protobuf::int32 goonzaijuno() const;
  inline void set_goonzaijuno(::google::protobuf::int32 value);

  // optional bytes graph1 = 83;
  inline bool has_graph1() const;
  inline void clear_graph1();
  static const int kGraph1FieldNumber = 83;
  inline const ::std::string& graph1() const;
  inline void set_graph1(const ::std::string& value);
  inline void set_graph1(const char* value);
  inline void set_graph1(const void* value, size_t size);
  inline ::std::string* mutable_graph1();
  inline ::std::string* release_graph1();
  inline void set_allocated_graph1(::std::string* graph1);

  // optional bytes details = 84;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 84;
  inline const ::std::string& details() const;
  inline void set_details(const ::std::string& value);
  inline void set_details(const char* value);
  inline void set_details(const void* value, size_t size);
  inline ::std::string* mutable_details();
  inline ::std::string* release_details();
  inline void set_allocated_details(::std::string* details);

  // optional float castInterval = 85;
  inline bool has_castinterval() const;
  inline void clear_castinterval();
  static const int kCastIntervalFieldNumber = 85;
  inline float castinterval() const;
  inline void set_castinterval(float value);

  // optional int32 sid = 86;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 86;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional int32 selfHpLessPct = 87;
  inline bool has_selfhplesspct() const;
  inline void clear_selfhplesspct();
  static const int kSelfHpLessPctFieldNumber = 87;
  inline ::google::protobuf::int32 selfhplesspct() const;
  inline void set_selfhplesspct(::google::protobuf::int32 value);

  // optional int32 tgtEnemyType = 88;
  inline bool has_tgtenemytype() const;
  inline void clear_tgtenemytype();
  static const int kTgtEnemyTypeFieldNumber = 88;
  inline ::google::protobuf::int32 tgtenemytype() const;
  inline void set_tgtenemytype(::google::protobuf::int32 value);

  // optional int32 guidempNeed = 89;
  inline bool has_guidempneed() const;
  inline void clear_guidempneed();
  static const int kGuidempNeedFieldNumber = 89;
  inline ::google::protobuf::int32 guidempneed() const;
  inline void set_guidempneed(::google::protobuf::int32 value);

  // optional int32 facePos = 90;
  inline bool has_facepos() const;
  inline void clear_facepos();
  static const int kFacePosFieldNumber = 90;
  inline ::google::protobuf::int32 facepos() const;
  inline void set_facepos(::google::protobuf::int32 value);

  // optional int32 vpNeed = 91;
  inline bool has_vpneed() const;
  inline void clear_vpneed();
  static const int kVpNeedFieldNumber = 91;
  inline ::google::protobuf::int32 vpneed() const;
  inline void set_vpneed(::google::protobuf::int32 value);

  // optional int32 castMoveType = 92;
  inline bool has_castmovetype() const;
  inline void clear_castmovetype();
  static const int kCastMoveTypeFieldNumber = 92;
  inline ::google::protobuf::int32 castmovetype() const;
  inline void set_castmovetype(::google::protobuf::int32 value);

  // optional bytes wpSkillType = 93;
  inline bool has_wpskilltype() const;
  inline void clear_wpskilltype();
  static const int kWpSkillTypeFieldNumber = 93;
  inline const ::std::string& wpskilltype() const;
  inline void set_wpskilltype(const ::std::string& value);
  inline void set_wpskilltype(const char* value);
  inline void set_wpskilltype(const void* value, size_t size);
  inline ::std::string* mutable_wpskilltype();
  inline ::std::string* release_wpskilltype();
  inline void set_allocated_wpskilltype(::std::string* wpskilltype);

  // optional bytes chargeStgs = 94;
  inline bool has_chargestgs() const;
  inline void clear_chargestgs();
  static const int kChargeStgsFieldNumber = 94;
  inline const ::std::string& chargestgs() const;
  inline void set_chargestgs(const ::std::string& value);
  inline void set_chargestgs(const char* value);
  inline void set_chargestgs(const void* value, size_t size);
  inline ::std::string* mutable_chargestgs();
  inline ::std::string* release_chargestgs();
  inline void set_allocated_chargestgs(::std::string* chargestgs);

  // optional bytes se = 95;
  inline bool has_se() const;
  inline void clear_se();
  static const int kSeFieldNumber = 95;
  inline const ::std::string& se() const;
  inline void set_se(const ::std::string& value);
  inline void set_se(const char* value);
  inline void set_se(const void* value, size_t size);
  inline ::std::string* mutable_se();
  inline ::std::string* release_se();
  inline void set_allocated_se(::std::string* se);

  // optional bytes effects = 96;
  inline bool has_effects() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 96;
  inline const ::std::string& effects() const;
  inline void set_effects(const ::std::string& value);
  inline void set_effects(const char* value);
  inline void set_effects(const void* value, size_t size);
  inline ::std::string* mutable_effects();
  inline ::std::string* release_effects();
  inline void set_allocated_effects(::std::string* effects);

  // @@protoc_insertion_point(class_scope:data.Skill_General_Data)
 private:
  inline void set_has_spellactstate();
  inline void clear_has_spellactstate();
  inline void set_has_casttype();
  inline void clear_has_casttype();
  inline void set_has_spelltime();
  inline void clear_has_spelltime();
  inline void set_has_seaftercalc();
  inline void clear_has_seaftercalc();
  inline void set_has_tgtselectstrategy();
  inline void clear_has_tgtselectstrategy();
  inline void set_has_mainenheff();
  inline void clear_has_mainenheff();
  inline void set_has_checkmoveid();
  inline void clear_has_checkmoveid();
  inline void set_has_clientcalcnum();
  inline void clear_has_clientcalcnum();
  inline void set_has_showindicator();
  inline void clear_has_showindicator();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_creations();
  inline void clear_has_creations();
  inline void set_has_learnlv();
  inline void clear_has_learnlv();
  inline void set_has_graph4();
  inline void clear_has_graph4();
  inline void set_has_castbreakable();
  inline void clear_has_castbreakable();
  inline void set_has_selfnostates();
  inline void clear_has_selfnostates();
  inline void set_has_school();
  inline void clear_has_school();
  inline void set_has_flyspeed();
  inline void clear_has_flyspeed();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_collideheight();
  inline void clear_has_collideheight();
  inline void set_has_spellactaura();
  inline void clear_has_spellactaura();
  inline void set_has_skilltype();
  inline void clear_has_skilltype();
  inline void set_has_guidevpneed();
  inline void clear_has_guidevpneed();
  inline void set_has_notturntime();
  inline void clear_has_notturntime();
  inline void set_has_noatktime();
  inline void clear_has_noatktime();
  inline void set_has_isaoe();
  inline void clear_has_isaoe();
  inline void set_has_ammoneed();
  inline void clear_has_ammoneed();
  inline void set_has_movedelay();
  inline void clear_has_movedelay();
  inline void set_has_preammotype();
  inline void clear_has_preammotype();
  inline void set_has_hidecastbar();
  inline void clear_has_hidecastbar();
  inline void set_has_tgtself();
  inline void clear_has_tgtself();
  inline void set_has_uishape();
  inline void clear_has_uishape();
  inline void set_has_indicatortime();
  inline void clear_has_indicatortime();
  inline void set_has_notmovetime();
  inline void clear_has_notmovetime();
  inline void set_has_spellcharge();
  inline void clear_has_spellcharge();
  inline void set_has_selfstates();
  inline void clear_has_selfstates();
  inline void set_has_prespell();
  inline void clear_has_prespell();
  inline void set_has_rangemax();
  inline void clear_has_rangemax();
  inline void set_has_autouseskill();
  inline void clear_has_autouseskill();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_tgtalltype();
  inline void clear_has_tgtalltype();
  inline void set_has_rangemin();
  inline void clear_has_rangemin();
  inline void set_has_circleshape();
  inline void clear_has_circleshape();
  inline void set_has_spellmoveable();
  inline void clear_has_spellmoveable();
  inline void set_has_wsadd2();
  inline void clear_has_wsadd2();
  inline void set_has_wsadd1();
  inline void clear_has_wsadd1();
  inline void set_has_restoredelaycd();
  inline void clear_has_restoredelaycd();
  inline void set_has_useableinstub();
  inline void clear_has_useableinstub();
  inline void set_has_selfhpmorepct();
  inline void clear_has_selfhpmorepct();
  inline void set_has_notgt();
  inline void clear_has_notgt();
  inline void set_has_wsneed1();
  inline void clear_has_wsneed1();
  inline void set_has_wsneed2();
  inline void clear_has_wsneed2();
  inline void set_has_tgtselffriendtype();
  inline void clear_has_tgtselffriendtype();
  inline void set_has_tgtfriendtype();
  inline void clear_has_tgtfriendtype();
  inline void set_has_movedelaynotaffectcalc();
  inline void clear_has_movedelaynotaffectcalc();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_flynodelay();
  inline void clear_has_flynodelay();
  inline void set_has_detaileff2();
  inline void clear_has_detaileff2();
  inline void set_has_castdelay();
  inline void clear_has_castdelay();
  inline void set_has_tgtselfenemytype();
  inline void clear_has_tgtselfenemytype();
  inline void set_has_switchstate();
  inline void clear_has_switchstate();
  inline void set_has_detaileff3();
  inline void clear_has_detaileff3();
  inline void set_has_casttime();
  inline void clear_has_casttime();
  inline void set_has_detaileff1();
  inline void clear_has_detaileff1();
  inline void set_has_tgtselectstate();
  inline void clear_has_tgtselectstate();
  inline void set_has_wstype();
  inline void clear_has_wstype();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_addwseff();
  inline void clear_has_addwseff();
  inline void set_has_learngold();
  inline void clear_has_learngold();
  inline void set_has_consumequipneed();
  inline void clear_has_consumequipneed();
  inline void set_has_auras();
  inline void clear_has_auras();
  inline void set_has_mpneed();
  inline void clear_has_mpneed();
  inline void set_has_spellbreakable();
  inline void clear_has_spellbreakable();
  inline void set_has_maineff();
  inline void clear_has_maineff();
  inline void set_has_noarrow();
  inline void clear_has_noarrow();
  inline void set_has_moveid();
  inline void clear_has_moveid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tgtpos();
  inline void clear_has_tgtpos();
  inline void set_has_gcd();
  inline void clear_has_gcd();
  inline void set_has_tgtnowpos();
  inline void clear_has_tgtnowpos();
  inline void set_has_graph2();
  inline void clear_has_graph2();
  inline void set_has_graph3();
  inline void clear_has_graph3();
  inline void set_has_goonzaijuno();
  inline void clear_has_goonzaijuno();
  inline void set_has_graph1();
  inline void clear_has_graph1();
  inline void set_has_details();
  inline void clear_has_details();
  inline void set_has_castinterval();
  inline void clear_has_castinterval();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_selfhplesspct();
  inline void clear_has_selfhplesspct();
  inline void set_has_tgtenemytype();
  inline void clear_has_tgtenemytype();
  inline void set_has_guidempneed();
  inline void clear_has_guidempneed();
  inline void set_has_facepos();
  inline void clear_has_facepos();
  inline void set_has_vpneed();
  inline void clear_has_vpneed();
  inline void set_has_castmovetype();
  inline void clear_has_castmovetype();
  inline void set_has_wpskilltype();
  inline void clear_has_wpskilltype();
  inline void set_has_chargestgs();
  inline void clear_has_chargestgs();
  inline void set_has_se();
  inline void clear_has_se();
  inline void set_has_effects();
  inline void clear_has_effects();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::google::protobuf::int32 spellactstate_;
  ::google::protobuf::int32 casttype_;
  ::std::string* seaftercalc_;
  ::std::string* tgtselectstrategy_;
  float spelltime_;
  ::google::protobuf::int32 checkmoveid_;
  ::std::string* mainenheff_;
  ::google::protobuf::int32 clientcalcnum_;
  ::google::protobuf::int32 showindicator_;
  ::std::string* creations_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 learnlv_;
  ::std::string* graph4_;
  ::std::string* selfnostates_;
  ::google::protobuf::int32 castbreakable_;
  ::google::protobuf::int32 school_;
  ::std::string* name_;
  float flyspeed_;
  ::google::protobuf::int32 spellactaura_;
  ::std::string* collideheight_;
  ::google::protobuf::int32 skilltype_;
  ::google::protobuf::int32 guidevpneed_;
  float notturntime_;
  float noatktime_;
  ::google::protobuf::int32 isaoe_;
  ::google::protobuf::int32 ammoneed_;
  ::std::string* preammotype_;
  float movedelay_;
  ::google::protobuf::int32 hidecastbar_;
  ::std::string* uishape_;
  ::google::protobuf::int32 tgtself_;
  float indicatortime_;
  float notmovetime_;
  ::google::protobuf::int32 spellcharge_;
  ::std::string* selfstates_;
  ::std::string* rangemax_;
  ::google::protobuf::int32 prespell_;
  ::google::protobuf::int32 autouseskill_;
  float movespeed_;
  ::google::protobuf::int32 tgtalltype_;
  ::std::string* circleshape_;
  ::google::protobuf::int32 rangemin_;
  ::google::protobuf::int32 spellmoveable_;
  float wsadd2_;
  ::google::protobuf::int32 wsadd1_;
  ::google::protobuf::int32 restoredelaycd_;
  ::google::protobuf::int32 useableinstub_;
  ::google::protobuf::int32 selfhpmorepct_;
  ::google::protobuf::int32 notgt_;
  ::google::protobuf::int32 wsneed1_;
  ::google::protobuf::int32 wsneed2_;
  ::google::protobuf::int32 tgtselffriendtype_;
  ::google::protobuf::int32 tgtfriendtype_;
  ::google::protobuf::int32 movedelaynotaffectcalc_;
  float cd_;
  ::std::string* detaileff2_;
  ::google::protobuf::int32 flynodelay_;
  ::google::protobuf::int32 tgtselfenemytype_;
  ::std::string* castdelay_;
  ::std::string* detaileff3_;
  ::google::protobuf::int32 switchstate_;
  float casttime_;
  ::std::string* detaileff1_;
  ::google::protobuf::int32 tgtselectstate_;
  ::google::protobuf::int32 wstype_;
  ::std::string* describe_;
  ::std::string* addwseff_;
  ::std::string* consumequipneed_;
  ::google::protobuf::int32 learngold_;
  ::google::protobuf::int32 mpneed_;
  ::std::string* auras_;
  ::std::string* maineff_;
  ::google::protobuf::int32 spellbreakable_;
  ::google::protobuf::int32 noarrow_;
  ::google::protobuf::int32 moveid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 tgtpos_;
  float gcd_;
  ::std::string* graph2_;
  ::google::protobuf::int32 tgtnowpos_;
  ::google::protobuf::int32 goonzaijuno_;
  ::std::string* graph3_;
  ::std::string* graph1_;
  ::std::string* details_;
  float castinterval_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 selfhplesspct_;
  ::google::protobuf::int32 tgtenemytype_;
  ::google::protobuf::int32 guidempneed_;
  ::google::protobuf::int32 facepos_;
  ::google::protobuf::int32 vpneed_;
  ::google::protobuf::int32 castmovetype_;
  ::std::string* wpskilltype_;
  ::std::string* chargestgs_;
  ::std::string* se_;
  ::std::string* effects_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static Skill_General_Data* default_instance_;
};
// ===================================================================


// ===================================================================

// Item_Data

// optional bytes name = 1;
inline bool Item_Data::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item_Data::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item_Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Item_Data::name() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.name)
  return *name_;
}
inline void Item_Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.name)
}
inline void Item_Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.name)
}
inline void Item_Data::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.name)
}
inline ::std::string* Item_Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.name)
  return name_;
}
inline ::std::string* Item_Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.name)
}

// optional int32 icon = 2;
inline bool Item_Data::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item_Data::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item_Data::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item_Data::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 Item_Data::icon() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.icon)
  return icon_;
}
inline void Item_Data::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.icon)
}

// optional int32 modelId = 3;
inline bool Item_Data::has_modelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item_Data::set_has_modelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item_Data::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item_Data::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 Item_Data::modelid() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.modelId)
  return modelid_;
}
inline void Item_Data::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.modelId)
}

// optional float modelScale = 4;
inline bool Item_Data::has_modelscale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Item_Data::set_has_modelscale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Item_Data::clear_has_modelscale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Item_Data::clear_modelscale() {
  modelscale_ = 0;
  clear_has_modelscale();
}
inline float Item_Data::modelscale() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.modelScale)
  return modelscale_;
}
inline void Item_Data::set_modelscale(float value) {
  set_has_modelscale();
  modelscale_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.modelScale)
}

// optional int32 dropItemSound = 5;
inline bool Item_Data::has_dropitemsound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Item_Data::set_has_dropitemsound() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Item_Data::clear_has_dropitemsound() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Item_Data::clear_dropitemsound() {
  dropitemsound_ = 0;
  clear_has_dropitemsound();
}
inline ::google::protobuf::int32 Item_Data::dropitemsound() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.dropItemSound)
  return dropitemsound_;
}
inline void Item_Data::set_dropitemsound(::google::protobuf::int32 value) {
  set_has_dropitemsound();
  dropitemsound_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.dropItemSound)
}

// optional int32 useItemSound = 6;
inline bool Item_Data::has_useitemsound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Item_Data::set_has_useitemsound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Item_Data::clear_has_useitemsound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Item_Data::clear_useitemsound() {
  useitemsound_ = 0;
  clear_has_useitemsound();
}
inline ::google::protobuf::int32 Item_Data::useitemsound() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.useItemSound)
  return useitemsound_;
}
inline void Item_Data::set_useitemsound(::google::protobuf::int32 value) {
  set_has_useitemsound();
  useitemsound_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.useItemSound)
}

// optional int32 dragItemSound = 7;
inline bool Item_Data::has_dragitemsound() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Item_Data::set_has_dragitemsound() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Item_Data::clear_has_dragitemsound() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Item_Data::clear_dragitemsound() {
  dragitemsound_ = 0;
  clear_has_dragitemsound();
}
inline ::google::protobuf::int32 Item_Data::dragitemsound() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.dragItemSound)
  return dragitemsound_;
}
inline void Item_Data::set_dragitemsound(::google::protobuf::int32 value) {
  set_has_dragitemsound();
  dragitemsound_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.dragItemSound)
}

// optional int32 parentId = 8;
inline bool Item_Data::has_parentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Item_Data::set_has_parentid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Item_Data::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Item_Data::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 Item_Data::parentid() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.parentId)
  return parentid_;
}
inline void Item_Data::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.parentId)
}

// optional int32 isDisplayInDb = 9;
inline bool Item_Data::has_isdisplayindb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Item_Data::set_has_isdisplayindb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Item_Data::clear_has_isdisplayindb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Item_Data::clear_isdisplayindb() {
  isdisplayindb_ = 0;
  clear_has_isdisplayindb();
}
inline ::google::protobuf::int32 Item_Data::isdisplayindb() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.isDisplayInDb)
  return isdisplayindb_;
}
inline void Item_Data::set_isdisplayindb(::google::protobuf::int32 value) {
  set_has_isdisplayindb();
  isdisplayindb_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.isDisplayInDb)
}

// optional int32 quality = 10;
inline bool Item_Data::has_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Item_Data::set_has_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Item_Data::clear_has_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Item_Data::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Item_Data::quality() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.quality)
  return quality_;
}
inline void Item_Data::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.quality)
}

// optional int32 type = 11;
inline bool Item_Data::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Item_Data::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Item_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Item_Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Item_Data::type() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.type)
  return type_;
}
inline void Item_Data::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.type)
}

// optional int32 category = 12;
inline bool Item_Data::has_category() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Item_Data::set_has_category() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Item_Data::clear_has_category() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Item_Data::clear_category() {
  category_ = 0;
  clear_has_category();
}
inline ::google::protobuf::int32 Item_Data::category() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.category)
  return category_;
}
inline void Item_Data::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.category)
}

// optional int32 subcategory = 13;
inline bool Item_Data::has_subcategory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Item_Data::set_has_subcategory() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Item_Data::clear_has_subcategory() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Item_Data::clear_subcategory() {
  subcategory_ = 0;
  clear_has_subcategory();
}
inline ::google::protobuf::int32 Item_Data::subcategory() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.subcategory)
  return subcategory_;
}
inline void Item_Data::set_subcategory(::google::protobuf::int32 value) {
  set_has_subcategory();
  subcategory_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.subcategory)
}

// optional int32 valuable = 14;
inline bool Item_Data::has_valuable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Item_Data::set_has_valuable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Item_Data::clear_has_valuable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Item_Data::clear_valuable() {
  valuable_ = 0;
  clear_has_valuable();
}
inline ::google::protobuf::int32 Item_Data::valuable() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.valuable)
  return valuable_;
}
inline void Item_Data::set_valuable(::google::protobuf::int32 value) {
  set_has_valuable();
  valuable_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.valuable)
}

// optional int32 precious = 15;
inline bool Item_Data::has_precious() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Item_Data::set_has_precious() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Item_Data::clear_has_precious() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Item_Data::clear_precious() {
  precious_ = 0;
  clear_has_precious();
}
inline ::google::protobuf::int32 Item_Data::precious() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.precious)
  return precious_;
}
inline void Item_Data::set_precious(::google::protobuf::int32 value) {
  set_has_precious();
  precious_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.precious)
}

// optional int32 runeEquipExp = 16;
inline bool Item_Data::has_runeequipexp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Item_Data::set_has_runeequipexp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Item_Data::clear_has_runeequipexp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Item_Data::clear_runeequipexp() {
  runeequipexp_ = 0;
  clear_has_runeequipexp();
}
inline ::google::protobuf::int32 Item_Data::runeequipexp() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.runeEquipExp)
  return runeequipexp_;
}
inline void Item_Data::set_runeequipexp(::google::protobuf::int32 value) {
  set_has_runeequipexp();
  runeequipexp_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.runeEquipExp)
}

// optional float heightOffset = 17;
inline bool Item_Data::has_heightoffset() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Item_Data::set_has_heightoffset() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Item_Data::clear_has_heightoffset() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Item_Data::clear_heightoffset() {
  heightoffset_ = 0;
  clear_has_heightoffset();
}
inline float Item_Data::heightoffset() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.heightOffset)
  return heightoffset_;
}
inline void Item_Data::set_heightoffset(float value) {
  set_has_heightoffset();
  heightoffset_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.heightOffset)
}

// optional int32 questItem = 18;
inline bool Item_Data::has_questitem() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Item_Data::set_has_questitem() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Item_Data::clear_has_questitem() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Item_Data::clear_questitem() {
  questitem_ = 0;
  clear_has_questitem();
}
inline ::google::protobuf::int32 Item_Data::questitem() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.questItem)
  return questitem_;
}
inline void Item_Data::set_questitem(::google::protobuf::int32 value) {
  set_has_questitem();
  questitem_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.questItem)
}

// optional int32 cdgroup = 19;
inline bool Item_Data::has_cdgroup() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Item_Data::set_has_cdgroup() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Item_Data::clear_has_cdgroup() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Item_Data::clear_cdgroup() {
  cdgroup_ = 0;
  clear_has_cdgroup();
}
inline ::google::protobuf::int32 Item_Data::cdgroup() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.cdgroup)
  return cdgroup_;
}
inline void Item_Data::set_cdgroup(::google::protobuf::int32 value) {
  set_has_cdgroup();
  cdgroup_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.cdgroup)
}

// optional int32 cd = 20;
inline bool Item_Data::has_cd() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Item_Data::set_has_cd() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Item_Data::clear_has_cd() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Item_Data::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 Item_Data::cd() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.cd)
  return cd_;
}
inline void Item_Data::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.cd)
}

// optional int32 bPrice = 21;
inline bool Item_Data::has_bprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Item_Data::set_has_bprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Item_Data::clear_has_bprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Item_Data::clear_bprice() {
  bprice_ = 0;
  clear_has_bprice();
}
inline ::google::protobuf::int32 Item_Data::bprice() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.bPrice)
  return bprice_;
}
inline void Item_Data::set_bprice(::google::protobuf::int32 value) {
  set_has_bprice();
  bprice_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.bPrice)
}

// optional int32 bPriceType = 22;
inline bool Item_Data::has_bpricetype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Item_Data::set_has_bpricetype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Item_Data::clear_has_bpricetype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Item_Data::clear_bpricetype() {
  bpricetype_ = 0;
  clear_has_bpricetype();
}
inline ::google::protobuf::int32 Item_Data::bpricetype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.bPriceType)
  return bpricetype_;
}
inline void Item_Data::set_bpricetype(::google::protobuf::int32 value) {
  set_has_bpricetype();
  bpricetype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.bPriceType)
}

// optional int32 sPrice = 23;
inline bool Item_Data::has_sprice() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Item_Data::set_has_sprice() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Item_Data::clear_has_sprice() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Item_Data::clear_sprice() {
  sprice_ = 0;
  clear_has_sprice();
}
inline ::google::protobuf::int32 Item_Data::sprice() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.sPrice)
  return sprice_;
}
inline void Item_Data::set_sprice(::google::protobuf::int32 value) {
  set_has_sprice();
  sprice_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.sPrice)
}

// optional int32 sPriceType = 24;
inline bool Item_Data::has_spricetype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Item_Data::set_has_spricetype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Item_Data::clear_has_spricetype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Item_Data::clear_spricetype() {
  spricetype_ = 0;
  clear_has_spricetype();
}
inline ::google::protobuf::int32 Item_Data::spricetype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.sPriceType)
  return spricetype_;
}
inline void Item_Data::set_spricetype(::google::protobuf::int32 value) {
  set_has_spricetype();
  spricetype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.sPriceType)
}

// optional int32 fPrice = 25;
inline bool Item_Data::has_fprice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Item_Data::set_has_fprice() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Item_Data::clear_has_fprice() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Item_Data::clear_fprice() {
  fprice_ = 0;
  clear_has_fprice();
}
inline ::google::protobuf::int32 Item_Data::fprice() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.fPrice)
  return fprice_;
}
inline void Item_Data::set_fprice(::google::protobuf::int32 value) {
  set_has_fprice();
  fprice_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.fPrice)
}

// optional int32 auctionPrice = 26;
inline bool Item_Data::has_auctionprice() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Item_Data::set_has_auctionprice() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Item_Data::clear_has_auctionprice() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Item_Data::clear_auctionprice() {
  auctionprice_ = 0;
  clear_has_auctionprice();
}
inline ::google::protobuf::int32 Item_Data::auctionprice() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.auctionPrice)
  return auctionprice_;
}
inline void Item_Data::set_auctionprice(::google::protobuf::int32 value) {
  set_has_auctionprice();
  auctionprice_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.auctionPrice)
}

// optional int32 noBuyBack = 28;
inline bool Item_Data::has_nobuyback() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Item_Data::set_has_nobuyback() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Item_Data::clear_has_nobuyback() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Item_Data::clear_nobuyback() {
  nobuyback_ = 0;
  clear_has_nobuyback();
}
inline ::google::protobuf::int32 Item_Data::nobuyback() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noBuyBack)
  return nobuyback_;
}
inline void Item_Data::set_nobuyback(::google::protobuf::int32 value) {
  set_has_nobuyback();
  nobuyback_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noBuyBack)
}

// optional int32 shopJingJieRequire = 30;
inline bool Item_Data::has_shopjingjierequire() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Item_Data::set_has_shopjingjierequire() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Item_Data::clear_has_shopjingjierequire() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Item_Data::clear_shopjingjierequire() {
  shopjingjierequire_ = 0;
  clear_has_shopjingjierequire();
}
inline ::google::protobuf::int32 Item_Data::shopjingjierequire() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.shopJingJieRequire)
  return shopjingjierequire_;
}
inline void Item_Data::set_shopjingjierequire(::google::protobuf::int32 value) {
  set_has_shopjingjierequire();
  shopjingjierequire_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.shopJingJieRequire)
}

// optional int32 bindType = 31;
inline bool Item_Data::has_bindtype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Item_Data::set_has_bindtype() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Item_Data::clear_has_bindtype() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Item_Data::clear_bindtype() {
  bindtype_ = 0;
  clear_has_bindtype();
}
inline ::google::protobuf::int32 Item_Data::bindtype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.bindType)
  return bindtype_;
}
inline void Item_Data::set_bindtype(::google::protobuf::int32 value) {
  set_has_bindtype();
  bindtype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.bindType)
}

// optional int32 lvReq = 32;
inline bool Item_Data::has_lvreq() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Item_Data::set_has_lvreq() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Item_Data::clear_has_lvreq() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Item_Data::clear_lvreq() {
  lvreq_ = 0;
  clear_has_lvreq();
}
inline ::google::protobuf::int32 Item_Data::lvreq() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.lvReq)
  return lvreq_;
}
inline void Item_Data::set_lvreq(::google::protobuf::int32 value) {
  set_has_lvreq();
  lvreq_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.lvReq)
}

// optional int32 maxLvReq = 33;
inline bool Item_Data::has_maxlvreq() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Item_Data::set_has_maxlvreq() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Item_Data::clear_has_maxlvreq() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Item_Data::clear_maxlvreq() {
  maxlvreq_ = 0;
  clear_has_maxlvreq();
}
inline ::google::protobuf::int32 Item_Data::maxlvreq() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.maxLvReq)
  return maxlvreq_;
}
inline void Item_Data::set_maxlvreq(::google::protobuf::int32 value) {
  set_has_maxlvreq();
  maxlvreq_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.maxLvReq)
}

// optional int32 sexReq = 34;
inline bool Item_Data::has_sexreq() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Item_Data::set_has_sexreq() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Item_Data::clear_has_sexreq() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Item_Data::clear_sexreq() {
  sexreq_ = 0;
  clear_has_sexreq();
}
inline ::google::protobuf::int32 Item_Data::sexreq() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.sexReq)
  return sexreq_;
}
inline void Item_Data::set_sexreq(::google::protobuf::int32 value) {
  set_has_sexreq();
  sexreq_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.sexReq)
}

// optional int32 allowBodyType = 35;
inline bool Item_Data::has_allowbodytype() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Item_Data::set_has_allowbodytype() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Item_Data::clear_has_allowbodytype() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Item_Data::clear_allowbodytype() {
  allowbodytype_ = 0;
  clear_has_allowbodytype();
}
inline ::google::protobuf::int32 Item_Data::allowbodytype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.allowBodyType)
  return allowbodytype_;
}
inline void Item_Data::set_allowbodytype(::google::protobuf::int32 value) {
  set_has_allowbodytype();
  allowbodytype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.allowBodyType)
}

// optional int32 combatReq = 37;
inline bool Item_Data::has_combatreq() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Item_Data::set_has_combatreq() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Item_Data::clear_has_combatreq() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Item_Data::clear_combatreq() {
  combatreq_ = 0;
  clear_has_combatreq();
}
inline ::google::protobuf::int32 Item_Data::combatreq() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.combatReq)
  return combatreq_;
}
inline void Item_Data::set_combatreq(::google::protobuf::int32 value) {
  set_has_combatreq();
  combatreq_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.combatReq)
}

// optional int32 combatEquReq = 38;
inline bool Item_Data::has_combatequreq() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Item_Data::set_has_combatequreq() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Item_Data::clear_has_combatequreq() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Item_Data::clear_combatequreq() {
  combatequreq_ = 0;
  clear_has_combatequreq();
}
inline ::google::protobuf::int32 Item_Data::combatequreq() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.combatEquReq)
  return combatequreq_;
}
inline void Item_Data::set_combatequreq(::google::protobuf::int32 value) {
  set_has_combatequreq();
  combatequreq_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.combatEquReq)
}

// optional int32 zaijuReq = 39;
inline bool Item_Data::has_zaijureq() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Item_Data::set_has_zaijureq() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Item_Data::clear_has_zaijureq() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Item_Data::clear_zaijureq() {
  zaijureq_ = 0;
  clear_has_zaijureq();
}
inline ::google::protobuf::int32 Item_Data::zaijureq() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.zaijuReq)
  return zaijureq_;
}
inline void Item_Data::set_zaijureq(::google::protobuf::int32 value) {
  set_has_zaijureq();
  zaijureq_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.zaijuReq)
}

// optional int32 conType1 = 42;
inline bool Item_Data::has_contype1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Item_Data::set_has_contype1() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Item_Data::clear_has_contype1() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Item_Data::clear_contype1() {
  contype1_ = 0;
  clear_has_contype1();
}
inline ::google::protobuf::int32 Item_Data::contype1() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conType1)
  return contype1_;
}
inline void Item_Data::set_contype1(::google::protobuf::int32 value) {
  set_has_contype1();
  contype1_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conType1)
}

// optional int32 conId1 = 43;
inline bool Item_Data::has_conid1() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Item_Data::set_has_conid1() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Item_Data::clear_has_conid1() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Item_Data::clear_conid1() {
  conid1_ = 0;
  clear_has_conid1();
}
inline ::google::protobuf::int32 Item_Data::conid1() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conId1)
  return conid1_;
}
inline void Item_Data::set_conid1(::google::protobuf::int32 value) {
  set_has_conid1();
  conid1_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conId1)
}

// optional int32 conOp1 = 44;
inline bool Item_Data::has_conop1() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Item_Data::set_has_conop1() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Item_Data::clear_has_conop1() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Item_Data::clear_conop1() {
  conop1_ = 0;
  clear_has_conop1();
}
inline ::google::protobuf::int32 Item_Data::conop1() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conOp1)
  return conop1_;
}
inline void Item_Data::set_conop1(::google::protobuf::int32 value) {
  set_has_conop1();
  conop1_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conOp1)
}

// optional int32 conParam1 = 45;
inline bool Item_Data::has_conparam1() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Item_Data::set_has_conparam1() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Item_Data::clear_has_conparam1() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Item_Data::clear_conparam1() {
  conparam1_ = 0;
  clear_has_conparam1();
}
inline ::google::protobuf::int32 Item_Data::conparam1() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conParam1)
  return conparam1_;
}
inline void Item_Data::set_conparam1(::google::protobuf::int32 value) {
  set_has_conparam1();
  conparam1_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conParam1)
}

// optional int32 conType2 = 46;
inline bool Item_Data::has_contype2() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Item_Data::set_has_contype2() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Item_Data::clear_has_contype2() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Item_Data::clear_contype2() {
  contype2_ = 0;
  clear_has_contype2();
}
inline ::google::protobuf::int32 Item_Data::contype2() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conType2)
  return contype2_;
}
inline void Item_Data::set_contype2(::google::protobuf::int32 value) {
  set_has_contype2();
  contype2_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conType2)
}

// optional int32 conId2 = 47;
inline bool Item_Data::has_conid2() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Item_Data::set_has_conid2() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Item_Data::clear_has_conid2() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Item_Data::clear_conid2() {
  conid2_ = 0;
  clear_has_conid2();
}
inline ::google::protobuf::int32 Item_Data::conid2() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conId2)
  return conid2_;
}
inline void Item_Data::set_conid2(::google::protobuf::int32 value) {
  set_has_conid2();
  conid2_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conId2)
}

// optional int32 conOp2 = 48;
inline bool Item_Data::has_conop2() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Item_Data::set_has_conop2() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Item_Data::clear_has_conop2() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Item_Data::clear_conop2() {
  conop2_ = 0;
  clear_has_conop2();
}
inline ::google::protobuf::int32 Item_Data::conop2() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conOp2)
  return conop2_;
}
inline void Item_Data::set_conop2(::google::protobuf::int32 value) {
  set_has_conop2();
  conop2_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conOp2)
}

// optional int32 conParam2 = 49;
inline bool Item_Data::has_conparam2() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Item_Data::set_has_conparam2() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Item_Data::clear_has_conparam2() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Item_Data::clear_conparam2() {
  conparam2_ = 0;
  clear_has_conparam2();
}
inline ::google::protobuf::int32 Item_Data::conparam2() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conParam2)
  return conparam2_;
}
inline void Item_Data::set_conparam2(::google::protobuf::int32 value) {
  set_has_conparam2();
  conparam2_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conParam2)
}

// optional int32 conType3 = 50;
inline bool Item_Data::has_contype3() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Item_Data::set_has_contype3() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Item_Data::clear_has_contype3() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Item_Data::clear_contype3() {
  contype3_ = 0;
  clear_has_contype3();
}
inline ::google::protobuf::int32 Item_Data::contype3() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conType3)
  return contype3_;
}
inline void Item_Data::set_contype3(::google::protobuf::int32 value) {
  set_has_contype3();
  contype3_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conType3)
}

// optional int32 conId3 = 51;
inline bool Item_Data::has_conid3() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Item_Data::set_has_conid3() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Item_Data::clear_has_conid3() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Item_Data::clear_conid3() {
  conid3_ = 0;
  clear_has_conid3();
}
inline ::google::protobuf::int32 Item_Data::conid3() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conId3)
  return conid3_;
}
inline void Item_Data::set_conid3(::google::protobuf::int32 value) {
  set_has_conid3();
  conid3_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conId3)
}

// optional int32 conOp3 = 52;
inline bool Item_Data::has_conop3() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Item_Data::set_has_conop3() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Item_Data::clear_has_conop3() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Item_Data::clear_conop3() {
  conop3_ = 0;
  clear_has_conop3();
}
inline ::google::protobuf::int32 Item_Data::conop3() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conOp3)
  return conop3_;
}
inline void Item_Data::set_conop3(::google::protobuf::int32 value) {
  set_has_conop3();
  conop3_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conOp3)
}

// optional int32 conParam3 = 53;
inline bool Item_Data::has_conparam3() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Item_Data::set_has_conparam3() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Item_Data::clear_has_conparam3() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Item_Data::clear_conparam3() {
  conparam3_ = 0;
  clear_has_conparam3();
}
inline ::google::protobuf::int32 Item_Data::conparam3() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.conParam3)
  return conparam3_;
}
inline void Item_Data::set_conparam3(::google::protobuf::int32 value) {
  set_has_conparam3();
  conparam3_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.conParam3)
}

// optional int32 mwrap = 54;
inline bool Item_Data::has_mwrap() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Item_Data::set_has_mwrap() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Item_Data::clear_has_mwrap() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Item_Data::clear_mwrap() {
  mwrap_ = 0;
  clear_has_mwrap();
}
inline ::google::protobuf::int32 Item_Data::mwrap() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.mwrap)
  return mwrap_;
}
inline void Item_Data::set_mwrap(::google::protobuf::int32 value) {
  set_has_mwrap();
  mwrap_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.mwrap)
}

// optional int32 holdMax = 55;
inline bool Item_Data::has_holdmax() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Item_Data::set_has_holdmax() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Item_Data::clear_has_holdmax() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Item_Data::clear_holdmax() {
  holdmax_ = 0;
  clear_has_holdmax();
}
inline ::google::protobuf::int32 Item_Data::holdmax() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.holdMax)
  return holdmax_;
}
inline void Item_Data::set_holdmax(::google::protobuf::int32 value) {
  set_has_holdmax();
  holdmax_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.holdMax)
}

// optional int32 tgtType = 56;
inline bool Item_Data::has_tgttype() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Item_Data::set_has_tgttype() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Item_Data::clear_has_tgttype() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Item_Data::clear_tgttype() {
  tgttype_ = 0;
  clear_has_tgttype();
}
inline ::google::protobuf::int32 Item_Data::tgttype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.tgtType)
  return tgttype_;
}
inline void Item_Data::set_tgttype(::google::protobuf::int32 value) {
  set_has_tgttype();
  tgttype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.tgtType)
}

// optional float tgtDist = 57;
inline bool Item_Data::has_tgtdist() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Item_Data::set_has_tgtdist() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Item_Data::clear_has_tgtdist() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Item_Data::clear_tgtdist() {
  tgtdist_ = 0;
  clear_has_tgtdist();
}
inline float Item_Data::tgtdist() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.tgtDist)
  return tgtdist_;
}
inline void Item_Data::set_tgtdist(float value) {
  set_has_tgtdist();
  tgtdist_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.tgtDist)
}

// optional int32 ttlType = 59;
inline bool Item_Data::has_ttltype() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Item_Data::set_has_ttltype() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Item_Data::clear_has_ttltype() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Item_Data::clear_ttltype() {
  ttltype_ = 0;
  clear_has_ttltype();
}
inline ::google::protobuf::int32 Item_Data::ttltype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ttlType)
  return ttltype_;
}
inline void Item_Data::set_ttltype(::google::protobuf::int32 value) {
  set_has_ttltype();
  ttltype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ttlType)
}

// optional int32 ttl = 60;
inline bool Item_Data::has_ttl() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Item_Data::set_has_ttl() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Item_Data::clear_has_ttl() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Item_Data::clear_ttl() {
  ttl_ = 0;
  clear_has_ttl();
}
inline ::google::protobuf::int32 Item_Data::ttl() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ttl)
  return ttl_;
}
inline void Item_Data::set_ttl(::google::protobuf::int32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ttl)
}

// optional int32 ttlExpireType = 61;
inline bool Item_Data::has_ttlexpiretype() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Item_Data::set_has_ttlexpiretype() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Item_Data::clear_has_ttlexpiretype() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Item_Data::clear_ttlexpiretype() {
  ttlexpiretype_ = 0;
  clear_has_ttlexpiretype();
}
inline ::google::protobuf::int32 Item_Data::ttlexpiretype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ttlExpireType)
  return ttlexpiretype_;
}
inline void Item_Data::set_ttlexpiretype(::google::protobuf::int32 value) {
  set_has_ttlexpiretype();
  ttlexpiretype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ttlExpireType)
}

// optional int32 ttlChangeId = 62;
inline bool Item_Data::has_ttlchangeid() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Item_Data::set_has_ttlchangeid() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Item_Data::clear_has_ttlchangeid() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Item_Data::clear_ttlchangeid() {
  ttlchangeid_ = 0;
  clear_has_ttlchangeid();
}
inline ::google::protobuf::int32 Item_Data::ttlchangeid() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ttlChangeId)
  return ttlchangeid_;
}
inline void Item_Data::set_ttlchangeid(::google::protobuf::int32 value) {
  set_has_ttlchangeid();
  ttlchangeid_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ttlChangeId)
}

// optional int32 ttlChangeAmount = 63;
inline bool Item_Data::has_ttlchangeamount() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Item_Data::set_has_ttlchangeamount() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Item_Data::clear_has_ttlchangeamount() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Item_Data::clear_ttlchangeamount() {
  ttlchangeamount_ = 0;
  clear_has_ttlchangeamount();
}
inline ::google::protobuf::int32 Item_Data::ttlchangeamount() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ttlChangeAmount)
  return ttlchangeamount_;
}
inline void Item_Data::set_ttlchangeamount(::google::protobuf::int32 value) {
  set_has_ttlchangeamount();
  ttlchangeamount_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ttlChangeAmount)
}

// optional bytes commonExpireTime = 64;
inline bool Item_Data::has_commonexpiretime() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Item_Data::set_has_commonexpiretime() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Item_Data::clear_has_commonexpiretime() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Item_Data::clear_commonexpiretime() {
  if (commonexpiretime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commonexpiretime_->clear();
  }
  clear_has_commonexpiretime();
}
inline const ::std::string& Item_Data::commonexpiretime() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.commonExpireTime)
  return *commonexpiretime_;
}
inline void Item_Data::set_commonexpiretime(const ::std::string& value) {
  set_has_commonexpiretime();
  if (commonexpiretime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commonexpiretime_ = new ::std::string;
  }
  commonexpiretime_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.commonExpireTime)
}
inline void Item_Data::set_commonexpiretime(const char* value) {
  set_has_commonexpiretime();
  if (commonexpiretime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commonexpiretime_ = new ::std::string;
  }
  commonexpiretime_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.commonExpireTime)
}
inline void Item_Data::set_commonexpiretime(const void* value, size_t size) {
  set_has_commonexpiretime();
  if (commonexpiretime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commonexpiretime_ = new ::std::string;
  }
  commonexpiretime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.commonExpireTime)
}
inline ::std::string* Item_Data::mutable_commonexpiretime() {
  set_has_commonexpiretime();
  if (commonexpiretime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commonexpiretime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.commonExpireTime)
  return commonexpiretime_;
}
inline ::std::string* Item_Data::release_commonexpiretime() {
  clear_has_commonexpiretime();
  if (commonexpiretime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = commonexpiretime_;
    commonexpiretime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_commonexpiretime(::std::string* commonexpiretime) {
  if (commonexpiretime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete commonexpiretime_;
  }
  if (commonexpiretime) {
    set_has_commonexpiretime();
    commonexpiretime_ = commonexpiretime;
  } else {
    clear_has_commonexpiretime();
    commonexpiretime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.commonExpireTime)
}

// optional int32 ownership = 65;
inline bool Item_Data::has_ownership() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Item_Data::set_has_ownership() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Item_Data::clear_has_ownership() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Item_Data::clear_ownership() {
  ownership_ = 0;
  clear_has_ownership();
}
inline ::google::protobuf::int32 Item_Data::ownership() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ownership)
  return ownership_;
}
inline void Item_Data::set_ownership(::google::protobuf::int32 value) {
  set_has_ownership();
  ownership_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ownership)
}

// optional int32 renewalType = 66;
inline bool Item_Data::has_renewaltype() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Item_Data::set_has_renewaltype() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Item_Data::clear_has_renewaltype() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Item_Data::clear_renewaltype() {
  renewaltype_ = 0;
  clear_has_renewaltype();
}
inline ::google::protobuf::int32 Item_Data::renewaltype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.renewalType)
  return renewaltype_;
}
inline void Item_Data::set_renewaltype(::google::protobuf::int32 value) {
  set_has_renewaltype();
  renewaltype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.renewalType)
}

// optional int32 commonRenewalType = 67;
inline bool Item_Data::has_commonrenewaltype() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Item_Data::set_has_commonrenewaltype() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Item_Data::clear_has_commonrenewaltype() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Item_Data::clear_commonrenewaltype() {
  commonrenewaltype_ = 0;
  clear_has_commonrenewaltype();
}
inline ::google::protobuf::int32 Item_Data::commonrenewaltype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.commonRenewalType)
  return commonrenewaltype_;
}
inline void Item_Data::set_commonrenewaltype(::google::protobuf::int32 value) {
  set_has_commonrenewaltype();
  commonrenewaltype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.commonRenewalType)
}

// optional int32 mallRenewal30Days = 68;
inline bool Item_Data::has_mallrenewal30days() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Item_Data::set_has_mallrenewal30days() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Item_Data::clear_has_mallrenewal30days() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Item_Data::clear_mallrenewal30days() {
  mallrenewal30days_ = 0;
  clear_has_mallrenewal30days();
}
inline ::google::protobuf::int32 Item_Data::mallrenewal30days() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.mallRenewal30Days)
  return mallrenewal30days_;
}
inline void Item_Data::set_mallrenewal30days(::google::protobuf::int32 value) {
  set_has_mallrenewal30days();
  mallrenewal30days_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.mallRenewal30Days)
}

// optional int32 mallRenewalOwnership = 69;
inline bool Item_Data::has_mallrenewalownership() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Item_Data::set_has_mallrenewalownership() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Item_Data::clear_has_mallrenewalownership() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Item_Data::clear_mallrenewalownership() {
  mallrenewalownership_ = 0;
  clear_has_mallrenewalownership();
}
inline ::google::protobuf::int32 Item_Data::mallrenewalownership() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.mallRenewalOwnership)
  return mallrenewalownership_;
}
inline void Item_Data::set_mallrenewalownership(::google::protobuf::int32 value) {
  set_has_mallrenewalownership();
  mallrenewalownership_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.mallRenewalOwnership)
}

// optional int32 mallRenewalForever = 70;
inline bool Item_Data::has_mallrenewalforever() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Item_Data::set_has_mallrenewalforever() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Item_Data::clear_has_mallrenewalforever() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Item_Data::clear_mallrenewalforever() {
  mallrenewalforever_ = 0;
  clear_has_mallrenewalforever();
}
inline ::google::protobuf::int32 Item_Data::mallrenewalforever() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.mallRenewalForever)
  return mallrenewalforever_;
}
inline void Item_Data::set_mallrenewalforever(::google::protobuf::int32 value) {
  set_has_mallrenewalforever();
  mallrenewalforever_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.mallRenewalForever)
}

// optional int32 noSell = 71;
inline bool Item_Data::has_nosell() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Item_Data::set_has_nosell() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Item_Data::clear_has_nosell() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Item_Data::clear_nosell() {
  nosell_ = 0;
  clear_has_nosell();
}
inline ::google::protobuf::int32 Item_Data::nosell() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noSell)
  return nosell_;
}
inline void Item_Data::set_nosell(::google::protobuf::int32 value) {
  set_has_nosell();
  nosell_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noSell)
}

// optional int32 noTrade = 72;
inline bool Item_Data::has_notrade() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Item_Data::set_has_notrade() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Item_Data::clear_has_notrade() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Item_Data::clear_notrade() {
  notrade_ = 0;
  clear_has_notrade();
}
inline ::google::protobuf::int32 Item_Data::notrade() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noTrade)
  return notrade_;
}
inline void Item_Data::set_notrade(::google::protobuf::int32 value) {
  set_has_notrade();
  notrade_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noTrade)
}

// optional int32 noDrop = 73;
inline bool Item_Data::has_nodrop() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Item_Data::set_has_nodrop() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Item_Data::clear_has_nodrop() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Item_Data::clear_nodrop() {
  nodrop_ = 0;
  clear_has_nodrop();
}
inline ::google::protobuf::int32 Item_Data::nodrop() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noDrop)
  return nodrop_;
}
inline void Item_Data::set_nodrop(::google::protobuf::int32 value) {
  set_has_nodrop();
  nodrop_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noDrop)
}

// optional int32 noMail = 74;
inline bool Item_Data::has_nomail() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Item_Data::set_has_nomail() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Item_Data::clear_has_nomail() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Item_Data::clear_nomail() {
  nomail_ = 0;
  clear_has_nomail();
}
inline ::google::protobuf::int32 Item_Data::nomail() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noMail)
  return nomail_;
}
inline void Item_Data::set_nomail(::google::protobuf::int32 value) {
  set_has_nomail();
  nomail_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noMail)
}

// optional int32 noConsign = 75;
inline bool Item_Data::has_noconsign() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Item_Data::set_has_noconsign() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Item_Data::clear_has_noconsign() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Item_Data::clear_noconsign() {
  noconsign_ = 0;
  clear_has_noconsign();
}
inline ::google::protobuf::int32 Item_Data::noconsign() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noConsign)
  return noconsign_;
}
inline void Item_Data::set_noconsign(::google::protobuf::int32 value) {
  set_has_noconsign();
  noconsign_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noConsign)
}

// optional int32 coinConsign = 76;
inline bool Item_Data::has_coinconsign() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Item_Data::set_has_coinconsign() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Item_Data::clear_has_coinconsign() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Item_Data::clear_coinconsign() {
  coinconsign_ = 0;
  clear_has_coinconsign();
}
inline ::google::protobuf::int32 Item_Data::coinconsign() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.coinConsign)
  return coinconsign_;
}
inline void Item_Data::set_coinconsign(::google::protobuf::int32 value) {
  set_has_coinconsign();
  coinconsign_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.coinConsign)
}

// optional int32 noBooth = 77;
inline bool Item_Data::has_nobooth() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Item_Data::set_has_nobooth() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Item_Data::clear_has_nobooth() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Item_Data::clear_nobooth() {
  nobooth_ = 0;
  clear_has_nobooth();
}
inline ::google::protobuf::int32 Item_Data::nobooth() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noBooth)
  return nobooth_;
}
inline void Item_Data::set_nobooth(::google::protobuf::int32 value) {
  set_has_nobooth();
  nobooth_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noBooth)
}

// optional int32 noBoothBuy = 78;
inline bool Item_Data::has_noboothbuy() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Item_Data::set_has_noboothbuy() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Item_Data::clear_has_noboothbuy() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Item_Data::clear_noboothbuy() {
  noboothbuy_ = 0;
  clear_has_noboothbuy();
}
inline ::google::protobuf::int32 Item_Data::noboothbuy() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noBoothBuy)
  return noboothbuy_;
}
inline void Item_Data::set_noboothbuy(::google::protobuf::int32 value) {
  set_has_noboothbuy();
  noboothbuy_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noBoothBuy)
}

// optional int32 noStorage = 79;
inline bool Item_Data::has_nostorage() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Item_Data::set_has_nostorage() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Item_Data::clear_has_nostorage() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Item_Data::clear_nostorage() {
  nostorage_ = 0;
  clear_has_nostorage();
}
inline ::google::protobuf::int32 Item_Data::nostorage() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noStorage)
  return nostorage_;
}
inline void Item_Data::set_nostorage(::google::protobuf::int32 value) {
  set_has_nostorage();
  nostorage_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noStorage)
}

// optional int32 noRepair = 80;
inline bool Item_Data::has_norepair() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Item_Data::set_has_norepair() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Item_Data::clear_has_norepair() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Item_Data::clear_norepair() {
  norepair_ = 0;
  clear_has_norepair();
}
inline ::google::protobuf::int32 Item_Data::norepair() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noRepair)
  return norepair_;
}
inline void Item_Data::set_norepair(::google::protobuf::int32 value) {
  set_has_norepair();
  norepair_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noRepair)
}

// optional int32 noLatch = 81;
inline bool Item_Data::has_nolatch() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Item_Data::set_has_nolatch() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Item_Data::clear_has_nolatch() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Item_Data::clear_nolatch() {
  nolatch_ = 0;
  clear_has_nolatch();
}
inline ::google::protobuf::int32 Item_Data::nolatch() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noLatch)
  return nolatch_;
}
inline void Item_Data::set_nolatch(::google::protobuf::int32 value) {
  set_has_nolatch();
  nolatch_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noLatch)
}

// optional int32 noReturn = 82;
inline bool Item_Data::has_noreturn() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Item_Data::set_has_noreturn() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Item_Data::clear_has_noreturn() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Item_Data::clear_noreturn() {
  noreturn_ = 0;
  clear_has_noreturn();
}
inline ::google::protobuf::int32 Item_Data::noreturn() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.noReturn)
  return noreturn_;
}
inline void Item_Data::set_noreturn(::google::protobuf::int32 value) {
  set_has_noreturn();
  noreturn_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.noReturn)
}

// optional int32 rideItemType = 83;
inline bool Item_Data::has_rideitemtype() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Item_Data::set_has_rideitemtype() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Item_Data::clear_has_rideitemtype() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Item_Data::clear_rideitemtype() {
  rideitemtype_ = 0;
  clear_has_rideitemtype();
}
inline ::google::protobuf::int32 Item_Data::rideitemtype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.rideItemType)
  return rideitemtype_;
}
inline void Item_Data::set_rideitemtype(::google::protobuf::int32 value) {
  set_has_rideitemtype();
  rideitemtype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.rideItemType)
}

// optional float spellTime = 84;
inline bool Item_Data::has_spelltime() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Item_Data::set_has_spelltime() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Item_Data::clear_has_spelltime() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Item_Data::clear_spelltime() {
  spelltime_ = 0;
  clear_has_spelltime();
}
inline float Item_Data::spelltime() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.spellTime)
  return spelltime_;
}
inline void Item_Data::set_spelltime(float value) {
  set_has_spelltime();
  spelltime_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.spellTime)
}

// optional int32 accordingType = 85;
inline bool Item_Data::has_accordingtype() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Item_Data::set_has_accordingtype() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Item_Data::clear_has_accordingtype() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Item_Data::clear_accordingtype() {
  accordingtype_ = 0;
  clear_has_accordingtype();
}
inline ::google::protobuf::int32 Item_Data::accordingtype() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.accordingType)
  return accordingtype_;
}
inline void Item_Data::set_accordingtype(::google::protobuf::int32 value) {
  set_has_accordingtype();
  accordingtype_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.accordingType)
}

// optional int32 ctrl = 86;
inline bool Item_Data::has_ctrl() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Item_Data::set_has_ctrl() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Item_Data::clear_has_ctrl() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Item_Data::clear_ctrl() {
  ctrl_ = 0;
  clear_has_ctrl();
}
inline ::google::protobuf::int32 Item_Data::ctrl() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.ctrl)
  return ctrl_;
}
inline void Item_Data::set_ctrl(::google::protobuf::int32 value) {
  set_has_ctrl();
  ctrl_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.ctrl)
}

// optional bytes navigatorName = 87;
inline bool Item_Data::has_navigatorname() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Item_Data::set_has_navigatorname() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Item_Data::clear_has_navigatorname() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Item_Data::clear_navigatorname() {
  if (navigatorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatorname_->clear();
  }
  clear_has_navigatorname();
}
inline const ::std::string& Item_Data::navigatorname() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.navigatorName)
  return *navigatorname_;
}
inline void Item_Data::set_navigatorname(const ::std::string& value) {
  set_has_navigatorname();
  if (navigatorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatorname_ = new ::std::string;
  }
  navigatorname_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.navigatorName)
}
inline void Item_Data::set_navigatorname(const char* value) {
  set_has_navigatorname();
  if (navigatorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatorname_ = new ::std::string;
  }
  navigatorname_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.navigatorName)
}
inline void Item_Data::set_navigatorname(const void* value, size_t size) {
  set_has_navigatorname();
  if (navigatorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatorname_ = new ::std::string;
  }
  navigatorname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.navigatorName)
}
inline ::std::string* Item_Data::mutable_navigatorname() {
  set_has_navigatorname();
  if (navigatorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatorname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.navigatorName)
  return navigatorname_;
}
inline ::std::string* Item_Data::release_navigatorname() {
  clear_has_navigatorname();
  if (navigatorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = navigatorname_;
    navigatorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_navigatorname(::std::string* navigatorname) {
  if (navigatorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete navigatorname_;
  }
  if (navigatorname) {
    set_has_navigatorname();
    navigatorname_ = navigatorname;
  } else {
    clear_has_navigatorname();
    navigatorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.navigatorName)
}

// optional bytes navigatorTarget = 88;
inline bool Item_Data::has_navigatortarget() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Item_Data::set_has_navigatortarget() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Item_Data::clear_has_navigatortarget() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Item_Data::clear_navigatortarget() {
  if (navigatortarget_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatortarget_->clear();
  }
  clear_has_navigatortarget();
}
inline const ::std::string& Item_Data::navigatortarget() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.navigatorTarget)
  return *navigatortarget_;
}
inline void Item_Data::set_navigatortarget(const ::std::string& value) {
  set_has_navigatortarget();
  if (navigatortarget_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatortarget_ = new ::std::string;
  }
  navigatortarget_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.navigatorTarget)
}
inline void Item_Data::set_navigatortarget(const char* value) {
  set_has_navigatortarget();
  if (navigatortarget_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatortarget_ = new ::std::string;
  }
  navigatortarget_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.navigatorTarget)
}
inline void Item_Data::set_navigatortarget(const void* value, size_t size) {
  set_has_navigatortarget();
  if (navigatortarget_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatortarget_ = new ::std::string;
  }
  navigatortarget_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.navigatorTarget)
}
inline ::std::string* Item_Data::mutable_navigatortarget() {
  set_has_navigatortarget();
  if (navigatortarget_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    navigatortarget_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.navigatorTarget)
  return navigatortarget_;
}
inline ::std::string* Item_Data::release_navigatortarget() {
  clear_has_navigatortarget();
  if (navigatortarget_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = navigatortarget_;
    navigatortarget_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_navigatortarget(::std::string* navigatortarget) {
  if (navigatortarget_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete navigatortarget_;
  }
  if (navigatortarget) {
    set_has_navigatortarget();
    navigatortarget_ = navigatortarget;
  } else {
    clear_has_navigatortarget();
    navigatortarget_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.navigatorTarget)
}

// optional bytes descTitle = 89;
inline bool Item_Data::has_desctitle() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Item_Data::set_has_desctitle() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Item_Data::clear_has_desctitle() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Item_Data::clear_desctitle() {
  if (desctitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desctitle_->clear();
  }
  clear_has_desctitle();
}
inline const ::std::string& Item_Data::desctitle() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.descTitle)
  return *desctitle_;
}
inline void Item_Data::set_desctitle(const ::std::string& value) {
  set_has_desctitle();
  if (desctitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desctitle_ = new ::std::string;
  }
  desctitle_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.descTitle)
}
inline void Item_Data::set_desctitle(const char* value) {
  set_has_desctitle();
  if (desctitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desctitle_ = new ::std::string;
  }
  desctitle_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.descTitle)
}
inline void Item_Data::set_desctitle(const void* value, size_t size) {
  set_has_desctitle();
  if (desctitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desctitle_ = new ::std::string;
  }
  desctitle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.descTitle)
}
inline ::std::string* Item_Data::mutable_desctitle() {
  set_has_desctitle();
  if (desctitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desctitle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.descTitle)
  return desctitle_;
}
inline ::std::string* Item_Data::release_desctitle() {
  clear_has_desctitle();
  if (desctitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desctitle_;
    desctitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_desctitle(::std::string* desctitle) {
  if (desctitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desctitle_;
  }
  if (desctitle) {
    set_has_desctitle();
    desctitle_ = desctitle;
  } else {
    clear_has_desctitle();
    desctitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.descTitle)
}

// optional bytes funcDesc = 90;
inline bool Item_Data::has_funcdesc() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Item_Data::set_has_funcdesc() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Item_Data::clear_has_funcdesc() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Item_Data::clear_funcdesc() {
  if (funcdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funcdesc_->clear();
  }
  clear_has_funcdesc();
}
inline const ::std::string& Item_Data::funcdesc() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.funcDesc)
  return *funcdesc_;
}
inline void Item_Data::set_funcdesc(const ::std::string& value) {
  set_has_funcdesc();
  if (funcdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funcdesc_ = new ::std::string;
  }
  funcdesc_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.funcDesc)
}
inline void Item_Data::set_funcdesc(const char* value) {
  set_has_funcdesc();
  if (funcdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funcdesc_ = new ::std::string;
  }
  funcdesc_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.funcDesc)
}
inline void Item_Data::set_funcdesc(const void* value, size_t size) {
  set_has_funcdesc();
  if (funcdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funcdesc_ = new ::std::string;
  }
  funcdesc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.funcDesc)
}
inline ::std::string* Item_Data::mutable_funcdesc() {
  set_has_funcdesc();
  if (funcdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funcdesc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.funcDesc)
  return funcdesc_;
}
inline ::std::string* Item_Data::release_funcdesc() {
  clear_has_funcdesc();
  if (funcdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = funcdesc_;
    funcdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_funcdesc(::std::string* funcdesc) {
  if (funcdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funcdesc_;
  }
  if (funcdesc) {
    set_has_funcdesc();
    funcdesc_ = funcdesc;
  } else {
    clear_has_funcdesc();
    funcdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.funcDesc)
}

// optional bytes desc = 91;
inline bool Item_Data::has_desc() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Item_Data::set_has_desc() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Item_Data::clear_has_desc() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Item_Data::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& Item_Data::desc() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.desc)
  return *desc_;
}
inline void Item_Data::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.desc)
}
inline void Item_Data::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.desc)
}
inline void Item_Data::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.desc)
}
inline ::std::string* Item_Data::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.desc)
  return desc_;
}
inline ::std::string* Item_Data::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.desc)
}

// optional bytes historyDesc = 92;
inline bool Item_Data::has_historydesc() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Item_Data::set_has_historydesc() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Item_Data::clear_has_historydesc() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Item_Data::clear_historydesc() {
  if (historydesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    historydesc_->clear();
  }
  clear_has_historydesc();
}
inline const ::std::string& Item_Data::historydesc() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.historyDesc)
  return *historydesc_;
}
inline void Item_Data::set_historydesc(const ::std::string& value) {
  set_has_historydesc();
  if (historydesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    historydesc_ = new ::std::string;
  }
  historydesc_->assign(value);
  // @@protoc_insertion_point(field_set:data.Item_Data.historyDesc)
}
inline void Item_Data::set_historydesc(const char* value) {
  set_has_historydesc();
  if (historydesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    historydesc_ = new ::std::string;
  }
  historydesc_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Item_Data.historyDesc)
}
inline void Item_Data::set_historydesc(const void* value, size_t size) {
  set_has_historydesc();
  if (historydesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    historydesc_ = new ::std::string;
  }
  historydesc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Item_Data.historyDesc)
}
inline ::std::string* Item_Data::mutable_historydesc() {
  set_has_historydesc();
  if (historydesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    historydesc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Item_Data.historyDesc)
  return historydesc_;
}
inline ::std::string* Item_Data::release_historydesc() {
  clear_has_historydesc();
  if (historydesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = historydesc_;
    historydesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item_Data::set_allocated_historydesc(::std::string* historydesc) {
  if (historydesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete historydesc_;
  }
  if (historydesc) {
    set_has_historydesc();
    historydesc_ = historydesc;
  } else {
    clear_has_historydesc();
    historydesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Item_Data.historyDesc)
}

// optional int32 timestamp = 93;
inline bool Item_Data::has_timestamp() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Item_Data::set_has_timestamp() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Item_Data::clear_has_timestamp() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Item_Data::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 Item_Data::timestamp() const {
  // @@protoc_insertion_point(field_get:data.Item_Data.timestamp)
  return timestamp_;
}
inline void Item_Data::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:data.Item_Data.timestamp)
}

// -------------------------------------------------------------------

// Skill_General_Data

// optional int32 spellActState = 1;
inline bool Skill_General_Data::has_spellactstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Skill_General_Data::set_has_spellactstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Skill_General_Data::clear_has_spellactstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Skill_General_Data::clear_spellactstate() {
  spellactstate_ = 0;
  clear_has_spellactstate();
}
inline ::google::protobuf::int32 Skill_General_Data::spellactstate() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.spellActState)
  return spellactstate_;
}
inline void Skill_General_Data::set_spellactstate(::google::protobuf::int32 value) {
  set_has_spellactstate();
  spellactstate_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.spellActState)
}

// optional int32 castType = 2;
inline bool Skill_General_Data::has_casttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Skill_General_Data::set_has_casttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Skill_General_Data::clear_has_casttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Skill_General_Data::clear_casttype() {
  casttype_ = 0;
  clear_has_casttype();
}
inline ::google::protobuf::int32 Skill_General_Data::casttype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.castType)
  return casttype_;
}
inline void Skill_General_Data::set_casttype(::google::protobuf::int32 value) {
  set_has_casttype();
  casttype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.castType)
}

// optional float spellTime = 3;
inline bool Skill_General_Data::has_spelltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Skill_General_Data::set_has_spelltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Skill_General_Data::clear_has_spelltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Skill_General_Data::clear_spelltime() {
  spelltime_ = 0;
  clear_has_spelltime();
}
inline float Skill_General_Data::spelltime() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.spellTime)
  return spelltime_;
}
inline void Skill_General_Data::set_spelltime(float value) {
  set_has_spelltime();
  spelltime_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.spellTime)
}

// optional bytes seAfterCalc = 4;
inline bool Skill_General_Data::has_seaftercalc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Skill_General_Data::set_has_seaftercalc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Skill_General_Data::clear_has_seaftercalc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Skill_General_Data::clear_seaftercalc() {
  if (seaftercalc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seaftercalc_->clear();
  }
  clear_has_seaftercalc();
}
inline const ::std::string& Skill_General_Data::seaftercalc() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.seAfterCalc)
  return *seaftercalc_;
}
inline void Skill_General_Data::set_seaftercalc(const ::std::string& value) {
  set_has_seaftercalc();
  if (seaftercalc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seaftercalc_ = new ::std::string;
  }
  seaftercalc_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.seAfterCalc)
}
inline void Skill_General_Data::set_seaftercalc(const char* value) {
  set_has_seaftercalc();
  if (seaftercalc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seaftercalc_ = new ::std::string;
  }
  seaftercalc_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.seAfterCalc)
}
inline void Skill_General_Data::set_seaftercalc(const void* value, size_t size) {
  set_has_seaftercalc();
  if (seaftercalc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seaftercalc_ = new ::std::string;
  }
  seaftercalc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.seAfterCalc)
}
inline ::std::string* Skill_General_Data::mutable_seaftercalc() {
  set_has_seaftercalc();
  if (seaftercalc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seaftercalc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.seAfterCalc)
  return seaftercalc_;
}
inline ::std::string* Skill_General_Data::release_seaftercalc() {
  clear_has_seaftercalc();
  if (seaftercalc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seaftercalc_;
    seaftercalc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_seaftercalc(::std::string* seaftercalc) {
  if (seaftercalc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seaftercalc_;
  }
  if (seaftercalc) {
    set_has_seaftercalc();
    seaftercalc_ = seaftercalc;
  } else {
    clear_has_seaftercalc();
    seaftercalc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.seAfterCalc)
}

// optional bytes tgtSelectStrategy = 5;
inline bool Skill_General_Data::has_tgtselectstrategy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Skill_General_Data::set_has_tgtselectstrategy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Skill_General_Data::clear_has_tgtselectstrategy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Skill_General_Data::clear_tgtselectstrategy() {
  if (tgtselectstrategy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tgtselectstrategy_->clear();
  }
  clear_has_tgtselectstrategy();
}
inline const ::std::string& Skill_General_Data::tgtselectstrategy() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtSelectStrategy)
  return *tgtselectstrategy_;
}
inline void Skill_General_Data::set_tgtselectstrategy(const ::std::string& value) {
  set_has_tgtselectstrategy();
  if (tgtselectstrategy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tgtselectstrategy_ = new ::std::string;
  }
  tgtselectstrategy_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtSelectStrategy)
}
inline void Skill_General_Data::set_tgtselectstrategy(const char* value) {
  set_has_tgtselectstrategy();
  if (tgtselectstrategy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tgtselectstrategy_ = new ::std::string;
  }
  tgtselectstrategy_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.tgtSelectStrategy)
}
inline void Skill_General_Data::set_tgtselectstrategy(const void* value, size_t size) {
  set_has_tgtselectstrategy();
  if (tgtselectstrategy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tgtselectstrategy_ = new ::std::string;
  }
  tgtselectstrategy_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.tgtSelectStrategy)
}
inline ::std::string* Skill_General_Data::mutable_tgtselectstrategy() {
  set_has_tgtselectstrategy();
  if (tgtselectstrategy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tgtselectstrategy_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.tgtSelectStrategy)
  return tgtselectstrategy_;
}
inline ::std::string* Skill_General_Data::release_tgtselectstrategy() {
  clear_has_tgtselectstrategy();
  if (tgtselectstrategy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tgtselectstrategy_;
    tgtselectstrategy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_tgtselectstrategy(::std::string* tgtselectstrategy) {
  if (tgtselectstrategy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tgtselectstrategy_;
  }
  if (tgtselectstrategy) {
    set_has_tgtselectstrategy();
    tgtselectstrategy_ = tgtselectstrategy;
  } else {
    clear_has_tgtselectstrategy();
    tgtselectstrategy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.tgtSelectStrategy)
}

// optional bytes mainEnhEff = 6;
inline bool Skill_General_Data::has_mainenheff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Skill_General_Data::set_has_mainenheff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Skill_General_Data::clear_has_mainenheff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Skill_General_Data::clear_mainenheff() {
  if (mainenheff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mainenheff_->clear();
  }
  clear_has_mainenheff();
}
inline const ::std::string& Skill_General_Data::mainenheff() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.mainEnhEff)
  return *mainenheff_;
}
inline void Skill_General_Data::set_mainenheff(const ::std::string& value) {
  set_has_mainenheff();
  if (mainenheff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mainenheff_ = new ::std::string;
  }
  mainenheff_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.mainEnhEff)
}
inline void Skill_General_Data::set_mainenheff(const char* value) {
  set_has_mainenheff();
  if (mainenheff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mainenheff_ = new ::std::string;
  }
  mainenheff_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.mainEnhEff)
}
inline void Skill_General_Data::set_mainenheff(const void* value, size_t size) {
  set_has_mainenheff();
  if (mainenheff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mainenheff_ = new ::std::string;
  }
  mainenheff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.mainEnhEff)
}
inline ::std::string* Skill_General_Data::mutable_mainenheff() {
  set_has_mainenheff();
  if (mainenheff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mainenheff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.mainEnhEff)
  return mainenheff_;
}
inline ::std::string* Skill_General_Data::release_mainenheff() {
  clear_has_mainenheff();
  if (mainenheff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mainenheff_;
    mainenheff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_mainenheff(::std::string* mainenheff) {
  if (mainenheff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mainenheff_;
  }
  if (mainenheff) {
    set_has_mainenheff();
    mainenheff_ = mainenheff;
  } else {
    clear_has_mainenheff();
    mainenheff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.mainEnhEff)
}

// optional int32 checkMoveId = 7;
inline bool Skill_General_Data::has_checkmoveid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Skill_General_Data::set_has_checkmoveid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Skill_General_Data::clear_has_checkmoveid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Skill_General_Data::clear_checkmoveid() {
  checkmoveid_ = 0;
  clear_has_checkmoveid();
}
inline ::google::protobuf::int32 Skill_General_Data::checkmoveid() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.checkMoveId)
  return checkmoveid_;
}
inline void Skill_General_Data::set_checkmoveid(::google::protobuf::int32 value) {
  set_has_checkmoveid();
  checkmoveid_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.checkMoveId)
}

// optional int32 clientCalcNum = 8;
inline bool Skill_General_Data::has_clientcalcnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Skill_General_Data::set_has_clientcalcnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Skill_General_Data::clear_has_clientcalcnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Skill_General_Data::clear_clientcalcnum() {
  clientcalcnum_ = 0;
  clear_has_clientcalcnum();
}
inline ::google::protobuf::int32 Skill_General_Data::clientcalcnum() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.clientCalcNum)
  return clientcalcnum_;
}
inline void Skill_General_Data::set_clientcalcnum(::google::protobuf::int32 value) {
  set_has_clientcalcnum();
  clientcalcnum_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.clientCalcNum)
}

// optional int32 showIndicator = 9;
inline bool Skill_General_Data::has_showindicator() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Skill_General_Data::set_has_showindicator() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Skill_General_Data::clear_has_showindicator() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Skill_General_Data::clear_showindicator() {
  showindicator_ = 0;
  clear_has_showindicator();
}
inline ::google::protobuf::int32 Skill_General_Data::showindicator() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.showIndicator)
  return showindicator_;
}
inline void Skill_General_Data::set_showindicator(::google::protobuf::int32 value) {
  set_has_showindicator();
  showindicator_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.showIndicator)
}

// optional int32 lv = 10;
inline bool Skill_General_Data::has_lv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Skill_General_Data::set_has_lv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Skill_General_Data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Skill_General_Data::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 Skill_General_Data::lv() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.lv)
  return lv_;
}
inline void Skill_General_Data::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.lv)
}

// optional bytes creations = 11;
inline bool Skill_General_Data::has_creations() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Skill_General_Data::set_has_creations() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Skill_General_Data::clear_has_creations() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Skill_General_Data::clear_creations() {
  if (creations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creations_->clear();
  }
  clear_has_creations();
}
inline const ::std::string& Skill_General_Data::creations() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.creations)
  return *creations_;
}
inline void Skill_General_Data::set_creations(const ::std::string& value) {
  set_has_creations();
  if (creations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creations_ = new ::std::string;
  }
  creations_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.creations)
}
inline void Skill_General_Data::set_creations(const char* value) {
  set_has_creations();
  if (creations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creations_ = new ::std::string;
  }
  creations_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.creations)
}
inline void Skill_General_Data::set_creations(const void* value, size_t size) {
  set_has_creations();
  if (creations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creations_ = new ::std::string;
  }
  creations_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.creations)
}
inline ::std::string* Skill_General_Data::mutable_creations() {
  set_has_creations();
  if (creations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creations_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.creations)
  return creations_;
}
inline ::std::string* Skill_General_Data::release_creations() {
  clear_has_creations();
  if (creations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creations_;
    creations_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_creations(::std::string* creations) {
  if (creations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creations_;
  }
  if (creations) {
    set_has_creations();
    creations_ = creations;
  } else {
    clear_has_creations();
    creations_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.creations)
}

// optional int32 learnLv = 12;
inline bool Skill_General_Data::has_learnlv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Skill_General_Data::set_has_learnlv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Skill_General_Data::clear_has_learnlv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Skill_General_Data::clear_learnlv() {
  learnlv_ = 0;
  clear_has_learnlv();
}
inline ::google::protobuf::int32 Skill_General_Data::learnlv() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.learnLv)
  return learnlv_;
}
inline void Skill_General_Data::set_learnlv(::google::protobuf::int32 value) {
  set_has_learnlv();
  learnlv_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.learnLv)
}

// optional bytes graph4 = 13;
inline bool Skill_General_Data::has_graph4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Skill_General_Data::set_has_graph4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Skill_General_Data::clear_has_graph4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Skill_General_Data::clear_graph4() {
  if (graph4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph4_->clear();
  }
  clear_has_graph4();
}
inline const ::std::string& Skill_General_Data::graph4() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.graph4)
  return *graph4_;
}
inline void Skill_General_Data::set_graph4(const ::std::string& value) {
  set_has_graph4();
  if (graph4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph4_ = new ::std::string;
  }
  graph4_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.graph4)
}
inline void Skill_General_Data::set_graph4(const char* value) {
  set_has_graph4();
  if (graph4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph4_ = new ::std::string;
  }
  graph4_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.graph4)
}
inline void Skill_General_Data::set_graph4(const void* value, size_t size) {
  set_has_graph4();
  if (graph4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph4_ = new ::std::string;
  }
  graph4_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.graph4)
}
inline ::std::string* Skill_General_Data::mutable_graph4() {
  set_has_graph4();
  if (graph4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph4_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.graph4)
  return graph4_;
}
inline ::std::string* Skill_General_Data::release_graph4() {
  clear_has_graph4();
  if (graph4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graph4_;
    graph4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_graph4(::std::string* graph4) {
  if (graph4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph4_;
  }
  if (graph4) {
    set_has_graph4();
    graph4_ = graph4;
  } else {
    clear_has_graph4();
    graph4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.graph4)
}

// optional int32 castBreakable = 14;
inline bool Skill_General_Data::has_castbreakable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Skill_General_Data::set_has_castbreakable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Skill_General_Data::clear_has_castbreakable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Skill_General_Data::clear_castbreakable() {
  castbreakable_ = 0;
  clear_has_castbreakable();
}
inline ::google::protobuf::int32 Skill_General_Data::castbreakable() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.castBreakable)
  return castbreakable_;
}
inline void Skill_General_Data::set_castbreakable(::google::protobuf::int32 value) {
  set_has_castbreakable();
  castbreakable_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.castBreakable)
}

// optional bytes selfNoStates = 15;
inline bool Skill_General_Data::has_selfnostates() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Skill_General_Data::set_has_selfnostates() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Skill_General_Data::clear_has_selfnostates() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Skill_General_Data::clear_selfnostates() {
  if (selfnostates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfnostates_->clear();
  }
  clear_has_selfnostates();
}
inline const ::std::string& Skill_General_Data::selfnostates() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.selfNoStates)
  return *selfnostates_;
}
inline void Skill_General_Data::set_selfnostates(const ::std::string& value) {
  set_has_selfnostates();
  if (selfnostates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfnostates_ = new ::std::string;
  }
  selfnostates_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.selfNoStates)
}
inline void Skill_General_Data::set_selfnostates(const char* value) {
  set_has_selfnostates();
  if (selfnostates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfnostates_ = new ::std::string;
  }
  selfnostates_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.selfNoStates)
}
inline void Skill_General_Data::set_selfnostates(const void* value, size_t size) {
  set_has_selfnostates();
  if (selfnostates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfnostates_ = new ::std::string;
  }
  selfnostates_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.selfNoStates)
}
inline ::std::string* Skill_General_Data::mutable_selfnostates() {
  set_has_selfnostates();
  if (selfnostates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfnostates_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.selfNoStates)
  return selfnostates_;
}
inline ::std::string* Skill_General_Data::release_selfnostates() {
  clear_has_selfnostates();
  if (selfnostates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = selfnostates_;
    selfnostates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_selfnostates(::std::string* selfnostates) {
  if (selfnostates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfnostates_;
  }
  if (selfnostates) {
    set_has_selfnostates();
    selfnostates_ = selfnostates;
  } else {
    clear_has_selfnostates();
    selfnostates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.selfNoStates)
}

// optional int32 school = 16;
inline bool Skill_General_Data::has_school() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Skill_General_Data::set_has_school() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Skill_General_Data::clear_has_school() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Skill_General_Data::clear_school() {
  school_ = 0;
  clear_has_school();
}
inline ::google::protobuf::int32 Skill_General_Data::school() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.school)
  return school_;
}
inline void Skill_General_Data::set_school(::google::protobuf::int32 value) {
  set_has_school();
  school_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.school)
}

// optional float flySpeed = 17;
inline bool Skill_General_Data::has_flyspeed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Skill_General_Data::set_has_flyspeed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Skill_General_Data::clear_has_flyspeed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Skill_General_Data::clear_flyspeed() {
  flyspeed_ = 0;
  clear_has_flyspeed();
}
inline float Skill_General_Data::flyspeed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.flySpeed)
  return flyspeed_;
}
inline void Skill_General_Data::set_flyspeed(float value) {
  set_has_flyspeed();
  flyspeed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.flySpeed)
}

// optional bytes name = 18;
inline bool Skill_General_Data::has_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Skill_General_Data::set_has_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Skill_General_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Skill_General_Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Skill_General_Data::name() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.name)
  return *name_;
}
inline void Skill_General_Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.name)
}
inline void Skill_General_Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.name)
}
inline void Skill_General_Data::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.name)
}
inline ::std::string* Skill_General_Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.name)
  return name_;
}
inline ::std::string* Skill_General_Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.name)
}

// optional bytes collideHeight = 19;
inline bool Skill_General_Data::has_collideheight() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Skill_General_Data::set_has_collideheight() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Skill_General_Data::clear_has_collideheight() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Skill_General_Data::clear_collideheight() {
  if (collideheight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collideheight_->clear();
  }
  clear_has_collideheight();
}
inline const ::std::string& Skill_General_Data::collideheight() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.collideHeight)
  return *collideheight_;
}
inline void Skill_General_Data::set_collideheight(const ::std::string& value) {
  set_has_collideheight();
  if (collideheight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collideheight_ = new ::std::string;
  }
  collideheight_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.collideHeight)
}
inline void Skill_General_Data::set_collideheight(const char* value) {
  set_has_collideheight();
  if (collideheight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collideheight_ = new ::std::string;
  }
  collideheight_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.collideHeight)
}
inline void Skill_General_Data::set_collideheight(const void* value, size_t size) {
  set_has_collideheight();
  if (collideheight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collideheight_ = new ::std::string;
  }
  collideheight_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.collideHeight)
}
inline ::std::string* Skill_General_Data::mutable_collideheight() {
  set_has_collideheight();
  if (collideheight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collideheight_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.collideHeight)
  return collideheight_;
}
inline ::std::string* Skill_General_Data::release_collideheight() {
  clear_has_collideheight();
  if (collideheight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = collideheight_;
    collideheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_collideheight(::std::string* collideheight) {
  if (collideheight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collideheight_;
  }
  if (collideheight) {
    set_has_collideheight();
    collideheight_ = collideheight;
  } else {
    clear_has_collideheight();
    collideheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.collideHeight)
}

// optional int32 spellActAura = 20;
inline bool Skill_General_Data::has_spellactaura() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Skill_General_Data::set_has_spellactaura() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Skill_General_Data::clear_has_spellactaura() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Skill_General_Data::clear_spellactaura() {
  spellactaura_ = 0;
  clear_has_spellactaura();
}
inline ::google::protobuf::int32 Skill_General_Data::spellactaura() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.spellActAura)
  return spellactaura_;
}
inline void Skill_General_Data::set_spellactaura(::google::protobuf::int32 value) {
  set_has_spellactaura();
  spellactaura_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.spellActAura)
}

// optional int32 skillType = 21;
inline bool Skill_General_Data::has_skilltype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Skill_General_Data::set_has_skilltype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Skill_General_Data::clear_has_skilltype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Skill_General_Data::clear_skilltype() {
  skilltype_ = 0;
  clear_has_skilltype();
}
inline ::google::protobuf::int32 Skill_General_Data::skilltype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.skillType)
  return skilltype_;
}
inline void Skill_General_Data::set_skilltype(::google::protobuf::int32 value) {
  set_has_skilltype();
  skilltype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.skillType)
}

// optional int32 guidevpNeed = 22;
inline bool Skill_General_Data::has_guidevpneed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Skill_General_Data::set_has_guidevpneed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Skill_General_Data::clear_has_guidevpneed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Skill_General_Data::clear_guidevpneed() {
  guidevpneed_ = 0;
  clear_has_guidevpneed();
}
inline ::google::protobuf::int32 Skill_General_Data::guidevpneed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.guidevpNeed)
  return guidevpneed_;
}
inline void Skill_General_Data::set_guidevpneed(::google::protobuf::int32 value) {
  set_has_guidevpneed();
  guidevpneed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.guidevpNeed)
}

// optional float notTurnTime = 23;
inline bool Skill_General_Data::has_notturntime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Skill_General_Data::set_has_notturntime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Skill_General_Data::clear_has_notturntime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Skill_General_Data::clear_notturntime() {
  notturntime_ = 0;
  clear_has_notturntime();
}
inline float Skill_General_Data::notturntime() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.notTurnTime)
  return notturntime_;
}
inline void Skill_General_Data::set_notturntime(float value) {
  set_has_notturntime();
  notturntime_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.notTurnTime)
}

// optional float noAtkTime = 24;
inline bool Skill_General_Data::has_noatktime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Skill_General_Data::set_has_noatktime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Skill_General_Data::clear_has_noatktime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Skill_General_Data::clear_noatktime() {
  noatktime_ = 0;
  clear_has_noatktime();
}
inline float Skill_General_Data::noatktime() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.noAtkTime)
  return noatktime_;
}
inline void Skill_General_Data::set_noatktime(float value) {
  set_has_noatktime();
  noatktime_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.noAtkTime)
}

// optional int32 isAoe = 25;
inline bool Skill_General_Data::has_isaoe() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Skill_General_Data::set_has_isaoe() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Skill_General_Data::clear_has_isaoe() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Skill_General_Data::clear_isaoe() {
  isaoe_ = 0;
  clear_has_isaoe();
}
inline ::google::protobuf::int32 Skill_General_Data::isaoe() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.isAoe)
  return isaoe_;
}
inline void Skill_General_Data::set_isaoe(::google::protobuf::int32 value) {
  set_has_isaoe();
  isaoe_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.isAoe)
}

// optional int32 ammoNeed = 26;
inline bool Skill_General_Data::has_ammoneed() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Skill_General_Data::set_has_ammoneed() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Skill_General_Data::clear_has_ammoneed() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Skill_General_Data::clear_ammoneed() {
  ammoneed_ = 0;
  clear_has_ammoneed();
}
inline ::google::protobuf::int32 Skill_General_Data::ammoneed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.ammoNeed)
  return ammoneed_;
}
inline void Skill_General_Data::set_ammoneed(::google::protobuf::int32 value) {
  set_has_ammoneed();
  ammoneed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.ammoNeed)
}

// optional float movedelay = 27;
inline bool Skill_General_Data::has_movedelay() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Skill_General_Data::set_has_movedelay() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Skill_General_Data::clear_has_movedelay() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Skill_General_Data::clear_movedelay() {
  movedelay_ = 0;
  clear_has_movedelay();
}
inline float Skill_General_Data::movedelay() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.movedelay)
  return movedelay_;
}
inline void Skill_General_Data::set_movedelay(float value) {
  set_has_movedelay();
  movedelay_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.movedelay)
}

// optional bytes preAmmoType = 28;
inline bool Skill_General_Data::has_preammotype() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Skill_General_Data::set_has_preammotype() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Skill_General_Data::clear_has_preammotype() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Skill_General_Data::clear_preammotype() {
  if (preammotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preammotype_->clear();
  }
  clear_has_preammotype();
}
inline const ::std::string& Skill_General_Data::preammotype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.preAmmoType)
  return *preammotype_;
}
inline void Skill_General_Data::set_preammotype(const ::std::string& value) {
  set_has_preammotype();
  if (preammotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preammotype_ = new ::std::string;
  }
  preammotype_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.preAmmoType)
}
inline void Skill_General_Data::set_preammotype(const char* value) {
  set_has_preammotype();
  if (preammotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preammotype_ = new ::std::string;
  }
  preammotype_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.preAmmoType)
}
inline void Skill_General_Data::set_preammotype(const void* value, size_t size) {
  set_has_preammotype();
  if (preammotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preammotype_ = new ::std::string;
  }
  preammotype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.preAmmoType)
}
inline ::std::string* Skill_General_Data::mutable_preammotype() {
  set_has_preammotype();
  if (preammotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preammotype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.preAmmoType)
  return preammotype_;
}
inline ::std::string* Skill_General_Data::release_preammotype() {
  clear_has_preammotype();
  if (preammotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preammotype_;
    preammotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_preammotype(::std::string* preammotype) {
  if (preammotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preammotype_;
  }
  if (preammotype) {
    set_has_preammotype();
    preammotype_ = preammotype;
  } else {
    clear_has_preammotype();
    preammotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.preAmmoType)
}

// optional int32 hideCastBar = 29;
inline bool Skill_General_Data::has_hidecastbar() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Skill_General_Data::set_has_hidecastbar() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Skill_General_Data::clear_has_hidecastbar() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Skill_General_Data::clear_hidecastbar() {
  hidecastbar_ = 0;
  clear_has_hidecastbar();
}
inline ::google::protobuf::int32 Skill_General_Data::hidecastbar() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.hideCastBar)
  return hidecastbar_;
}
inline void Skill_General_Data::set_hidecastbar(::google::protobuf::int32 value) {
  set_has_hidecastbar();
  hidecastbar_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.hideCastBar)
}

// optional int32 tgtSelf = 30;
inline bool Skill_General_Data::has_tgtself() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Skill_General_Data::set_has_tgtself() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Skill_General_Data::clear_has_tgtself() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Skill_General_Data::clear_tgtself() {
  tgtself_ = 0;
  clear_has_tgtself();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtself() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtSelf)
  return tgtself_;
}
inline void Skill_General_Data::set_tgtself(::google::protobuf::int32 value) {
  set_has_tgtself();
  tgtself_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtSelf)
}

// optional bytes uiShape = 31;
inline bool Skill_General_Data::has_uishape() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Skill_General_Data::set_has_uishape() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Skill_General_Data::clear_has_uishape() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Skill_General_Data::clear_uishape() {
  if (uishape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uishape_->clear();
  }
  clear_has_uishape();
}
inline const ::std::string& Skill_General_Data::uishape() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.uiShape)
  return *uishape_;
}
inline void Skill_General_Data::set_uishape(const ::std::string& value) {
  set_has_uishape();
  if (uishape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uishape_ = new ::std::string;
  }
  uishape_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.uiShape)
}
inline void Skill_General_Data::set_uishape(const char* value) {
  set_has_uishape();
  if (uishape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uishape_ = new ::std::string;
  }
  uishape_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.uiShape)
}
inline void Skill_General_Data::set_uishape(const void* value, size_t size) {
  set_has_uishape();
  if (uishape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uishape_ = new ::std::string;
  }
  uishape_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.uiShape)
}
inline ::std::string* Skill_General_Data::mutable_uishape() {
  set_has_uishape();
  if (uishape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uishape_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.uiShape)
  return uishape_;
}
inline ::std::string* Skill_General_Data::release_uishape() {
  clear_has_uishape();
  if (uishape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uishape_;
    uishape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_uishape(::std::string* uishape) {
  if (uishape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uishape_;
  }
  if (uishape) {
    set_has_uishape();
    uishape_ = uishape;
  } else {
    clear_has_uishape();
    uishape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.uiShape)
}

// optional float indicatorTime = 32;
inline bool Skill_General_Data::has_indicatortime() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Skill_General_Data::set_has_indicatortime() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Skill_General_Data::clear_has_indicatortime() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Skill_General_Data::clear_indicatortime() {
  indicatortime_ = 0;
  clear_has_indicatortime();
}
inline float Skill_General_Data::indicatortime() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.indicatorTime)
  return indicatortime_;
}
inline void Skill_General_Data::set_indicatortime(float value) {
  set_has_indicatortime();
  indicatortime_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.indicatorTime)
}

// optional float notMoveTime = 33;
inline bool Skill_General_Data::has_notmovetime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Skill_General_Data::set_has_notmovetime() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Skill_General_Data::clear_has_notmovetime() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Skill_General_Data::clear_notmovetime() {
  notmovetime_ = 0;
  clear_has_notmovetime();
}
inline float Skill_General_Data::notmovetime() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.notMoveTime)
  return notmovetime_;
}
inline void Skill_General_Data::set_notmovetime(float value) {
  set_has_notmovetime();
  notmovetime_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.notMoveTime)
}

// optional int32 spellCharge = 34;
inline bool Skill_General_Data::has_spellcharge() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Skill_General_Data::set_has_spellcharge() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Skill_General_Data::clear_has_spellcharge() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Skill_General_Data::clear_spellcharge() {
  spellcharge_ = 0;
  clear_has_spellcharge();
}
inline ::google::protobuf::int32 Skill_General_Data::spellcharge() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.spellCharge)
  return spellcharge_;
}
inline void Skill_General_Data::set_spellcharge(::google::protobuf::int32 value) {
  set_has_spellcharge();
  spellcharge_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.spellCharge)
}

// optional bytes selfStates = 35;
inline bool Skill_General_Data::has_selfstates() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Skill_General_Data::set_has_selfstates() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Skill_General_Data::clear_has_selfstates() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Skill_General_Data::clear_selfstates() {
  if (selfstates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfstates_->clear();
  }
  clear_has_selfstates();
}
inline const ::std::string& Skill_General_Data::selfstates() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.selfStates)
  return *selfstates_;
}
inline void Skill_General_Data::set_selfstates(const ::std::string& value) {
  set_has_selfstates();
  if (selfstates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfstates_ = new ::std::string;
  }
  selfstates_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.selfStates)
}
inline void Skill_General_Data::set_selfstates(const char* value) {
  set_has_selfstates();
  if (selfstates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfstates_ = new ::std::string;
  }
  selfstates_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.selfStates)
}
inline void Skill_General_Data::set_selfstates(const void* value, size_t size) {
  set_has_selfstates();
  if (selfstates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfstates_ = new ::std::string;
  }
  selfstates_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.selfStates)
}
inline ::std::string* Skill_General_Data::mutable_selfstates() {
  set_has_selfstates();
  if (selfstates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfstates_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.selfStates)
  return selfstates_;
}
inline ::std::string* Skill_General_Data::release_selfstates() {
  clear_has_selfstates();
  if (selfstates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = selfstates_;
    selfstates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_selfstates(::std::string* selfstates) {
  if (selfstates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfstates_;
  }
  if (selfstates) {
    set_has_selfstates();
    selfstates_ = selfstates;
  } else {
    clear_has_selfstates();
    selfstates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.selfStates)
}

// optional int32 preSpell = 36;
inline bool Skill_General_Data::has_prespell() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Skill_General_Data::set_has_prespell() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Skill_General_Data::clear_has_prespell() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Skill_General_Data::clear_prespell() {
  prespell_ = 0;
  clear_has_prespell();
}
inline ::google::protobuf::int32 Skill_General_Data::prespell() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.preSpell)
  return prespell_;
}
inline void Skill_General_Data::set_prespell(::google::protobuf::int32 value) {
  set_has_prespell();
  prespell_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.preSpell)
}

// optional bytes rangeMax = 37;
inline bool Skill_General_Data::has_rangemax() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Skill_General_Data::set_has_rangemax() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Skill_General_Data::clear_has_rangemax() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Skill_General_Data::clear_rangemax() {
  if (rangemax_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rangemax_->clear();
  }
  clear_has_rangemax();
}
inline const ::std::string& Skill_General_Data::rangemax() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.rangeMax)
  return *rangemax_;
}
inline void Skill_General_Data::set_rangemax(const ::std::string& value) {
  set_has_rangemax();
  if (rangemax_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rangemax_ = new ::std::string;
  }
  rangemax_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.rangeMax)
}
inline void Skill_General_Data::set_rangemax(const char* value) {
  set_has_rangemax();
  if (rangemax_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rangemax_ = new ::std::string;
  }
  rangemax_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.rangeMax)
}
inline void Skill_General_Data::set_rangemax(const void* value, size_t size) {
  set_has_rangemax();
  if (rangemax_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rangemax_ = new ::std::string;
  }
  rangemax_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.rangeMax)
}
inline ::std::string* Skill_General_Data::mutable_rangemax() {
  set_has_rangemax();
  if (rangemax_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rangemax_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.rangeMax)
  return rangemax_;
}
inline ::std::string* Skill_General_Data::release_rangemax() {
  clear_has_rangemax();
  if (rangemax_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rangemax_;
    rangemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_rangemax(::std::string* rangemax) {
  if (rangemax_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rangemax_;
  }
  if (rangemax) {
    set_has_rangemax();
    rangemax_ = rangemax;
  } else {
    clear_has_rangemax();
    rangemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.rangeMax)
}

// optional int32 autoUseSkill = 38;
inline bool Skill_General_Data::has_autouseskill() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Skill_General_Data::set_has_autouseskill() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Skill_General_Data::clear_has_autouseskill() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Skill_General_Data::clear_autouseskill() {
  autouseskill_ = 0;
  clear_has_autouseskill();
}
inline ::google::protobuf::int32 Skill_General_Data::autouseskill() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.autoUseSkill)
  return autouseskill_;
}
inline void Skill_General_Data::set_autouseskill(::google::protobuf::int32 value) {
  set_has_autouseskill();
  autouseskill_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.autoUseSkill)
}

// optional float moveSpeed = 39;
inline bool Skill_General_Data::has_movespeed() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Skill_General_Data::set_has_movespeed() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Skill_General_Data::clear_has_movespeed() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Skill_General_Data::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline float Skill_General_Data::movespeed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.moveSpeed)
  return movespeed_;
}
inline void Skill_General_Data::set_movespeed(float value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.moveSpeed)
}

// optional int32 tgtAllType = 40;
inline bool Skill_General_Data::has_tgtalltype() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Skill_General_Data::set_has_tgtalltype() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Skill_General_Data::clear_has_tgtalltype() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Skill_General_Data::clear_tgtalltype() {
  tgtalltype_ = 0;
  clear_has_tgtalltype();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtalltype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtAllType)
  return tgtalltype_;
}
inline void Skill_General_Data::set_tgtalltype(::google::protobuf::int32 value) {
  set_has_tgtalltype();
  tgtalltype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtAllType)
}

// optional int32 rangeMin = 41;
inline bool Skill_General_Data::has_rangemin() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Skill_General_Data::set_has_rangemin() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Skill_General_Data::clear_has_rangemin() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Skill_General_Data::clear_rangemin() {
  rangemin_ = 0;
  clear_has_rangemin();
}
inline ::google::protobuf::int32 Skill_General_Data::rangemin() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.rangeMin)
  return rangemin_;
}
inline void Skill_General_Data::set_rangemin(::google::protobuf::int32 value) {
  set_has_rangemin();
  rangemin_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.rangeMin)
}

// optional bytes circleShape = 42;
inline bool Skill_General_Data::has_circleshape() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Skill_General_Data::set_has_circleshape() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Skill_General_Data::clear_has_circleshape() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Skill_General_Data::clear_circleshape() {
  if (circleshape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    circleshape_->clear();
  }
  clear_has_circleshape();
}
inline const ::std::string& Skill_General_Data::circleshape() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.circleShape)
  return *circleshape_;
}
inline void Skill_General_Data::set_circleshape(const ::std::string& value) {
  set_has_circleshape();
  if (circleshape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    circleshape_ = new ::std::string;
  }
  circleshape_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.circleShape)
}
inline void Skill_General_Data::set_circleshape(const char* value) {
  set_has_circleshape();
  if (circleshape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    circleshape_ = new ::std::string;
  }
  circleshape_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.circleShape)
}
inline void Skill_General_Data::set_circleshape(const void* value, size_t size) {
  set_has_circleshape();
  if (circleshape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    circleshape_ = new ::std::string;
  }
  circleshape_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.circleShape)
}
inline ::std::string* Skill_General_Data::mutable_circleshape() {
  set_has_circleshape();
  if (circleshape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    circleshape_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.circleShape)
  return circleshape_;
}
inline ::std::string* Skill_General_Data::release_circleshape() {
  clear_has_circleshape();
  if (circleshape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = circleshape_;
    circleshape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_circleshape(::std::string* circleshape) {
  if (circleshape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete circleshape_;
  }
  if (circleshape) {
    set_has_circleshape();
    circleshape_ = circleshape;
  } else {
    clear_has_circleshape();
    circleshape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.circleShape)
}

// optional int32 spellMoveable = 43;
inline bool Skill_General_Data::has_spellmoveable() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Skill_General_Data::set_has_spellmoveable() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Skill_General_Data::clear_has_spellmoveable() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Skill_General_Data::clear_spellmoveable() {
  spellmoveable_ = 0;
  clear_has_spellmoveable();
}
inline ::google::protobuf::int32 Skill_General_Data::spellmoveable() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.spellMoveable)
  return spellmoveable_;
}
inline void Skill_General_Data::set_spellmoveable(::google::protobuf::int32 value) {
  set_has_spellmoveable();
  spellmoveable_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.spellMoveable)
}

// optional float wsAdd2 = 44;
inline bool Skill_General_Data::has_wsadd2() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Skill_General_Data::set_has_wsadd2() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Skill_General_Data::clear_has_wsadd2() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Skill_General_Data::clear_wsadd2() {
  wsadd2_ = 0;
  clear_has_wsadd2();
}
inline float Skill_General_Data::wsadd2() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.wsAdd2)
  return wsadd2_;
}
inline void Skill_General_Data::set_wsadd2(float value) {
  set_has_wsadd2();
  wsadd2_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.wsAdd2)
}

// optional int32 wsAdd1 = 45;
inline bool Skill_General_Data::has_wsadd1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Skill_General_Data::set_has_wsadd1() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Skill_General_Data::clear_has_wsadd1() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Skill_General_Data::clear_wsadd1() {
  wsadd1_ = 0;
  clear_has_wsadd1();
}
inline ::google::protobuf::int32 Skill_General_Data::wsadd1() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.wsAdd1)
  return wsadd1_;
}
inline void Skill_General_Data::set_wsadd1(::google::protobuf::int32 value) {
  set_has_wsadd1();
  wsadd1_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.wsAdd1)
}

// optional int32 restoreDelayCd = 46;
inline bool Skill_General_Data::has_restoredelaycd() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Skill_General_Data::set_has_restoredelaycd() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Skill_General_Data::clear_has_restoredelaycd() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Skill_General_Data::clear_restoredelaycd() {
  restoredelaycd_ = 0;
  clear_has_restoredelaycd();
}
inline ::google::protobuf::int32 Skill_General_Data::restoredelaycd() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.restoreDelayCd)
  return restoredelaycd_;
}
inline void Skill_General_Data::set_restoredelaycd(::google::protobuf::int32 value) {
  set_has_restoredelaycd();
  restoredelaycd_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.restoreDelayCd)
}

// optional int32 useableInStub = 47;
inline bool Skill_General_Data::has_useableinstub() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Skill_General_Data::set_has_useableinstub() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Skill_General_Data::clear_has_useableinstub() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Skill_General_Data::clear_useableinstub() {
  useableinstub_ = 0;
  clear_has_useableinstub();
}
inline ::google::protobuf::int32 Skill_General_Data::useableinstub() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.useableInStub)
  return useableinstub_;
}
inline void Skill_General_Data::set_useableinstub(::google::protobuf::int32 value) {
  set_has_useableinstub();
  useableinstub_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.useableInStub)
}

// optional int32 selfHpMorePct = 48;
inline bool Skill_General_Data::has_selfhpmorepct() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Skill_General_Data::set_has_selfhpmorepct() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Skill_General_Data::clear_has_selfhpmorepct() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Skill_General_Data::clear_selfhpmorepct() {
  selfhpmorepct_ = 0;
  clear_has_selfhpmorepct();
}
inline ::google::protobuf::int32 Skill_General_Data::selfhpmorepct() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.selfHpMorePct)
  return selfhpmorepct_;
}
inline void Skill_General_Data::set_selfhpmorepct(::google::protobuf::int32 value) {
  set_has_selfhpmorepct();
  selfhpmorepct_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.selfHpMorePct)
}

// optional int32 noTgt = 49;
inline bool Skill_General_Data::has_notgt() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Skill_General_Data::set_has_notgt() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Skill_General_Data::clear_has_notgt() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Skill_General_Data::clear_notgt() {
  notgt_ = 0;
  clear_has_notgt();
}
inline ::google::protobuf::int32 Skill_General_Data::notgt() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.noTgt)
  return notgt_;
}
inline void Skill_General_Data::set_notgt(::google::protobuf::int32 value) {
  set_has_notgt();
  notgt_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.noTgt)
}

// optional int32 wsNeed1 = 50;
inline bool Skill_General_Data::has_wsneed1() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Skill_General_Data::set_has_wsneed1() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Skill_General_Data::clear_has_wsneed1() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Skill_General_Data::clear_wsneed1() {
  wsneed1_ = 0;
  clear_has_wsneed1();
}
inline ::google::protobuf::int32 Skill_General_Data::wsneed1() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.wsNeed1)
  return wsneed1_;
}
inline void Skill_General_Data::set_wsneed1(::google::protobuf::int32 value) {
  set_has_wsneed1();
  wsneed1_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.wsNeed1)
}

// optional int32 wsNeed2 = 51;
inline bool Skill_General_Data::has_wsneed2() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Skill_General_Data::set_has_wsneed2() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Skill_General_Data::clear_has_wsneed2() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Skill_General_Data::clear_wsneed2() {
  wsneed2_ = 0;
  clear_has_wsneed2();
}
inline ::google::protobuf::int32 Skill_General_Data::wsneed2() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.wsNeed2)
  return wsneed2_;
}
inline void Skill_General_Data::set_wsneed2(::google::protobuf::int32 value) {
  set_has_wsneed2();
  wsneed2_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.wsNeed2)
}

// optional int32 tgtSelfFriendType = 52;
inline bool Skill_General_Data::has_tgtselffriendtype() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Skill_General_Data::set_has_tgtselffriendtype() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Skill_General_Data::clear_has_tgtselffriendtype() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Skill_General_Data::clear_tgtselffriendtype() {
  tgtselffriendtype_ = 0;
  clear_has_tgtselffriendtype();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtselffriendtype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtSelfFriendType)
  return tgtselffriendtype_;
}
inline void Skill_General_Data::set_tgtselffriendtype(::google::protobuf::int32 value) {
  set_has_tgtselffriendtype();
  tgtselffriendtype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtSelfFriendType)
}

// optional int32 tgtFriendType = 53;
inline bool Skill_General_Data::has_tgtfriendtype() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Skill_General_Data::set_has_tgtfriendtype() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Skill_General_Data::clear_has_tgtfriendtype() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Skill_General_Data::clear_tgtfriendtype() {
  tgtfriendtype_ = 0;
  clear_has_tgtfriendtype();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtfriendtype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtFriendType)
  return tgtfriendtype_;
}
inline void Skill_General_Data::set_tgtfriendtype(::google::protobuf::int32 value) {
  set_has_tgtfriendtype();
  tgtfriendtype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtFriendType)
}

// optional int32 moveDelayNotAffectCalc = 54;
inline bool Skill_General_Data::has_movedelaynotaffectcalc() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Skill_General_Data::set_has_movedelaynotaffectcalc() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Skill_General_Data::clear_has_movedelaynotaffectcalc() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Skill_General_Data::clear_movedelaynotaffectcalc() {
  movedelaynotaffectcalc_ = 0;
  clear_has_movedelaynotaffectcalc();
}
inline ::google::protobuf::int32 Skill_General_Data::movedelaynotaffectcalc() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.moveDelayNotAffectCalc)
  return movedelaynotaffectcalc_;
}
inline void Skill_General_Data::set_movedelaynotaffectcalc(::google::protobuf::int32 value) {
  set_has_movedelaynotaffectcalc();
  movedelaynotaffectcalc_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.moveDelayNotAffectCalc)
}

// optional float cd = 55;
inline bool Skill_General_Data::has_cd() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Skill_General_Data::set_has_cd() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Skill_General_Data::clear_has_cd() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Skill_General_Data::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline float Skill_General_Data::cd() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.cd)
  return cd_;
}
inline void Skill_General_Data::set_cd(float value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.cd)
}

// optional int32 flyNoDelay = 56;
inline bool Skill_General_Data::has_flynodelay() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Skill_General_Data::set_has_flynodelay() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Skill_General_Data::clear_has_flynodelay() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Skill_General_Data::clear_flynodelay() {
  flynodelay_ = 0;
  clear_has_flynodelay();
}
inline ::google::protobuf::int32 Skill_General_Data::flynodelay() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.flyNoDelay)
  return flynodelay_;
}
inline void Skill_General_Data::set_flynodelay(::google::protobuf::int32 value) {
  set_has_flynodelay();
  flynodelay_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.flyNoDelay)
}

// optional bytes detailEff2 = 57;
inline bool Skill_General_Data::has_detaileff2() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Skill_General_Data::set_has_detaileff2() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Skill_General_Data::clear_has_detaileff2() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Skill_General_Data::clear_detaileff2() {
  if (detaileff2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff2_->clear();
  }
  clear_has_detaileff2();
}
inline const ::std::string& Skill_General_Data::detaileff2() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.detailEff2)
  return *detaileff2_;
}
inline void Skill_General_Data::set_detaileff2(const ::std::string& value) {
  set_has_detaileff2();
  if (detaileff2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff2_ = new ::std::string;
  }
  detaileff2_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.detailEff2)
}
inline void Skill_General_Data::set_detaileff2(const char* value) {
  set_has_detaileff2();
  if (detaileff2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff2_ = new ::std::string;
  }
  detaileff2_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.detailEff2)
}
inline void Skill_General_Data::set_detaileff2(const void* value, size_t size) {
  set_has_detaileff2();
  if (detaileff2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff2_ = new ::std::string;
  }
  detaileff2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.detailEff2)
}
inline ::std::string* Skill_General_Data::mutable_detaileff2() {
  set_has_detaileff2();
  if (detaileff2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.detailEff2)
  return detaileff2_;
}
inline ::std::string* Skill_General_Data::release_detaileff2() {
  clear_has_detaileff2();
  if (detaileff2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detaileff2_;
    detaileff2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_detaileff2(::std::string* detaileff2) {
  if (detaileff2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detaileff2_;
  }
  if (detaileff2) {
    set_has_detaileff2();
    detaileff2_ = detaileff2;
  } else {
    clear_has_detaileff2();
    detaileff2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.detailEff2)
}

// optional bytes castDelay = 58;
inline bool Skill_General_Data::has_castdelay() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Skill_General_Data::set_has_castdelay() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Skill_General_Data::clear_has_castdelay() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Skill_General_Data::clear_castdelay() {
  if (castdelay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    castdelay_->clear();
  }
  clear_has_castdelay();
}
inline const ::std::string& Skill_General_Data::castdelay() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.castDelay)
  return *castdelay_;
}
inline void Skill_General_Data::set_castdelay(const ::std::string& value) {
  set_has_castdelay();
  if (castdelay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    castdelay_ = new ::std::string;
  }
  castdelay_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.castDelay)
}
inline void Skill_General_Data::set_castdelay(const char* value) {
  set_has_castdelay();
  if (castdelay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    castdelay_ = new ::std::string;
  }
  castdelay_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.castDelay)
}
inline void Skill_General_Data::set_castdelay(const void* value, size_t size) {
  set_has_castdelay();
  if (castdelay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    castdelay_ = new ::std::string;
  }
  castdelay_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.castDelay)
}
inline ::std::string* Skill_General_Data::mutable_castdelay() {
  set_has_castdelay();
  if (castdelay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    castdelay_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.castDelay)
  return castdelay_;
}
inline ::std::string* Skill_General_Data::release_castdelay() {
  clear_has_castdelay();
  if (castdelay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = castdelay_;
    castdelay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_castdelay(::std::string* castdelay) {
  if (castdelay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete castdelay_;
  }
  if (castdelay) {
    set_has_castdelay();
    castdelay_ = castdelay;
  } else {
    clear_has_castdelay();
    castdelay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.castDelay)
}

// optional int32 tgtSelfEnemyType = 59;
inline bool Skill_General_Data::has_tgtselfenemytype() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Skill_General_Data::set_has_tgtselfenemytype() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Skill_General_Data::clear_has_tgtselfenemytype() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Skill_General_Data::clear_tgtselfenemytype() {
  tgtselfenemytype_ = 0;
  clear_has_tgtselfenemytype();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtselfenemytype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtSelfEnemyType)
  return tgtselfenemytype_;
}
inline void Skill_General_Data::set_tgtselfenemytype(::google::protobuf::int32 value) {
  set_has_tgtselfenemytype();
  tgtselfenemytype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtSelfEnemyType)
}

// optional int32 switchState = 60;
inline bool Skill_General_Data::has_switchstate() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Skill_General_Data::set_has_switchstate() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Skill_General_Data::clear_has_switchstate() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Skill_General_Data::clear_switchstate() {
  switchstate_ = 0;
  clear_has_switchstate();
}
inline ::google::protobuf::int32 Skill_General_Data::switchstate() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.switchState)
  return switchstate_;
}
inline void Skill_General_Data::set_switchstate(::google::protobuf::int32 value) {
  set_has_switchstate();
  switchstate_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.switchState)
}

// optional bytes detailEff3 = 61;
inline bool Skill_General_Data::has_detaileff3() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Skill_General_Data::set_has_detaileff3() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Skill_General_Data::clear_has_detaileff3() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Skill_General_Data::clear_detaileff3() {
  if (detaileff3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff3_->clear();
  }
  clear_has_detaileff3();
}
inline const ::std::string& Skill_General_Data::detaileff3() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.detailEff3)
  return *detaileff3_;
}
inline void Skill_General_Data::set_detaileff3(const ::std::string& value) {
  set_has_detaileff3();
  if (detaileff3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff3_ = new ::std::string;
  }
  detaileff3_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.detailEff3)
}
inline void Skill_General_Data::set_detaileff3(const char* value) {
  set_has_detaileff3();
  if (detaileff3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff3_ = new ::std::string;
  }
  detaileff3_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.detailEff3)
}
inline void Skill_General_Data::set_detaileff3(const void* value, size_t size) {
  set_has_detaileff3();
  if (detaileff3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff3_ = new ::std::string;
  }
  detaileff3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.detailEff3)
}
inline ::std::string* Skill_General_Data::mutable_detaileff3() {
  set_has_detaileff3();
  if (detaileff3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.detailEff3)
  return detaileff3_;
}
inline ::std::string* Skill_General_Data::release_detaileff3() {
  clear_has_detaileff3();
  if (detaileff3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detaileff3_;
    detaileff3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_detaileff3(::std::string* detaileff3) {
  if (detaileff3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detaileff3_;
  }
  if (detaileff3) {
    set_has_detaileff3();
    detaileff3_ = detaileff3;
  } else {
    clear_has_detaileff3();
    detaileff3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.detailEff3)
}

// optional float castTime = 62;
inline bool Skill_General_Data::has_casttime() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Skill_General_Data::set_has_casttime() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Skill_General_Data::clear_has_casttime() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Skill_General_Data::clear_casttime() {
  casttime_ = 0;
  clear_has_casttime();
}
inline float Skill_General_Data::casttime() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.castTime)
  return casttime_;
}
inline void Skill_General_Data::set_casttime(float value) {
  set_has_casttime();
  casttime_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.castTime)
}

// optional bytes detailEff1 = 63;
inline bool Skill_General_Data::has_detaileff1() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Skill_General_Data::set_has_detaileff1() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Skill_General_Data::clear_has_detaileff1() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Skill_General_Data::clear_detaileff1() {
  if (detaileff1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff1_->clear();
  }
  clear_has_detaileff1();
}
inline const ::std::string& Skill_General_Data::detaileff1() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.detailEff1)
  return *detaileff1_;
}
inline void Skill_General_Data::set_detaileff1(const ::std::string& value) {
  set_has_detaileff1();
  if (detaileff1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff1_ = new ::std::string;
  }
  detaileff1_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.detailEff1)
}
inline void Skill_General_Data::set_detaileff1(const char* value) {
  set_has_detaileff1();
  if (detaileff1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff1_ = new ::std::string;
  }
  detaileff1_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.detailEff1)
}
inline void Skill_General_Data::set_detaileff1(const void* value, size_t size) {
  set_has_detaileff1();
  if (detaileff1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff1_ = new ::std::string;
  }
  detaileff1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.detailEff1)
}
inline ::std::string* Skill_General_Data::mutable_detaileff1() {
  set_has_detaileff1();
  if (detaileff1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detaileff1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.detailEff1)
  return detaileff1_;
}
inline ::std::string* Skill_General_Data::release_detaileff1() {
  clear_has_detaileff1();
  if (detaileff1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detaileff1_;
    detaileff1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_detaileff1(::std::string* detaileff1) {
  if (detaileff1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detaileff1_;
  }
  if (detaileff1) {
    set_has_detaileff1();
    detaileff1_ = detaileff1;
  } else {
    clear_has_detaileff1();
    detaileff1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.detailEff1)
}

// optional int32 tgtSelectState = 64;
inline bool Skill_General_Data::has_tgtselectstate() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Skill_General_Data::set_has_tgtselectstate() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Skill_General_Data::clear_has_tgtselectstate() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Skill_General_Data::clear_tgtselectstate() {
  tgtselectstate_ = 0;
  clear_has_tgtselectstate();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtselectstate() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtSelectState)
  return tgtselectstate_;
}
inline void Skill_General_Data::set_tgtselectstate(::google::protobuf::int32 value) {
  set_has_tgtselectstate();
  tgtselectstate_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtSelectState)
}

// optional int32 wsType = 65;
inline bool Skill_General_Data::has_wstype() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Skill_General_Data::set_has_wstype() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Skill_General_Data::clear_has_wstype() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Skill_General_Data::clear_wstype() {
  wstype_ = 0;
  clear_has_wstype();
}
inline ::google::protobuf::int32 Skill_General_Data::wstype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.wsType)
  return wstype_;
}
inline void Skill_General_Data::set_wstype(::google::protobuf::int32 value) {
  set_has_wstype();
  wstype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.wsType)
}

// optional bytes describe = 66;
inline bool Skill_General_Data::has_describe() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Skill_General_Data::set_has_describe() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Skill_General_Data::clear_has_describe() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Skill_General_Data::clear_describe() {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& Skill_General_Data::describe() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.describe)
  return *describe_;
}
inline void Skill_General_Data::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.describe)
}
inline void Skill_General_Data::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.describe)
}
inline void Skill_General_Data::set_describe(const void* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.describe)
}
inline ::std::string* Skill_General_Data::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.describe)
  return describe_;
}
inline ::std::string* Skill_General_Data::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.describe)
}

// optional bytes addWsEff = 67;
inline bool Skill_General_Data::has_addwseff() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Skill_General_Data::set_has_addwseff() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Skill_General_Data::clear_has_addwseff() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Skill_General_Data::clear_addwseff() {
  if (addwseff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addwseff_->clear();
  }
  clear_has_addwseff();
}
inline const ::std::string& Skill_General_Data::addwseff() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.addWsEff)
  return *addwseff_;
}
inline void Skill_General_Data::set_addwseff(const ::std::string& value) {
  set_has_addwseff();
  if (addwseff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addwseff_ = new ::std::string;
  }
  addwseff_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.addWsEff)
}
inline void Skill_General_Data::set_addwseff(const char* value) {
  set_has_addwseff();
  if (addwseff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addwseff_ = new ::std::string;
  }
  addwseff_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.addWsEff)
}
inline void Skill_General_Data::set_addwseff(const void* value, size_t size) {
  set_has_addwseff();
  if (addwseff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addwseff_ = new ::std::string;
  }
  addwseff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.addWsEff)
}
inline ::std::string* Skill_General_Data::mutable_addwseff() {
  set_has_addwseff();
  if (addwseff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addwseff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.addWsEff)
  return addwseff_;
}
inline ::std::string* Skill_General_Data::release_addwseff() {
  clear_has_addwseff();
  if (addwseff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addwseff_;
    addwseff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_addwseff(::std::string* addwseff) {
  if (addwseff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addwseff_;
  }
  if (addwseff) {
    set_has_addwseff();
    addwseff_ = addwseff;
  } else {
    clear_has_addwseff();
    addwseff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.addWsEff)
}

// optional int32 learnGold = 68;
inline bool Skill_General_Data::has_learngold() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Skill_General_Data::set_has_learngold() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Skill_General_Data::clear_has_learngold() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Skill_General_Data::clear_learngold() {
  learngold_ = 0;
  clear_has_learngold();
}
inline ::google::protobuf::int32 Skill_General_Data::learngold() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.learnGold)
  return learngold_;
}
inline void Skill_General_Data::set_learngold(::google::protobuf::int32 value) {
  set_has_learngold();
  learngold_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.learnGold)
}

// optional bytes consumEquipNeed = 69;
inline bool Skill_General_Data::has_consumequipneed() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Skill_General_Data::set_has_consumequipneed() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Skill_General_Data::clear_has_consumequipneed() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Skill_General_Data::clear_consumequipneed() {
  if (consumequipneed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumequipneed_->clear();
  }
  clear_has_consumequipneed();
}
inline const ::std::string& Skill_General_Data::consumequipneed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.consumEquipNeed)
  return *consumequipneed_;
}
inline void Skill_General_Data::set_consumequipneed(const ::std::string& value) {
  set_has_consumequipneed();
  if (consumequipneed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumequipneed_ = new ::std::string;
  }
  consumequipneed_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.consumEquipNeed)
}
inline void Skill_General_Data::set_consumequipneed(const char* value) {
  set_has_consumequipneed();
  if (consumequipneed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumequipneed_ = new ::std::string;
  }
  consumequipneed_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.consumEquipNeed)
}
inline void Skill_General_Data::set_consumequipneed(const void* value, size_t size) {
  set_has_consumequipneed();
  if (consumequipneed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumequipneed_ = new ::std::string;
  }
  consumequipneed_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.consumEquipNeed)
}
inline ::std::string* Skill_General_Data::mutable_consumequipneed() {
  set_has_consumequipneed();
  if (consumequipneed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumequipneed_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.consumEquipNeed)
  return consumequipneed_;
}
inline ::std::string* Skill_General_Data::release_consumequipneed() {
  clear_has_consumequipneed();
  if (consumequipneed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = consumequipneed_;
    consumequipneed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_consumequipneed(::std::string* consumequipneed) {
  if (consumequipneed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete consumequipneed_;
  }
  if (consumequipneed) {
    set_has_consumequipneed();
    consumequipneed_ = consumequipneed;
  } else {
    clear_has_consumequipneed();
    consumequipneed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.consumEquipNeed)
}

// optional bytes auras = 70;
inline bool Skill_General_Data::has_auras() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Skill_General_Data::set_has_auras() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Skill_General_Data::clear_has_auras() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Skill_General_Data::clear_auras() {
  if (auras_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auras_->clear();
  }
  clear_has_auras();
}
inline const ::std::string& Skill_General_Data::auras() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.auras)
  return *auras_;
}
inline void Skill_General_Data::set_auras(const ::std::string& value) {
  set_has_auras();
  if (auras_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auras_ = new ::std::string;
  }
  auras_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.auras)
}
inline void Skill_General_Data::set_auras(const char* value) {
  set_has_auras();
  if (auras_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auras_ = new ::std::string;
  }
  auras_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.auras)
}
inline void Skill_General_Data::set_auras(const void* value, size_t size) {
  set_has_auras();
  if (auras_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auras_ = new ::std::string;
  }
  auras_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.auras)
}
inline ::std::string* Skill_General_Data::mutable_auras() {
  set_has_auras();
  if (auras_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auras_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.auras)
  return auras_;
}
inline ::std::string* Skill_General_Data::release_auras() {
  clear_has_auras();
  if (auras_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = auras_;
    auras_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_auras(::std::string* auras) {
  if (auras_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auras_;
  }
  if (auras) {
    set_has_auras();
    auras_ = auras;
  } else {
    clear_has_auras();
    auras_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.auras)
}

// optional int32 mpNeed = 71;
inline bool Skill_General_Data::has_mpneed() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Skill_General_Data::set_has_mpneed() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Skill_General_Data::clear_has_mpneed() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Skill_General_Data::clear_mpneed() {
  mpneed_ = 0;
  clear_has_mpneed();
}
inline ::google::protobuf::int32 Skill_General_Data::mpneed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.mpNeed)
  return mpneed_;
}
inline void Skill_General_Data::set_mpneed(::google::protobuf::int32 value) {
  set_has_mpneed();
  mpneed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.mpNeed)
}

// optional int32 spellBreakable = 72;
inline bool Skill_General_Data::has_spellbreakable() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Skill_General_Data::set_has_spellbreakable() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Skill_General_Data::clear_has_spellbreakable() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Skill_General_Data::clear_spellbreakable() {
  spellbreakable_ = 0;
  clear_has_spellbreakable();
}
inline ::google::protobuf::int32 Skill_General_Data::spellbreakable() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.spellBreakable)
  return spellbreakable_;
}
inline void Skill_General_Data::set_spellbreakable(::google::protobuf::int32 value) {
  set_has_spellbreakable();
  spellbreakable_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.spellBreakable)
}

// optional bytes mainEff = 73;
inline bool Skill_General_Data::has_maineff() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Skill_General_Data::set_has_maineff() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Skill_General_Data::clear_has_maineff() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Skill_General_Data::clear_maineff() {
  if (maineff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maineff_->clear();
  }
  clear_has_maineff();
}
inline const ::std::string& Skill_General_Data::maineff() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.mainEff)
  return *maineff_;
}
inline void Skill_General_Data::set_maineff(const ::std::string& value) {
  set_has_maineff();
  if (maineff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maineff_ = new ::std::string;
  }
  maineff_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.mainEff)
}
inline void Skill_General_Data::set_maineff(const char* value) {
  set_has_maineff();
  if (maineff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maineff_ = new ::std::string;
  }
  maineff_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.mainEff)
}
inline void Skill_General_Data::set_maineff(const void* value, size_t size) {
  set_has_maineff();
  if (maineff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maineff_ = new ::std::string;
  }
  maineff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.mainEff)
}
inline ::std::string* Skill_General_Data::mutable_maineff() {
  set_has_maineff();
  if (maineff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maineff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.mainEff)
  return maineff_;
}
inline ::std::string* Skill_General_Data::release_maineff() {
  clear_has_maineff();
  if (maineff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = maineff_;
    maineff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_maineff(::std::string* maineff) {
  if (maineff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maineff_;
  }
  if (maineff) {
    set_has_maineff();
    maineff_ = maineff;
  } else {
    clear_has_maineff();
    maineff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.mainEff)
}

// optional int32 noArrow = 74;
inline bool Skill_General_Data::has_noarrow() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Skill_General_Data::set_has_noarrow() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Skill_General_Data::clear_has_noarrow() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Skill_General_Data::clear_noarrow() {
  noarrow_ = 0;
  clear_has_noarrow();
}
inline ::google::protobuf::int32 Skill_General_Data::noarrow() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.noArrow)
  return noarrow_;
}
inline void Skill_General_Data::set_noarrow(::google::protobuf::int32 value) {
  set_has_noarrow();
  noarrow_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.noArrow)
}

// optional int32 moveid = 75;
inline bool Skill_General_Data::has_moveid() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Skill_General_Data::set_has_moveid() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Skill_General_Data::clear_has_moveid() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Skill_General_Data::clear_moveid() {
  moveid_ = 0;
  clear_has_moveid();
}
inline ::google::protobuf::int32 Skill_General_Data::moveid() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.moveid)
  return moveid_;
}
inline void Skill_General_Data::set_moveid(::google::protobuf::int32 value) {
  set_has_moveid();
  moveid_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.moveid)
}

// optional int32 id = 76;
inline bool Skill_General_Data::has_id() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Skill_General_Data::set_has_id() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Skill_General_Data::clear_has_id() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Skill_General_Data::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Skill_General_Data::id() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.id)
  return id_;
}
inline void Skill_General_Data::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.id)
}

// optional int32 tgtPos = 77;
inline bool Skill_General_Data::has_tgtpos() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Skill_General_Data::set_has_tgtpos() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Skill_General_Data::clear_has_tgtpos() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Skill_General_Data::clear_tgtpos() {
  tgtpos_ = 0;
  clear_has_tgtpos();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtpos() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtPos)
  return tgtpos_;
}
inline void Skill_General_Data::set_tgtpos(::google::protobuf::int32 value) {
  set_has_tgtpos();
  tgtpos_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtPos)
}

// optional float gcd = 78;
inline bool Skill_General_Data::has_gcd() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Skill_General_Data::set_has_gcd() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Skill_General_Data::clear_has_gcd() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Skill_General_Data::clear_gcd() {
  gcd_ = 0;
  clear_has_gcd();
}
inline float Skill_General_Data::gcd() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.gcd)
  return gcd_;
}
inline void Skill_General_Data::set_gcd(float value) {
  set_has_gcd();
  gcd_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.gcd)
}

// optional int32 tgtNowPos = 79;
inline bool Skill_General_Data::has_tgtnowpos() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Skill_General_Data::set_has_tgtnowpos() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Skill_General_Data::clear_has_tgtnowpos() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Skill_General_Data::clear_tgtnowpos() {
  tgtnowpos_ = 0;
  clear_has_tgtnowpos();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtnowpos() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtNowPos)
  return tgtnowpos_;
}
inline void Skill_General_Data::set_tgtnowpos(::google::protobuf::int32 value) {
  set_has_tgtnowpos();
  tgtnowpos_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtNowPos)
}

// optional bytes graph2 = 80;
inline bool Skill_General_Data::has_graph2() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Skill_General_Data::set_has_graph2() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Skill_General_Data::clear_has_graph2() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Skill_General_Data::clear_graph2() {
  if (graph2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph2_->clear();
  }
  clear_has_graph2();
}
inline const ::std::string& Skill_General_Data::graph2() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.graph2)
  return *graph2_;
}
inline void Skill_General_Data::set_graph2(const ::std::string& value) {
  set_has_graph2();
  if (graph2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph2_ = new ::std::string;
  }
  graph2_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.graph2)
}
inline void Skill_General_Data::set_graph2(const char* value) {
  set_has_graph2();
  if (graph2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph2_ = new ::std::string;
  }
  graph2_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.graph2)
}
inline void Skill_General_Data::set_graph2(const void* value, size_t size) {
  set_has_graph2();
  if (graph2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph2_ = new ::std::string;
  }
  graph2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.graph2)
}
inline ::std::string* Skill_General_Data::mutable_graph2() {
  set_has_graph2();
  if (graph2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.graph2)
  return graph2_;
}
inline ::std::string* Skill_General_Data::release_graph2() {
  clear_has_graph2();
  if (graph2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graph2_;
    graph2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_graph2(::std::string* graph2) {
  if (graph2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph2_;
  }
  if (graph2) {
    set_has_graph2();
    graph2_ = graph2;
  } else {
    clear_has_graph2();
    graph2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.graph2)
}

// optional bytes graph3 = 81;
inline bool Skill_General_Data::has_graph3() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Skill_General_Data::set_has_graph3() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Skill_General_Data::clear_has_graph3() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Skill_General_Data::clear_graph3() {
  if (graph3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph3_->clear();
  }
  clear_has_graph3();
}
inline const ::std::string& Skill_General_Data::graph3() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.graph3)
  return *graph3_;
}
inline void Skill_General_Data::set_graph3(const ::std::string& value) {
  set_has_graph3();
  if (graph3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph3_ = new ::std::string;
  }
  graph3_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.graph3)
}
inline void Skill_General_Data::set_graph3(const char* value) {
  set_has_graph3();
  if (graph3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph3_ = new ::std::string;
  }
  graph3_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.graph3)
}
inline void Skill_General_Data::set_graph3(const void* value, size_t size) {
  set_has_graph3();
  if (graph3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph3_ = new ::std::string;
  }
  graph3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.graph3)
}
inline ::std::string* Skill_General_Data::mutable_graph3() {
  set_has_graph3();
  if (graph3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.graph3)
  return graph3_;
}
inline ::std::string* Skill_General_Data::release_graph3() {
  clear_has_graph3();
  if (graph3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graph3_;
    graph3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_graph3(::std::string* graph3) {
  if (graph3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph3_;
  }
  if (graph3) {
    set_has_graph3();
    graph3_ = graph3;
  } else {
    clear_has_graph3();
    graph3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.graph3)
}

// optional int32 goOnZaijuNo = 82;
inline bool Skill_General_Data::has_goonzaijuno() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Skill_General_Data::set_has_goonzaijuno() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Skill_General_Data::clear_has_goonzaijuno() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Skill_General_Data::clear_goonzaijuno() {
  goonzaijuno_ = 0;
  clear_has_goonzaijuno();
}
inline ::google::protobuf::int32 Skill_General_Data::goonzaijuno() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.goOnZaijuNo)
  return goonzaijuno_;
}
inline void Skill_General_Data::set_goonzaijuno(::google::protobuf::int32 value) {
  set_has_goonzaijuno();
  goonzaijuno_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.goOnZaijuNo)
}

// optional bytes graph1 = 83;
inline bool Skill_General_Data::has_graph1() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Skill_General_Data::set_has_graph1() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Skill_General_Data::clear_has_graph1() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Skill_General_Data::clear_graph1() {
  if (graph1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph1_->clear();
  }
  clear_has_graph1();
}
inline const ::std::string& Skill_General_Data::graph1() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.graph1)
  return *graph1_;
}
inline void Skill_General_Data::set_graph1(const ::std::string& value) {
  set_has_graph1();
  if (graph1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph1_ = new ::std::string;
  }
  graph1_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.graph1)
}
inline void Skill_General_Data::set_graph1(const char* value) {
  set_has_graph1();
  if (graph1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph1_ = new ::std::string;
  }
  graph1_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.graph1)
}
inline void Skill_General_Data::set_graph1(const void* value, size_t size) {
  set_has_graph1();
  if (graph1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph1_ = new ::std::string;
  }
  graph1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.graph1)
}
inline ::std::string* Skill_General_Data::mutable_graph1() {
  set_has_graph1();
  if (graph1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graph1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.graph1)
  return graph1_;
}
inline ::std::string* Skill_General_Data::release_graph1() {
  clear_has_graph1();
  if (graph1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graph1_;
    graph1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_graph1(::std::string* graph1) {
  if (graph1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graph1_;
  }
  if (graph1) {
    set_has_graph1();
    graph1_ = graph1;
  } else {
    clear_has_graph1();
    graph1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.graph1)
}

// optional bytes details = 84;
inline bool Skill_General_Data::has_details() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Skill_General_Data::set_has_details() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Skill_General_Data::clear_has_details() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Skill_General_Data::clear_details() {
  if (details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    details_->clear();
  }
  clear_has_details();
}
inline const ::std::string& Skill_General_Data::details() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.details)
  return *details_;
}
inline void Skill_General_Data::set_details(const ::std::string& value) {
  set_has_details();
  if (details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    details_ = new ::std::string;
  }
  details_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.details)
}
inline void Skill_General_Data::set_details(const char* value) {
  set_has_details();
  if (details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    details_ = new ::std::string;
  }
  details_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.details)
}
inline void Skill_General_Data::set_details(const void* value, size_t size) {
  set_has_details();
  if (details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    details_ = new ::std::string;
  }
  details_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.details)
}
inline ::std::string* Skill_General_Data::mutable_details() {
  set_has_details();
  if (details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    details_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.details)
  return details_;
}
inline ::std::string* Skill_General_Data::release_details() {
  clear_has_details();
  if (details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = details_;
    details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_details(::std::string* details) {
  if (details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete details_;
  }
  if (details) {
    set_has_details();
    details_ = details;
  } else {
    clear_has_details();
    details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.details)
}

// optional float castInterval = 85;
inline bool Skill_General_Data::has_castinterval() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Skill_General_Data::set_has_castinterval() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Skill_General_Data::clear_has_castinterval() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Skill_General_Data::clear_castinterval() {
  castinterval_ = 0;
  clear_has_castinterval();
}
inline float Skill_General_Data::castinterval() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.castInterval)
  return castinterval_;
}
inline void Skill_General_Data::set_castinterval(float value) {
  set_has_castinterval();
  castinterval_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.castInterval)
}

// optional int32 sid = 86;
inline bool Skill_General_Data::has_sid() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Skill_General_Data::set_has_sid() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Skill_General_Data::clear_has_sid() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Skill_General_Data::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 Skill_General_Data::sid() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.sid)
  return sid_;
}
inline void Skill_General_Data::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.sid)
}

// optional int32 selfHpLessPct = 87;
inline bool Skill_General_Data::has_selfhplesspct() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Skill_General_Data::set_has_selfhplesspct() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Skill_General_Data::clear_has_selfhplesspct() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Skill_General_Data::clear_selfhplesspct() {
  selfhplesspct_ = 0;
  clear_has_selfhplesspct();
}
inline ::google::protobuf::int32 Skill_General_Data::selfhplesspct() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.selfHpLessPct)
  return selfhplesspct_;
}
inline void Skill_General_Data::set_selfhplesspct(::google::protobuf::int32 value) {
  set_has_selfhplesspct();
  selfhplesspct_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.selfHpLessPct)
}

// optional int32 tgtEnemyType = 88;
inline bool Skill_General_Data::has_tgtenemytype() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void Skill_General_Data::set_has_tgtenemytype() {
  _has_bits_[2] |= 0x00800000u;
}
inline void Skill_General_Data::clear_has_tgtenemytype() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void Skill_General_Data::clear_tgtenemytype() {
  tgtenemytype_ = 0;
  clear_has_tgtenemytype();
}
inline ::google::protobuf::int32 Skill_General_Data::tgtenemytype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.tgtEnemyType)
  return tgtenemytype_;
}
inline void Skill_General_Data::set_tgtenemytype(::google::protobuf::int32 value) {
  set_has_tgtenemytype();
  tgtenemytype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.tgtEnemyType)
}

// optional int32 guidempNeed = 89;
inline bool Skill_General_Data::has_guidempneed() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void Skill_General_Data::set_has_guidempneed() {
  _has_bits_[2] |= 0x01000000u;
}
inline void Skill_General_Data::clear_has_guidempneed() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void Skill_General_Data::clear_guidempneed() {
  guidempneed_ = 0;
  clear_has_guidempneed();
}
inline ::google::protobuf::int32 Skill_General_Data::guidempneed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.guidempNeed)
  return guidempneed_;
}
inline void Skill_General_Data::set_guidempneed(::google::protobuf::int32 value) {
  set_has_guidempneed();
  guidempneed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.guidempNeed)
}

// optional int32 facePos = 90;
inline bool Skill_General_Data::has_facepos() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void Skill_General_Data::set_has_facepos() {
  _has_bits_[2] |= 0x02000000u;
}
inline void Skill_General_Data::clear_has_facepos() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void Skill_General_Data::clear_facepos() {
  facepos_ = 0;
  clear_has_facepos();
}
inline ::google::protobuf::int32 Skill_General_Data::facepos() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.facePos)
  return facepos_;
}
inline void Skill_General_Data::set_facepos(::google::protobuf::int32 value) {
  set_has_facepos();
  facepos_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.facePos)
}

// optional int32 vpNeed = 91;
inline bool Skill_General_Data::has_vpneed() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void Skill_General_Data::set_has_vpneed() {
  _has_bits_[2] |= 0x04000000u;
}
inline void Skill_General_Data::clear_has_vpneed() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void Skill_General_Data::clear_vpneed() {
  vpneed_ = 0;
  clear_has_vpneed();
}
inline ::google::protobuf::int32 Skill_General_Data::vpneed() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.vpNeed)
  return vpneed_;
}
inline void Skill_General_Data::set_vpneed(::google::protobuf::int32 value) {
  set_has_vpneed();
  vpneed_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.vpNeed)
}

// optional int32 castMoveType = 92;
inline bool Skill_General_Data::has_castmovetype() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void Skill_General_Data::set_has_castmovetype() {
  _has_bits_[2] |= 0x08000000u;
}
inline void Skill_General_Data::clear_has_castmovetype() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void Skill_General_Data::clear_castmovetype() {
  castmovetype_ = 0;
  clear_has_castmovetype();
}
inline ::google::protobuf::int32 Skill_General_Data::castmovetype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.castMoveType)
  return castmovetype_;
}
inline void Skill_General_Data::set_castmovetype(::google::protobuf::int32 value) {
  set_has_castmovetype();
  castmovetype_ = value;
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.castMoveType)
}

// optional bytes wpSkillType = 93;
inline bool Skill_General_Data::has_wpskilltype() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void Skill_General_Data::set_has_wpskilltype() {
  _has_bits_[2] |= 0x10000000u;
}
inline void Skill_General_Data::clear_has_wpskilltype() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void Skill_General_Data::clear_wpskilltype() {
  if (wpskilltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wpskilltype_->clear();
  }
  clear_has_wpskilltype();
}
inline const ::std::string& Skill_General_Data::wpskilltype() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.wpSkillType)
  return *wpskilltype_;
}
inline void Skill_General_Data::set_wpskilltype(const ::std::string& value) {
  set_has_wpskilltype();
  if (wpskilltype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wpskilltype_ = new ::std::string;
  }
  wpskilltype_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.wpSkillType)
}
inline void Skill_General_Data::set_wpskilltype(const char* value) {
  set_has_wpskilltype();
  if (wpskilltype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wpskilltype_ = new ::std::string;
  }
  wpskilltype_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.wpSkillType)
}
inline void Skill_General_Data::set_wpskilltype(const void* value, size_t size) {
  set_has_wpskilltype();
  if (wpskilltype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wpskilltype_ = new ::std::string;
  }
  wpskilltype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.wpSkillType)
}
inline ::std::string* Skill_General_Data::mutable_wpskilltype() {
  set_has_wpskilltype();
  if (wpskilltype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wpskilltype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.wpSkillType)
  return wpskilltype_;
}
inline ::std::string* Skill_General_Data::release_wpskilltype() {
  clear_has_wpskilltype();
  if (wpskilltype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wpskilltype_;
    wpskilltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_wpskilltype(::std::string* wpskilltype) {
  if (wpskilltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wpskilltype_;
  }
  if (wpskilltype) {
    set_has_wpskilltype();
    wpskilltype_ = wpskilltype;
  } else {
    clear_has_wpskilltype();
    wpskilltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.wpSkillType)
}

// optional bytes chargeStgs = 94;
inline bool Skill_General_Data::has_chargestgs() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void Skill_General_Data::set_has_chargestgs() {
  _has_bits_[2] |= 0x20000000u;
}
inline void Skill_General_Data::clear_has_chargestgs() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void Skill_General_Data::clear_chargestgs() {
  if (chargestgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargestgs_->clear();
  }
  clear_has_chargestgs();
}
inline const ::std::string& Skill_General_Data::chargestgs() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.chargeStgs)
  return *chargestgs_;
}
inline void Skill_General_Data::set_chargestgs(const ::std::string& value) {
  set_has_chargestgs();
  if (chargestgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargestgs_ = new ::std::string;
  }
  chargestgs_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.chargeStgs)
}
inline void Skill_General_Data::set_chargestgs(const char* value) {
  set_has_chargestgs();
  if (chargestgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargestgs_ = new ::std::string;
  }
  chargestgs_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.chargeStgs)
}
inline void Skill_General_Data::set_chargestgs(const void* value, size_t size) {
  set_has_chargestgs();
  if (chargestgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargestgs_ = new ::std::string;
  }
  chargestgs_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.chargeStgs)
}
inline ::std::string* Skill_General_Data::mutable_chargestgs() {
  set_has_chargestgs();
  if (chargestgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chargestgs_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.chargeStgs)
  return chargestgs_;
}
inline ::std::string* Skill_General_Data::release_chargestgs() {
  clear_has_chargestgs();
  if (chargestgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chargestgs_;
    chargestgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_chargestgs(::std::string* chargestgs) {
  if (chargestgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chargestgs_;
  }
  if (chargestgs) {
    set_has_chargestgs();
    chargestgs_ = chargestgs;
  } else {
    clear_has_chargestgs();
    chargestgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.chargeStgs)
}

// optional bytes se = 95;
inline bool Skill_General_Data::has_se() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void Skill_General_Data::set_has_se() {
  _has_bits_[2] |= 0x40000000u;
}
inline void Skill_General_Data::clear_has_se() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void Skill_General_Data::clear_se() {
  if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_->clear();
  }
  clear_has_se();
}
inline const ::std::string& Skill_General_Data::se() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.se)
  return *se_;
}
inline void Skill_General_Data::set_se(const ::std::string& value) {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  se_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.se)
}
inline void Skill_General_Data::set_se(const char* value) {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  se_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.se)
}
inline void Skill_General_Data::set_se(const void* value, size_t size) {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  se_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.se)
}
inline ::std::string* Skill_General_Data::mutable_se() {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.se)
  return se_;
}
inline ::std::string* Skill_General_Data::release_se() {
  clear_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = se_;
    se_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_se(::std::string* se) {
  if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_;
  }
  if (se) {
    set_has_se();
    se_ = se;
  } else {
    clear_has_se();
    se_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.se)
}

// optional bytes effects = 96;
inline bool Skill_General_Data::has_effects() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void Skill_General_Data::set_has_effects() {
  _has_bits_[2] |= 0x80000000u;
}
inline void Skill_General_Data::clear_has_effects() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void Skill_General_Data::clear_effects() {
  if (effects_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effects_->clear();
  }
  clear_has_effects();
}
inline const ::std::string& Skill_General_Data::effects() const {
  // @@protoc_insertion_point(field_get:data.Skill_General_Data.effects)
  return *effects_;
}
inline void Skill_General_Data::set_effects(const ::std::string& value) {
  set_has_effects();
  if (effects_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effects_ = new ::std::string;
  }
  effects_->assign(value);
  // @@protoc_insertion_point(field_set:data.Skill_General_Data.effects)
}
inline void Skill_General_Data::set_effects(const char* value) {
  set_has_effects();
  if (effects_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effects_ = new ::std::string;
  }
  effects_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.Skill_General_Data.effects)
}
inline void Skill_General_Data::set_effects(const void* value, size_t size) {
  set_has_effects();
  if (effects_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effects_ = new ::std::string;
  }
  effects_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.Skill_General_Data.effects)
}
inline ::std::string* Skill_General_Data::mutable_effects() {
  set_has_effects();
  if (effects_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effects_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.Skill_General_Data.effects)
  return effects_;
}
inline ::std::string* Skill_General_Data::release_effects() {
  clear_has_effects();
  if (effects_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effects_;
    effects_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Skill_General_Data::set_allocated_effects(::std::string* effects) {
  if (effects_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effects_;
  }
  if (effects) {
    set_has_effects();
    effects_ = effects;
  } else {
    clear_has_effects();
    effects_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.Skill_General_Data.effects)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
